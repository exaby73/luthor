{
  "version": 3,
  "sources": ["../../hast-util-to-string/lib/index.js"],
  "sourcesContent": ["/**\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * Get the plain-text value of a hast node.\n *\n * @param {Nodes} node\n *   Node to serialize.\n * @returns {string}\n *   Serialized node.\n */\nexport function toString(node) {\n  // “The concatenation of data of all the Text node descendants of the context\n  // object, in tree order.”\n  if ('children' in node) {\n    return all(node)\n  }\n\n  // “Context object’s data.”\n  return 'value' in node ? node.value : ''\n}\n\n/**\n * @param {Nodes} node\n *   Node.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node) {\n  if (node.type === 'text') {\n    return node.value\n  }\n\n  return 'children' in node ? all(node) : ''\n}\n\n/**\n * @param {Parents} node\n *   Node.\n * @returns {string}\n *   Serialized node.\n */\nfunction all(node) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n\n  while (++index < node.children.length) {\n    result[index] = one(node.children[index])\n  }\n\n  return result.join('')\n}\n"],
  "mappings": ";AAaO,SAAS,SAAS,MAAM;AAG7B,MAAI,cAAc,MAAM;AACtB,WAAO,IAAI,IAAI;AAAA,EACjB;AAGA,SAAO,WAAW,OAAO,KAAK,QAAQ;AACxC;AAQA,SAAS,IAAI,MAAM;AACjB,MAAI,KAAK,SAAS,QAAQ;AACxB,WAAO,KAAK;AAAA,EACd;AAEA,SAAO,cAAc,OAAO,IAAI,IAAI,IAAI;AAC1C;AAQA,SAAS,IAAI,MAAM;AACjB,MAAI,QAAQ;AAEZ,QAAM,SAAS,CAAC;AAEhB,SAAO,EAAE,QAAQ,KAAK,SAAS,QAAQ;AACrC,WAAO,KAAK,IAAI,IAAI,KAAK,SAAS,KAAK,CAAC;AAAA,EAC1C;AAEA,SAAO,OAAO,KAAK,EAAE;AACvB;",
  "names": []
}
