{"version":3,"sources":["../src/hast.ts","../src/internal/escaping.ts","../src/common/annotation.ts","../src/helpers/meta-options.ts","../src/common/logger.ts","../src/common/plugin-hooks.ts","../src/common/style-settings.ts","../src/internal/type-checks.ts","../src/internal/render-line.ts","../src/internal/render-block.ts","../src/internal/ranges.ts","../src/common/line.ts","../src/common/block.ts","../../../../node_modules/.pnpm/shiki@1.1.7/node_modules/shiki/dist/themes/github-dark.mjs","../../../../node_modules/.pnpm/shiki@1.1.7/node_modules/shiki/dist/themes/github-light.mjs","../src/internal/css.ts","../src/internal/render-group.ts","../src/helpers/color-transforms.ts","../../../../node_modules/.pnpm/culori@4.0.1/node_modules/culori/src/lrgb/convertRgbToLrgb.js","../../../../node_modules/.pnpm/culori@4.0.1/node_modules/culori/src/lrgb/convertLrgbToRgb.js","../../../../node_modules/.pnpm/culori@4.0.1/node_modules/culori/src/util/normalizeHue.js","../../../../node_modules/.pnpm/culori@4.0.1/node_modules/culori/src/lch/convertLabToLch.js","../../../../node_modules/.pnpm/culori@4.0.1/node_modules/culori/src/lch/convertLchToLab.js","../../../../node_modules/.pnpm/culori@4.0.1/node_modules/culori/src/hsl/convertHslToRgb.js","../../../../node_modules/.pnpm/culori@4.0.1/node_modules/culori/src/oklab/convertLrgbToOklab.js","../../../../node_modules/.pnpm/culori@4.0.1/node_modules/culori/src/oklab/convertRgbToOklab.js","../../../../node_modules/.pnpm/culori@4.0.1/node_modules/culori/src/oklab/convertOklabToLrgb.js","../../../../node_modules/.pnpm/culori@4.0.1/node_modules/culori/src/oklab/convertOklabToRgb.js","../src/internal/search-algorithms.ts","../src/internal/color-spaces.ts","../src/internal/vscode-colors.ts","../../../../node_modules/.pnpm/strip-json-comments@5.0.1/node_modules/strip-json-comments/index.js","../src/common/theme.ts","../src/common/plugin-style-settings.ts","../src/internal/core-styles.ts","../src/internal/style-resolving.ts","../src/common/style-variants.ts","../src/internal/tabindex-js-module.min.ts","../src/internal/core-plugins.ts","../src/common/engine.ts","../src/common/plugin-data.ts","../src/common/plugin-texts.ts","../src/common/plugin.ts","../src/helpers/ast.ts","../src/helpers/i18n.ts","../../../../node_modules/.pnpm/djb2a@2.0.0/node_modules/djb2a/index.js","../src/helpers/objects.ts"],"sourcesContent":["import type { Element, ElementContent, Node, Nodes, Parent, Parents, Properties, Root } from 'hast'\nimport { toHtml } from 'hast-util-to-html'\nimport { toText } from 'hast-util-to-text'\nimport { matches, select, selectAll } from 'hast-util-select'\nimport { visit } from 'unist-util-visit'\nimport { visitParents, CONTINUE, EXIT, SKIP } from 'unist-util-visit-parents'\nimport { h, s } from 'hastscript'\nimport postcss, { Declaration } from 'postcss'\nimport { serializeCssStringValue } from './internal/escaping'\n\nexport { visit, visitParents, CONTINUE, EXIT, SKIP }\nexport { toHtml, toText, matches, select, selectAll, h, s }\n\nexport type { Element, ElementContent, Node, Nodes, Parent, Parents, Properties, Root }\n\n/**\n * Sets a property on the given AST node.\n *\n * You can set the value to `null` to remove the property.\n */\nexport function setProperty(node: Element, propertyName: string, value: string | string[] | null) {\n\tconst properties: Properties = node.properties || {}\n\tnode.properties = properties\n\tif (value !== null) {\n\t\tproperties[propertyName] = value\n\t} else {\n\t\tdelete properties[propertyName]\n\t}\n}\n\n/**\n * Retrieves an array of class names from the given AST node.\n */\nexport function getClassNames(node: Element): string[] {\n\tconst stringOrArr = node.properties?.className\n\tif (!stringOrArr || stringOrArr === true) return []\n\tif (Array.isArray(stringOrArr)) return stringOrArr.map((className) => className.toString())\n\treturn stringOrArr.toString().split(' ')\n}\n\n/**\n * Adds a class name to the given AST node.\n *\n * If the class name already exists on the node, it will not be added again.\n */\nexport function addClassName(node: Element, className: string) {\n\tconst classNames = getClassNames(node)\n\tif (classNames.indexOf(className) === -1) classNames.push(className)\n\tsetProperty(node, 'className', classNames)\n}\n\n/**\n * Removes a class name from the given AST node.\n *\n * If the class name does not exist on the node, nothing will be changed.\n */\nexport function removeClassName(node: Element, className: string) {\n\tconst classNames = getClassNames(node)\n\tconst index = classNames.indexOf(className)\n\tif (index === -1) return\n\tclassNames.splice(index, 1)\n\tsetProperty(node, 'className', classNames)\n}\n\n/**\n * If the given node has a `style` attribute, parses it and returns a map of its styles.\n *\n * If the node has no `style` attribute, an empty map is returned.\n */\nexport function getInlineStyles(node: Element): Map<string, string> {\n\tconst styles = new Map<string, string>()\n\tconst styleString = node.properties?.style?.toString().trim() || ''\n\tif (!styleString) return styles\n\n\t// @ts-expect-error PostCSS has incorrect types when using exactOptionalPropertyTypes\n\t// eslint-disable-next-line redundant-undefined/redundant-undefined\n\tconst postCssOptions: { from?: string } = { from: undefined }\n\n\t// Attempt to parse the style string and extract its root-level declarations\n\ttry {\n\t\tconst root = postcss.parse(styleString, postCssOptions)\n\n\t\t// Extract all root-level declarations into the styles map\n\t\troot.each((node) => {\n\t\t\tif (node.type === 'decl') styles.set(node.prop, node.value)\n\t\t})\n\t} catch (error) {\n\t\t// Treat invalid inline styles as if they were empty\n\t}\n\n\treturn styles\n}\n\n/**\n * Sets the `style` attribute on the given node to the given styles.\n *\n * Any existing styles will be overwritten.\n */\nexport function setInlineStyles(node: Element, styles: Map<string, string>) {\n\tconst styleString = [...styles]\n\t\t.map(([prop, value]) =>\n\t\t\tnew Declaration({\n\t\t\t\tprop,\n\t\t\t\tvalue,\n\t\t\t\traws: {\n\t\t\t\t\tbetween: ':',\n\t\t\t\t},\n\t\t\t}).toString()\n\t\t)\n\t\t.join(';')\n\tsetProperty(node, 'style', styleString)\n}\n\n/**\n * Sets a single inline style property on the given node.\n *\n * You can set the value to an empty string or `null` to remove the property.\n *\n * Use `valueFormat` to specify how the value should be serialized:\n * - `'raw'`: The value is used as-is. This is the default.\n * - `'string'`: The value is serialized as a CSS string value, escaping special characters.\n */\nexport function setInlineStyle(node: Element, cssProperty: string, value: string | null, valueFormat: 'raw' | 'string' = 'raw') {\n\tconst styles = getInlineStyles(node)\n\tif (value !== null) {\n\t\tstyles.set(cssProperty, valueFormat === 'string' ? serializeCssStringValue(value) : value)\n\t} else {\n\t\tstyles.delete(cssProperty)\n\t}\n\tsetInlineStyles(node, styles)\n}\n","export function escapeRegExp(input: string) {\n\treturn input.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n}\n\n/**\n * Serializes the given value as a CSS string value that can be used in `content` or a CSS variable.\n *\n * Special characters are escaped, and the result is wrapped in single or double quotes.\n */\nexport function serializeCssStringValue(value: string, quoteStyle: 'single' | 'double' = 'single') {\n\tconst quote = quoteStyle === 'single' ? \"'\" : '\"'\n\tconst escapedValue = Array.from(value)\n\t\t.map((char) => {\n\t\t\tconst code = char.charCodeAt(0)\n\t\t\tswitch (true) {\n\t\t\t\t// Use replacement character for NULL\n\t\t\t\tcase code === 0x0000:\n\t\t\t\t\treturn '\\uFFFD'\n\t\t\t\t// Escape U+0001 to U+001F and U+007F as code point\n\t\t\t\tcase (code >= 0x0001 && code <= 0x001f) || code === 0x007f:\n\t\t\t\t\treturn `\\\\${code.toString(16)} `\n\t\t\t\t// Escape nested quotes and backslashes\n\t\t\t\tcase char === quote || char === '\\\\':\n\t\t\t\t\treturn `\\\\${char}`\n\t\t\t\t// Use all other characters directly\n\t\t\t\tdefault:\n\t\t\t\t\treturn char\n\t\t\t}\n\t\t})\n\t\t.join('')\n\treturn `${quote}${escapedValue}${quote}`\n}\n","import type { Element, Parents } from '../hast'\nimport { getClassNames, setProperty, h } from '../hast'\nimport { ExpressiveCodeLine } from './line'\nimport { ResolverContext } from './plugin'\n\nexport type ExpressiveCodeInlineRange = {\n\tcolumnStart: number\n\tcolumnEnd: number\n}\n\nexport type AnnotationRenderOptions = ResolverContext & { nodesToTransform: Parents[]; line: ExpressiveCodeLine; lineIndex: number }\n\nexport type AnnotationRenderPhase = 'earliest' | 'earlier' | 'normal' | 'later' | 'latest'\n\n/* c8 ignore next */\nexport const AnnotationRenderPhaseOrder: AnnotationRenderPhase[] = ['earliest', 'earlier', 'normal', 'later', 'latest']\n\nexport type AnnotationBaseOptions = { inlineRange?: ExpressiveCodeInlineRange | undefined; renderPhase?: AnnotationRenderPhase | undefined }\n\n/**\n * An abstract class representing a single annotation attached to a code line.\n *\n * You can develop your own annotations by extending this class and providing\n * implementations for its abstract methods. See the implementation of the\n * {@link InlineStyleAnnotation} class for an example.\n *\n * You can also define your annotations as plain objects, as long as they have\n * the same properties as this class. This allows you to use annotations in a\n * more functional way, without the need to extend a class.\n */\nexport abstract class ExpressiveCodeAnnotation {\n\tconstructor({ inlineRange, renderPhase }: AnnotationBaseOptions) {\n\t\tthis.inlineRange = inlineRange\n\t\tthis.renderPhase = renderPhase\n\t}\n\n\t/**\n\t * Renders the annotation by transforming the provided nodes.\n\t *\n\t * This function will be called with an array of AST nodes to transform, and is expected\n\t * to return an array containing the same number of nodes.\n\t *\n\t * For example, you could use the `hastscript` library to wrap the received nodes\n\t * in HTML elements.\n\t */\n\tabstract render({ nodesToTransform, line, lineIndex }: AnnotationRenderOptions): Parents[]\n\n\t/**\n\t * An optional name for the annotation. This can be used for debugging or logging purposes,\n\t * or to allow other plugins to identify the annotation.\n\t */\n\treadonly name?: string | undefined\n\n\t/**\n\t * An optional range of columns within the line that this annotation applies to.\n\t * If not provided, the annotation will apply to the entire line.\n\t */\n\treadonly inlineRange?: ExpressiveCodeInlineRange | undefined\n\n\t/**\n\t * Determines the phase in which this annotation should be rendered.\n\t * Rendering is done in phases, from `earliest` to `latest`.\n\t * Annotations with the same phase are rendered in the order they were added.\n\t *\n\t * The earlier an annotation is rendered, the more likely it is to be split, modified\n\t * or wrapped by later annotations. Syntax highlighting is rendered in the `earliest` phase\n\t * to allow other annotations to wrap and modify the highlighted code.\n\t *\n\t * The default phase is `normal`.\n\t */\n\treadonly renderPhase?: AnnotationRenderPhase | undefined\n}\n\nexport type InlineStyleAnnotationOptions = AnnotationBaseOptions & {\n\t/**\n\t * The color of the annotation. This is expected to be a hex color string, e.g. `#888`.\n\t * Using CSS variables or other color formats is possible, but prevents automatic\n\t * color contrast checks from working.\n\t */\n\tcolor?: string | undefined\n\t/**\n\t * Whether the annotation should be rendered in italics.\n\t */\n\titalic?: boolean | undefined\n\t/**\n\t * Whether the annotation should be rendered in bold.\n\t */\n\tbold?: boolean | undefined\n\t/**\n\t * Whether the annotation should be rendered with an underline.\n\t */\n\tunderline?: boolean | undefined\n\t/**\n\t * Inline styles can be theme-dependent, which allows plugins like syntax highlighters to\n\t * style the same code differently depending on the theme.\n\t *\n\t * To support this, the engine creates a style variant for each theme given in the\n\t * configuration, and plugins can go through the engine's `styleVariants` array to\n\t * access all the themes.\n\t *\n\t * When adding an inline style annotation to a range of code, you can optionally set\n\t * this property to a `styleVariants` array index to indicate that this annotation\n\t * only applies to a specific theme. If this property is not set, the annotation will\n\t * apply to all themes.\n\t */\n\tstyleVariantIndex?: number | undefined\n}\n\n/**\n * A theme-dependent inline style annotation that allows changing colors, font styles and\n * decorations of the targeted code. This annotation is used by the syntax highlighting plugin\n * to apply colors and styles to syntax tokens, and you can use it in your own plugins as well.\n *\n * You can add as many inline style annotations to a line as you want, even targeting the same code\n * with multiple fully or partially overlapping annotation ranges. During rendering, these\n * annotations will be automatically optimized to avoid creating unnecessary HTML elements.\n *\n * @note\n * If you want to publish your own plugin using the `InlineStyleAnnotation` class, import it from\n * the `@expressive-code/core` package installed as a **peer dependency** of your plugin package.\n * This ensures that your plugin does not cause a version conflict if the user has a different\n * version of Expressive Code installed on their site.\n */\nexport class InlineStyleAnnotation extends ExpressiveCodeAnnotation {\n\tname: string\n\tcolor: string | undefined\n\titalic: boolean\n\tbold: boolean\n\tunderline: boolean\n\tstyleVariantIndex: number | undefined\n\n\tconstructor({ color, italic = false, bold = false, underline = false, styleVariantIndex, ...baseOptions }: InlineStyleAnnotationOptions) {\n\t\tsuper(baseOptions)\n\t\tthis.name = 'Inline style'\n\t\tthis.color = color\n\t\tthis.italic = italic\n\t\tthis.bold = bold\n\t\tthis.underline = underline\n\t\tthis.styleVariantIndex = styleVariantIndex\n\t}\n\n\trender({ nodesToTransform, styleVariants }: AnnotationRenderOptions) {\n\t\tconst newStyles = new Map<string, string>()\n\t\tconst addStylesForVariantIndex = (variantIndex: number) => {\n\t\t\tconst varPrefix = `--${variantIndex}`\n\t\t\tif (this.color) newStyles.set(varPrefix, this.color)\n\t\t\tif (this.italic) newStyles.set(`${varPrefix}fs`, 'italic')\n\t\t\tif (this.bold) newStyles.set(`${varPrefix}fw`, 'bold')\n\t\t\tif (this.underline) newStyles.set(`${varPrefix}td`, 'underline')\n\t\t}\n\t\tconst variantIndices = this.styleVariantIndex !== undefined ? [this.styleVariantIndex] : styleVariants.map((_, i) => i)\n\t\tvariantIndices.forEach(addStylesForVariantIndex)\n\t\tif (newStyles.size === 0) return nodesToTransform\n\n\t\tconst buildStyleString = (styles: Map<string, string>) => {\n\t\t\treturn [...styles].map(([key, value]) => `${key}:${value}`).join(';')\n\t\t}\n\n\t\tconst isInlineStyleNode = (node: Element) =>\n\t\t\tnode.tagName === 'span' &&\n\t\t\t// Our inline style nodes have no class names\n\t\t\t!getClassNames(node).length &&\n\t\t\t// Our inline style nodes contain CSS variable declarations\n\t\t\tnode.properties?.style?.toString().startsWith('--')\n\n\t\tconst modifyExistingStyles = (node: Element, remove = false) => {\n\t\t\tconst existingStyles: [string, string][] = (node.properties?.style?.toString() || '').split(';').map((style) => {\n\t\t\t\tconst declParts = style.split(':')\n\t\t\t\treturn [declParts[0], declParts.slice(1).join(':')]\n\t\t\t})\n\t\t\tconst modifiedStylesMap = new Map(existingStyles)\n\t\t\tnewStyles.forEach((value, key) => {\n\t\t\t\tif (remove) {\n\t\t\t\t\tmodifiedStylesMap.delete(key)\n\t\t\t\t} else {\n\t\t\t\t\tmodifiedStylesMap.set(key, value)\n\t\t\t\t}\n\t\t\t})\n\t\t\tconst modifiedStyles = buildStyleString(modifiedStylesMap)\n\t\t\tif (modifiedStyles) {\n\t\t\t\tsetProperty(node, 'style', modifiedStyles)\n\t\t\t} else if (node.properties?.style) {\n\t\t\t\tdelete node.properties.style\n\t\t\t}\n\t\t\treturn modifiedStyles\n\t\t}\n\n\t\tconst removeNestedConflictingStyles = (node: Parents) => {\n\t\t\t// Remove conflicting styles from all nested inline style nodes\n\t\t\tfor (let childIdx = node.children?.length - 1; childIdx >= 0; childIdx--) {\n\t\t\t\tconst child = node.children[childIdx]\n\t\t\t\tif (child.type === 'element') {\n\t\t\t\t\tif (isInlineStyleNode(child)) {\n\t\t\t\t\t\tif (!modifyExistingStyles(child, true)) {\n\t\t\t\t\t\t\t// If the node has no styles left, replace it with its children\n\t\t\t\t\t\t\tnode.children.splice(childIdx, 1, ...child.children)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tremoveNestedConflictingStyles(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn nodesToTransform.map((node) => {\n\t\t\t// Always remove conflicting styles from the node's children\n\t\t\tremoveNestedConflictingStyles(node)\n\t\t\t// If node is already an inline style token, modify its existing styles\n\t\t\tif (node.type === 'element' && isInlineStyleNode(node)) {\n\t\t\t\tmodifyExistingStyles(node)\n\t\t\t\treturn node\n\t\t\t}\n\t\t\t// Otherwise, wrap the node in a new inline style token\n\t\t\tconst transformedNode = h('span', { style: buildStyleString(newStyles) }, node)\n\t\t\treturn transformedNode\n\t\t})\n\t}\n}\n\nexport function isInlineStyleAnnotation(annotation: unknown): annotation is InlineStyleAnnotation {\n\treturn annotation instanceof InlineStyleAnnotation || (annotation as ExpressiveCodeAnnotation).name === 'Inline style'\n}\n","import { escapeRegExp } from '../internal/escaping'\n\nexport class MetaOptions {\n\tconstructor(input: string) {\n\t\tconst { options, errors } = parseOptions(input)\n\t\tthis.#parsedOptions = options\n\t\tthis.#errors = errors.length ? errors : undefined\n\t}\n\n\t#parsedOptions: MetaOption[]\n\t#errors: string[] | undefined\n\n\t/**\n\t * A list of error messages that occurred when parsing the meta string,\n\t * or `undefined` if no errors occurred.\n\t */\n\tget errors() {\n\t\treturn this.#errors\n\t}\n\n\t/**\n\t * Returns a list of meta options, optionally filtered by their key and/or {@link MetaOptionKind}.\n\t *\n\t * @param keyOrKeys\n\t * Allows to filter the options by key. An empty string will return options without a key.\n\t * A non-empty string will return options with a matching key (case-insensitive).\n\t * An array of strings will return options with any of the matching keys.\n\t * If omitted, no key-based filtering will be applied.\n\t *\n\t * @param kind\n\t * Allows to filter the options by {@link MetaOptionKind}.\n\t * If omitted, no kind-based filtering will be applied.\n\t */\n\tlist<K extends MetaOptionKind | undefined = undefined>(keyOrKeys?: string | string[], kind?: K) {\n\t\ttype ReturnType = K extends MetaOptionKind ? Extract<MetaOption, { kind: K }>[] : MetaOption[]\n\t\tconst filtered = this.#parsedOptions.filter((option) => {\n\t\t\tif (kind !== undefined && option.kind !== kind) return false\n\t\t\tif (keyOrKeys === undefined) return true\n\t\t\tconst keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys]\n\t\t\treturn keys.some((key) => (key === '' && !option.key) || option.key?.toLowerCase() === key.toLowerCase())\n\t\t}) as ReturnType\n\t\treturn filtered\n\t}\n\n\tvalue<K extends MetaOptionKind | undefined = undefined>(key: string, kind?: K) {\n\t\tif (!key) throw new Error('You must specify a non-empty key when using getString, getRange, getRegExp or getBoolean.')\n\t\ttype OptionType = K extends MetaOptionKind ? Extract<MetaOption, { kind: K }> : MetaOption\n\t\treturn this.list(key, kind)?.pop()?.value as OptionType['value'] | undefined\n\t}\n\n\t/**\n\t * Returns the last string value with the given key (case-insensitive),\n\t * or without a key by passing an empty string.\n\t */\n\tgetString(key: string) {\n\t\treturn this.value(key, 'string')\n\t}\n\n\t/**\n\t * Returns an array of all string values with the given keys (case-insensitive),\n\t * or without a key by passing an empty string.\n\t */\n\tgetStrings(keyOrKeys?: string | string[]) {\n\t\treturn this.list(keyOrKeys, 'string').map((option) => option.value)\n\t}\n\n\t/**\n\t * Returns the last range value (`{value}`) with the given key (case-insensitive),\n\t * or without a key by passing an empty string.\n\t */\n\tgetRange(key: string) {\n\t\treturn this.value(key, 'range')\n\t}\n\n\t/**\n\t * Returns an array of all range values (`{value}`) with the given keys (case-insensitive),\n\t * or without a key by passing an empty string.\n\t */\n\tgetRanges(keyOrKeys?: string | string[]) {\n\t\treturn this.list(keyOrKeys, 'range').map((option) => option.value)\n\t}\n\n\t/**\n\t * Returns the last integer value with the given key (case-insensitive),\n\t * or without a key by passing an empty string.\n\t */\n\tgetInteger(key: string) {\n\t\treturn this.getIntegers(key).pop()\n\t}\n\n\t/**\n\t * Returns an array of all integer values with the given keys (case-insensitive),\n\t * or without a key by passing an empty string.\n\t */\n\tgetIntegers(keyOrKeys?: string | string[]) {\n\t\treturn this.list(keyOrKeys)\n\t\t\t.map((option) => {\n\t\t\t\t// Skip values that are neither strings nor ranges\n\t\t\t\tif (option.kind !== 'string' && option.kind !== 'range') return NaN\n\t\t\t\t// Skip values that don't look like valid numbers\n\t\t\t\tif (!/^-?\\d+$/.test(option.value.trim())) return NaN\n\t\t\t\t// Try to parse the value as an integer and return it\n\t\t\t\treturn parseInt(option.value, 10)\n\t\t\t})\n\t\t\t.filter((value) => !isNaN(value))\n\t}\n\n\t/**\n\t * Returns the last RegExp value (`/value/`) with the given key (case-insensitive),\n\t * or without a key by passing an empty string.\n\t */\n\tgetRegExp(key: string) {\n\t\treturn this.value(key, 'regexp')\n\t}\n\n\t/**\n\t * Returns an array of all RegExp values (`/value/`) with the given keys (case-insensitive),\n\t * or without a key by passing an empty string.\n\t */\n\tgetRegExps(keyOrKeys?: string | string[]) {\n\t\treturn this.list(keyOrKeys, 'regexp').map((option) => option.value)\n\t}\n\n\t/**\n\t * Returns the last boolean value with the given key (case-insensitive).\n\t */\n\tgetBoolean(key: string) {\n\t\treturn this.value(key, 'boolean')\n\t}\n}\n\nexport type MetaOptionBase = { index: number; raw: string; key: string | undefined; valueStartDelimiter: string; valueEndDelimiter: string }\n\nexport type MetaOptionString = MetaOptionBase & { kind: 'string'; value: string }\nexport type MetaOptionRange = MetaOptionBase & { kind: 'range'; value: string }\nexport type MetaOptionRegExp = MetaOptionBase & { kind: 'regexp'; value: RegExp }\nexport type MetaOptionBoolean = MetaOptionBase & { kind: 'boolean'; value: boolean }\n\nexport type MetaOption = MetaOptionString | MetaOptionRange | MetaOptionRegExp | MetaOptionBoolean\n\nexport type MetaOptionKind = MetaOption['kind']\n\nfunction parseOptions(\n\tinput: string,\n\tsyntax: DelimitedValuesSyntax = {\n\t\tvalueDelimiters: [\"'\", '\"', '/', '{...}'],\n\t\tkeyValueSeparator: '=',\n\t}\n): { options: MetaOption[]; errors: string[] } {\n\tconst options: MetaOption[] = []\n\tconst errors: string[] = []\n\n\t// Parse delimited values first and remove them from the input string\n\tconst delimitedValues = parseDelimitedValues(input, syntax)\n\tlet inputWithoutDelimited = input\n\tdelimitedValues.forEach(({ index, fullMatch: raw, key, value, valueStartDelimiter, valueEndDelimiter }) => {\n\t\tinputWithoutDelimited = inputWithoutDelimited.slice(0, index) + ' '.repeat(raw.length) + inputWithoutDelimited.slice(index + raw.length)\n\t\t// Handle regular expressions\n\t\tif (valueStartDelimiter === '/') {\n\t\t\tlet regExp: RegExp | undefined\n\t\t\ttry {\n\t\t\t\t// Try to use regular expressions with capture group indices\n\t\t\t\tregExp = new RegExp(value, 'gd')\n\t\t\t} catch (_error) {\n\t\t\t\ttry {\n\t\t\t\t\t// Use fallback if unsupported\n\t\t\t\t\tregExp = new RegExp(value, 'g')\n\t\t\t\t} catch (error) {\n\t\t\t\t\t/* c8 ignore next */\n\t\t\t\t\tconst msg = error instanceof Error ? error.message : (error as string)\n\t\t\t\t\terrors.push(`Failed to parse option \\`${raw.trim()}\\`: ${msg}`)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\toptions.push({\n\t\t\t\tindex,\n\t\t\t\traw,\n\t\t\t\tkind: 'regexp',\n\t\t\t\tkey,\n\t\t\t\tvalue: regExp,\n\t\t\t\tvalueStartDelimiter,\n\t\t\t\tvalueEndDelimiter,\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\t// Handle ranges\n\t\tif (valueStartDelimiter === '{') {\n\t\t\toptions.push({\n\t\t\t\tindex,\n\t\t\t\traw,\n\t\t\t\tkind: 'range',\n\t\t\t\tkey,\n\t\t\t\tvalue,\n\t\t\t\tvalueStartDelimiter,\n\t\t\t\tvalueEndDelimiter,\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\t// Treat all other options as strings\n\t\toptions.push({\n\t\t\tindex,\n\t\t\traw,\n\t\t\tkind: 'string',\n\t\t\tkey,\n\t\t\tvalue,\n\t\t\tvalueStartDelimiter,\n\t\t\tvalueEndDelimiter,\n\t\t})\n\t})\n\n\t// Now parse all remaining options\n\tconst escapedSeparator = escapeRegExp(syntax.keyValueSeparator).replace(/-/g, '\\\\-')\n\tconst regExp = new RegExp(`([^\\\\s${escapedSeparator}]+)(?:\\\\s*${escapedSeparator}\\\\s*(\\\\S+))?`, 'g')\n\tconst simpleOptions = [...inputWithoutDelimited.matchAll(regExp)]\n\tsimpleOptions.forEach((match) => {\n\t\tconst index = match.index ?? 0\n\t\tconst [raw, key, value] = match\n\n\t\tif (value === 'true' || value === 'false' || value === undefined) {\n\t\t\t// Handle booleans\n\t\t\toptions.push({\n\t\t\t\tindex,\n\t\t\t\traw,\n\t\t\t\tkind: 'boolean',\n\t\t\t\tkey,\n\t\t\t\tvalue: value !== 'false',\n\t\t\t\tvalueStartDelimiter: '',\n\t\t\t\tvalueEndDelimiter: '',\n\t\t\t})\n\t\t} else {\n\t\t\t// Treat all other options as strings\n\t\t\toptions.push({\n\t\t\t\tindex,\n\t\t\t\traw,\n\t\t\t\tkind: 'string',\n\t\t\t\tkey,\n\t\t\t\tvalue,\n\t\t\t\tvalueStartDelimiter: '',\n\t\t\t\tvalueEndDelimiter: '',\n\t\t\t})\n\t\t}\n\t})\n\n\t// Sort options by their index in the input string\n\toptions.sort((a, b) => a.index - b.index)\n\n\treturn {\n\t\toptions,\n\t\terrors,\n\t}\n}\n\nfunction parseDelimitedValues(input: string, syntax: DelimitedValuesSyntax): DelimitedValuesMatch[] {\n\tconst valueDelimiterPairs = syntax.valueDelimiters.map((valueDelimiter) => {\n\t\tconst parts = valueDelimiter.split('...')\n\t\tconst isPair = parts.length === 2\n\t\treturn {\n\t\t\tvalueStartDelimiter: isPair ? parts[0] : valueDelimiter,\n\t\t\tvalueEndDelimiter: isPair ? parts[1] : valueDelimiter,\n\t\t}\n\t})\n\tconst singleCharValueDelimiters = valueDelimiterPairs\n\t\t.map((pair) => pair.valueStartDelimiter)\n\t\t.filter((delimiter) => delimiter.length === 1)\n\t\t.join('')\n\n\t// Build a regular expression that contains alternatives for all value delimiters\n\tconst regExpParts = valueDelimiterPairs.map(({ valueStartDelimiter, valueEndDelimiter }) => {\n\t\tconst part = [\n\t\t\t// Whitespace or start of string\n\t\t\t`(?:\\\\s|^)`,\n\t\t\t// Optional group for key name and key/value separator\n\t\t\t[\n\t\t\t\t// Start of non-capturing optional group\n\t\t\t\t`(?:`,\n\t\t\t\t// Key name (captured)\n\t\t\t\t`([^\\\\s${escapeRegExp((singleCharValueDelimiters + syntax.keyValueSeparator).replace(/-/g, '\\\\-'))}]+)`,\n\t\t\t\t// Optional whitespace\n\t\t\t\t`\\\\s*`,\n\t\t\t\t// Key/value separator (e.g. `=`)\n\t\t\t\tescapeRegExp(syntax.keyValueSeparator),\n\t\t\t\t// Optional whitespace\n\t\t\t\t`\\\\s*`,\n\t\t\t\t// End of non-capturing optional group\n\t\t\t\t`)?`,\n\t\t\t],\n\t\t\t// Value start delimiter\n\t\t\tescapeRegExp(valueStartDelimiter),\n\t\t\t// Value string (captured, can be an empty string),\n\t\t\t// consisting of any of the following parts:\n\t\t\t// - any character that is not a backslash\n\t\t\t// - a backslash followed by any character\n\t\t\t`((?:[^\\\\\\\\]|\\\\\\\\.)*?)`,\n\t\t\t// Value end delimiter that is not escaped by a preceding `\\`\n\t\t\t`${escapeRegExp(valueEndDelimiter)}`,\n\t\t\t// Whitespace or end of string\n\t\t\t`(?=\\\\s|$)`,\n\t\t]\n\t\treturn part.flat().join('')\n\t})\n\tconst regExp = new RegExp(regExpParts.join('|'), 'g')\n\n\t// Now use the regular expression to find all matches\n\tconst matches = [...input.matchAll(regExp)]\n\n\treturn matches.map((match) => {\n\t\tconst [fullMatch, ...keyValuePairs] = match\n\n\t\t// Determine which value delimiter pair was used for this match\n\t\t// by looking for the first defined value in the capture group array\n\t\t// (matches can have no key, so the found capture group can either be a key or a value,\n\t\t// but as they come in pairs, a division by 2 will give us the delimiter pair index)\n\t\tconst firstCaptureGroupIndex = keyValuePairs.findIndex((value) => value !== undefined)\n\t\tconst delimiterPairIdx = Math.floor(firstCaptureGroupIndex / 2)\n\t\tconst { valueStartDelimiter, valueEndDelimiter } = valueDelimiterPairs[delimiterPairIdx]\n\n\t\t// Also retrieve the actual matched key and value\n\t\tconst [key, escapedValue] = keyValuePairs.slice(delimiterPairIdx * 2, delimiterPairIdx * 2 + 2)\n\n\t\t// Unescape value by removing any backslash that escapes any of the following:\n\t\t// - another backslash (e.g. `\\\\` becomes `\\`)\n\t\t// - the value end delimiter (e.g. `\\\"` becomes `\"`)\n\t\t// Any other backslashes are kept because users may not know\n\t\t// that they need to be escaped in the first place.\n\t\tconst escapedBackslashOrValueEndDelimiter = new RegExp(`\\\\\\\\(\\\\\\\\|${escapeRegExp(valueEndDelimiter)})`, 'g')\n\t\tconst value = escapedValue.replace(escapedBackslashOrValueEndDelimiter, '$1')\n\n\t\treturn {\n\t\t\tindex: match.index ?? 0,\n\t\t\tfullMatch,\n\t\t\tkey,\n\t\t\tvalue,\n\t\t\tvalueStartDelimiter,\n\t\t\tvalueEndDelimiter,\n\t\t}\n\t})\n}\n\ntype DelimitedValuesSyntax = {\n\t/**\n\t * An array defining all strings allowed as value delimiters, which indicate\n\t * the start & end of a value inside the processed string.\n\t *\n\t * By default, the same delimiter must be used to start and end a value,\n\t * so `['\"', \"'\"]` would detect values delimited with `\"double\"` and `'single'`,\n\t * but not `\"mixed'` quotes.\n\t *\n\t * If you want to use a different delimiter to end a value,\n\t * specify the start and end delimiter pair separated by three dots.\n\t * For example, `['{...}']` would detect values delimited `{like this}`.\n\t */\n\tvalueDelimiters: string[]\n\tkeyValueSeparator: string\n}\n\ntype DelimitedValuesMatch = {\n\tindex: number\n\tfullMatch: string\n\tkey: string\n\tvalue: string\n\tvalueStartDelimiter: string\n\tvalueEndDelimiter: string\n}\n","export interface ExpressiveCodeLoggerOptions {\n\tlabel: string\n\tdebug(message: string): void\n\tinfo(message: string): void\n\twarn(message: string): void\n\terror(message: string): void\n}\n\nexport class ExpressiveCodeLogger implements ExpressiveCodeLoggerOptions {\n\treadonly label: string\n\treadonly logger: Partial<ExpressiveCodeLoggerOptions>\n\n\tconstructor(logger: Partial<ExpressiveCodeLoggerOptions> = {}) {\n\t\tthis.label = logger.label ?? 'expressive-code'\n\t\tthis.logger = logger\n\t}\n\n\tdebug(message: string) {\n\t\tif (this.logger.debug) {\n\t\t\tthis.logger.debug(message)\n\t\t} else {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.debug(`[${this.label}] ${message}`)\n\t\t}\n\t}\n\tinfo(message: string): void {\n\t\tif (this.logger.info) {\n\t\t\tthis.logger.info(message)\n\t\t} else {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.info(`[${this.label}] ${message}`)\n\t\t}\n\t}\n\twarn(message: string): void {\n\t\tif (this.logger.warn) {\n\t\t\tthis.logger.warn(message)\n\t\t} else {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.warn(`[${this.label}] ${message}`)\n\t\t}\n\t}\n\terror(message: string): void {\n\t\tif (this.logger.error) {\n\t\t\tthis.logger.error(message)\n\t\t} else {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(`[${this.label}] ${message}`)\n\t\t}\n\t}\n}\n\n/**\n * Outputs the given error to the logger, including its stack trace.\n * Also outputs all nested errors if specified in the `cause` property.\n */\nexport function logErrorDetails(input: { logger: ExpressiveCodeLogger; prefix: string; error: unknown }) {\n\tconst pad = (lines: string[]) => lines.map((line) => `    ${line}`)\n\tconst getErrorDetails = (error: Error): string[] => {\n\t\tconst lines: string[] = []\n\t\tconst errMsgLines = error.message.split(/\\r?\\n/)\n\t\tlines.push(`${error.name}: ${errMsgLines[0]}`, ...errMsgLines.slice(1))\n\t\tif (error.stack) {\n\t\t\tlines.push(...error.stack.split(/\\r?\\n/).slice(errMsgLines.length))\n\t\t}\n\t\tif (error.cause instanceof Error) {\n\t\t\tlines.push('Caused by:')\n\t\t\tlines.push(...pad(getErrorDetails(error.cause)))\n\t\t}\n\t\treturn lines\n\t}\n\tconst error = input.error instanceof Error ? input.error : new Error(String(input.error))\n\tconst details = pad(getErrorDetails(error)).join('\\n')\n\tinput.logger.error(`${input.prefix} Error details:\\n${details}\\n`)\n}\n","import type { Element } from '../hast'\nimport { PluginStyles } from '../internal/css'\nimport { GroupContents, RenderedGroupContents } from '../internal/render-group'\nimport { ExpressiveCodeBlock } from './block'\nimport { ExpressiveCodeLine } from './line'\nimport { ExpressiveCodePlugin, ResolverContext } from './plugin'\nimport { ResolvedExpressiveCodeEngineConfig } from './engine'\nimport { GutterElement } from './gutter'\nimport { logErrorDetails } from './logger'\n\nexport interface ExpressiveCodeHookContextBase extends ResolverContext {\n\tcodeBlock: ExpressiveCodeBlock\n\tgroupContents: GroupContents\n\tlocale: string\n\t/**\n\t * The Expressive Code engine configuration, with all optional properties\n\t * resolved to their default values.\n\t */\n\tconfig: ResolvedExpressiveCodeEngineConfig\n}\n\nexport interface ExpressiveCodeHookContext extends ExpressiveCodeHookContextBase {\n\t/**\n\t * Adds CSS styles to the document that contains the rendered code.\n\t *\n\t * All styles are scoped to Expressive Code by default, so they will not affect\n\t * the rest of the page. SASS-like nesting is supported. If you want to add global styles,\n\t * you can use the `@at-root` rule or target `:root`, `html` or `body` in your selectors.\n\t *\n\t * The engine's `render` function returns all added styles in a string array along with\n\t * the rendered group and block ASTs. The calling code must take care of actually adding\n\t * these styles to the page. For example, it could insert them into a `<style>` element\n\t * before the rendered code block.\n\t *\n\t * **Note for integration authors:** If you are rendering multiple code block groups on the\n\t * same HTML page, you should deduplicate the returned styles at the page level.\n\t * Expressive Code deduplicates styles added to the same group before returning them,\n\t * but is not aware which styles are already present on the page.\n\t *\n\t * **Note for plugin authors:** If you are adding the same styles to every block,\n\t * consider using the `baseStyles` property of the plugin instead. This allows integrations\n\t * to optionally extract these styles into a separate CSS file.\n\t */\n\taddStyles: (css: string) => void\n\t/**\n\t * Registers a gutter element for the current code block.\n\t *\n\t * The engine calls the {@link GutterElement.renderLine `renderLine`} function\n\t * of the gutter elements registered by all plugins for every line of the code block.\n\t * The returned elements are then added as children to the line's gutter container.\n\t */\n\taddGutterElement: (element: GutterElement) => void\n}\n\n/**\n * A context object that the engine passes to the `postprocessRenderedLine` hook function.\n *\n * In addition to the properties made available by {@link ExpressiveCodeHookContext},\n * it provides access to information about the line currently being rendered,\n * and allows modifying the rendered output.\n */\nexport interface PostprocessRenderedLineContext extends Omit<ExpressiveCodeHookContext, 'addGutterElement'> {\n\t/**\n\t * A reference to the line that is currently being rendered. It is read-only at this point,\n\t * but you can access all line properties, including its source code and annotations.\n\t */\n\tline: ExpressiveCodeLine\n\t/**\n\t * The 0-based index of the line inside the code block.\n\t */\n\tlineIndex: number\n\t/**\n\t * Allows modifying the line's rendered output. The `lineAst` property of this object contains\n\t * the [Hypertext Abstract Syntax Tree (HAST)](https://github.com/syntax-tree/hast) node\n\t * representing the rendered line.\n\t *\n\t * You have full control over the `lineAst` property to modify the rendered output.\n\t * For example, you could add a class name to the line's root element, or you could wrap\n\t * the entire line in a custom element.\n\t *\n\t * There is a wide range of existing utility packages that you can use to manipulate\n\t * HAST elements. For more information, see the\n\t * [list of utilities](https://github.com/syntax-tree/hast#list-of-utilities) in the\n\t * HAST documentation.\n\t */\n\trenderData: {\n\t\tlineAst: Element\n\t}\n\t/**\n\t * Allows rendering an empty line that is not part of the original code.\n\t *\n\t * Some plugins may need to render lines that are not part of the original code, e.g. to display\n\t * the expected output of a call right inside the code block. To align such lines with the\n\t * original code, plugins can request an empty line from the engine using this function.\n\t */\n\trenderEmptyLine: RenderEmptyLineFn\n}\n\n/**\n * A context object that the engine passes to the `postprocessRenderedBlock` hook function.\n *\n * In addition to the properties made available by {@link ExpressiveCodeHookContext},\n * it provides access to render data of the code block currently being rendered,\n * and allows modifying the rendered output.\n */\nexport interface PostprocessRenderedBlockContext extends Omit<ExpressiveCodeHookContext, 'addGutterElement'> {\n\t/**\n\t * Allows modifying the block's rendered output. The `blockAst` property of this object contains\n\t * the [Hypertext Abstract Syntax Tree (HAST)](https://github.com/syntax-tree/hast) node\n\t * representing the rendered block.\n\t *\n\t * You have full control over the `blockAst` property to modify the rendered output.\n\t * For example, you could add a class name to the block's root element,\n\t * wrap the entire block in a custom element, or traverse its children\n\t * to find specific elements and modify them.\n\t *\n\t * There is a wide range of existing utility packages that you can use to manipulate\n\t * HAST elements. For more information, see the\n\t * [list of utilities](https://github.com/syntax-tree/hast#list-of-utilities) in the\n\t * HAST documentation.\n\t */\n\trenderData: {\n\t\tblockAst: Element\n\t}\n\t/**\n\t * Allows rendering an empty line that is not part of the original code.\n\t *\n\t * Some plugins may need to render lines that are not part of the original code, e.g. to display\n\t * the expected output of a call right inside the code block. To align such lines with the\n\t * original code, plugins can request an empty line from the engine using this function.\n\t */\n\trenderEmptyLine: RenderEmptyLineFn\n}\n\nexport type RenderEmptyLineFn = () => { lineAst: Element; gutterWrapper: Element | undefined; codeWrapper: Element }\n\n/**\n * A context object that the engine passes to the `postprocessRenderedBlockGroup` hook function.\n *\n * It provides access to information about the code block group currently being rendered,\n * and allows modifying the rendered output.\n */\nexport interface PostprocessRenderedBlockGroupContext {\n\t/**\n\t * An array of objects, each containing a reference to the code block,\n\t * and its rendered HAST output. This is the same HAST element per block that is also available\n\t * in the `renderData` property of the `postprocessRenderedBlock` hook context.\n\t */\n\trenderedGroupContents: RenderedGroupContents\n\t/**\n\t * A list of styles that plugins added to the current code block group using the `addStyles`\n\t * hook context function. Each item contains the plugin name and the styles it added.\n\t * You have full control over the styles at this point and can add, modify or remove them\n\t * as needed.\n\t */\n\tpluginStyles: PluginStyles[]\n\t/**\n\t * See {@link ExpressiveCodeHookContext.addStyles}.\n\t */\n\taddStyles: (css: string) => void\n\t/**\n\t * Allows modifying the rendered output of a group of code blocks. The `groupAst` property of this object contains\n\t * the [Hypertext Abstract Syntax Tree (HAST)](https://github.com/syntax-tree/hast) parent node\n\t * surrounding all rendered blocks.\n\t *\n\t * This is the only property that allows you to modify the wrapper element of the entire group.\n\t * You have full control over it to modify the rendered output.\n\t * For example, you could add a class name to the group’s root element,\n\t * or you could wrap the entire group in a custom element.\n\t */\n\trenderData: {\n\t\tgroupAst: Element\n\t}\n}\n\n/**\n * The base type of all hooks. It is a function that gets called by the engine\n * and receives a context object. The context type defaults to {@link ExpressiveCodeHookContext},\n * but can vary by hook, so see the list of available hooks for the correct type.\n */\nexport type ExpressiveCodeHook<ContextType = ExpressiveCodeHookContext> = (context: ContextType) => void | Promise<void>\n\n/** @internal */\nexport interface ExpressiveCodePluginHooks_BeforeRendering {\n\t/**\n\t * Allows preprocessing the code block's {@link ExpressiveCodeBlock.language language}\n\t * identifier before loading language-specific defaults into\n\t * {@link ExpressiveCodeBlock.props props}.\n\t *\n\t * The Text Markers plugin uses this hook to override the `diff` language identifier\n\t * with the language specified in the `lang` meta option (if given) to allow using diff syntax\n\t * to mark inserted and deleted lines while using another language for syntax highlighting.\n\t */\n\tpreprocessLanguage?: ExpressiveCodeHook | undefined\n\n\t/**\n\t * Allows preprocessing the meta string and the props before any plugins can\n\t * modify the code.\n\t *\n\t * Instead of accessing the raw meta string, plugins are recommended to use the parsed version\n\t * of the contained options through the {@link ExpressiveCodeBlock.metaOptions} property.\n\t *\n\t * As the code still matches the plaintext in the containing Markdown/MDX document at this\n\t * point, this hook can be used to apply annotations by line numbers.\n\t */\n\tpreprocessMetadata?: ExpressiveCodeHook | undefined\n\n\t/**\n\t * Allows preprocessing the code before any language-specific hooks are run.\n\t *\n\t * Plugins are expected to use this hook to remove any of their syntax that could disturb\n\t * annotation plugins like syntax highlighters. Removed information can either be stored\n\t * internally or used to create annotations.\n\t *\n\t * Plugins can also use this hook to insert new code, e.g. to add type information for\n\t * syntax highlighters, or to provide functionality to include external files into the\n\t * code block.\n\t */\n\tpreprocessCode?: ExpressiveCodeHook | undefined\n\n\t/**\n\t * Allows analyzing the preprocessed code and collecting language-specific syntax annotations.\n\t *\n\t * This hook is used by syntax highlighting plugins to run the code through `Shiki` or\n\t * `Shiki-Twoslash` and to create annotations from their highlighted tokens.\n\t *\n\t * These annotations are then available to the following hooks and will be used during\n\t * rendering.\n\t */\n\tperformSyntaxAnalysis?: ExpressiveCodeHook | undefined\n\n\t/**\n\t * Allows postprocessing the code plaintext after collecting syntax annotations.\n\t *\n\t * Plugins are expected to use this hook to remove any parts from the code\n\t * that should not be contained in the output. For example, if a plugin added declarations\n\t * or type information during the `preprocessCode` hook to provide information to the\n\t * syntax highlighter, the declarations could now be removed again.\n\t *\n\t * After this hook has finished processing, the plaintext of all code lines becomes read-only.\n\t */\n\tpostprocessAnalyzedCode?: ExpressiveCodeHook | undefined\n\n\t/**\n\t * Allows annotating the final code plaintext.\n\t *\n\t * As the code is read-only at this point, plugins can use this hook to create annotations\n\t * on lines or inline ranges matching a specific search term.\n\t */\n\tannotateCode?: ExpressiveCodeHook | undefined\n\n\t/**\n\t * Allows applying final changes to annotations before rendering.\n\t *\n\t * After this hook has finished processing, all annotations become read-only.\n\t */\n\tpostprocessAnnotations?: ExpressiveCodeHook | undefined\n}\n\n/** @internal */\nexport interface ExpressiveCodePluginHooks_Rendering {\n\t/**\n\t * Allows editing the AST of a single line of code after all annotations were rendered.\n\t */\n\tpostprocessRenderedLine?: ExpressiveCodeHook<PostprocessRenderedLineContext> | undefined\n\n\t/**\n\t * Allows editing the AST of the entire code block after all annotations were rendered\n\t * and all lines were postprocessed.\n\t */\n\tpostprocessRenderedBlock?: ExpressiveCodeHook<PostprocessRenderedBlockContext> | undefined\n\n\t/**\n\t * Allows editing the ASTs of all code blocks that were rendered as part of the same group,\n\t * as well as the AST of the group root element that contains all group blocks.\n\t *\n\t * Groups are defined by the calling code. For example, a rehype plugin using Expressive Code\n\t * to render code blocks could provide authors with a way to group related code blocks together.\n\t *\n\t * This hook is used by the frames plugin to display multiple code blocks as editor file tabs.\n\t *\n\t * Note: Even if a code block is not part of any group, this hook will still be called.\n\t * Standalone code blocks are treated like a group containing only a single block.\n\t */\n\tpostprocessRenderedBlockGroup?: ExpressiveCodeHook<PostprocessRenderedBlockGroupContext> | undefined\n}\n\nexport interface ExpressiveCodePluginHooks extends ExpressiveCodePluginHooks_BeforeRendering, ExpressiveCodePluginHooks_Rendering {}\n\nexport type ExpressiveCodePluginHookName = keyof ExpressiveCodePluginHooks\n\n/**\n * Runs the given `runner` function for every hook that was registered by plugins\n * for the given hook type.\n *\n * The runner function is called with an object containing the hook name, the hook function\n * registered by the plugin, and the plugin that registered it.\n *\n * Errors occuring in the runner function are caught and rethrown with information about the\n * plugin and hook that caused the error.\n */\nexport async function runHooks<HookType extends keyof ExpressiveCodePluginHooks>(\n\tkey: HookType,\n\tcontext: {\n\t\tplugins: readonly ExpressiveCodePlugin[]\n\t\tconfig: ResolvedExpressiveCodeEngineConfig\n\t},\n\trunner: (hook: { hookName: HookType; hookFn: NonNullable<ExpressiveCodePluginHooks[HookType]>; plugin: ExpressiveCodePlugin }) => void | Promise<void>\n) {\n\tconst { plugins, config } = context\n\tfor (const plugin of plugins) {\n\t\tconst hookFn = plugin.hooks?.[key]\n\t\tif (!hookFn) continue\n\n\t\ttry {\n\t\t\tawait runner({ hookName: key, hookFn, plugin })\n\t\t} catch (error) {\n\t\t\t/* c8 ignore next */\n\t\t\tconst msg = error instanceof Error ? error.message : (error as string)\n\t\t\tconst prefix = `Plugin \"${plugin.name}\" caused an error in its \"${key}\" hook.`\n\t\t\tlogErrorDetails({ logger: config.logger, prefix, error })\n\t\t\tthrow new Error(`${prefix} Error message: ${msg}`, { cause: error })\n\t\t}\n\t}\n}\n","import { CoreStyleSettings } from '../internal/core-styles'\nimport { ExpressiveCodeTheme } from './theme'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface StyleSettings extends CoreStyleSettings {}\n\n/**\n * The value of a single style setting. You can either set it to a string,\n * or an array of two strings.\n *\n * If you use the array form, the first value will be used for dark themes,\n * and the second value for light themes.\n */\nexport type StyleValueOrValues = string | [dark: string, light: string]\n\n/**\n * A function that resolves a single style setting to a {@link StyleValueOrValues}.\n *\n * You can assign this to any style setting to dynamically generate style values\n * based on the current theme.\n *\n * This function is called once for each style variant in the engine's `styleVariants` array,\n * which includes one entry per theme in the engine's `themes` configuration option.\n */\nexport type StyleResolverFn = (context: {\n\ttheme: ExpressiveCodeTheme\n\t/** The index in the engine's `styleVariants` array that's currently being resolved. */\n\tstyleVariantIndex: number\n\tresolveSetting: (settingPath: StyleSettingPath) => string\n}) => StyleValueOrValues\n\n/**\n * This is the value type for all style overrides.\n * It allows either static style values or a resolver function.\n */\nexport type UnresolvedStyleValue = StyleValueOrValues | StyleResolverFn\n\nexport type UnresolvedPluginStyleSettings<T> = {\n\t[SettingName in keyof T]: UnresolvedStyleValue\n}\n\ntype Keys<T> = Exclude<keyof T, symbol>\ntype FlattenKeys<T> = { [K in Keys<T>]: T[K] extends object ? `${K}.${Keys<T[K]>}` : K }[Keys<T>]\n\nexport type StyleSettingPath = FlattenKeys<StyleSettings>\n\nexport type UnresolvedStyleSettings = {\n\t[K in keyof StyleSettings]: StyleSettings[K] extends object ? UnresolvedPluginStyleSettings<StyleSettings[K]> : UnresolvedStyleValue\n}\n\nexport type StyleOverrides = Partial<{\n\t[K in keyof StyleSettings]: StyleSettings[K] extends object ? Partial<UnresolvedPluginStyleSettings<StyleSettings[K]>> : UnresolvedStyleValue\n}>\n\nexport type ResolvedStyleSettingsByPath = Map<StyleSettingPath, string>\n\n/**\n * A map of long terms commonly found in style setting paths to shorter alternatives that are\n * still human-readable. These replacements are automatically applied by {@link getCssVarName}\n * when generating CSS variable names to keep them fairly short.\n *\n * Plugins can add their own replacements to this map by importing this constant and calling\n * `cssVarReplacements.set('myLongTerm', 'myLt')` inside their plugin initialization function.\n */\nexport const cssVarReplacements = new Map<string, string>([\n\t['background', 'bg'],\n\t['foreground', 'fg'],\n\t['color', 'col'],\n\t['border', 'brd'],\n\t['padding', 'pad'],\n\t['margin', 'marg'],\n\t['radius', 'rad'],\n\t['opacity', 'opa'],\n\t['width', 'wd'],\n\t['height', 'ht'],\n\t['weight', 'wg'],\n\t['block', 'blk'],\n\t['inline', 'inl'],\n\t['bottom', 'btm'],\n\t['value', 'val'],\n\t['active', 'act'],\n\t['inactive', 'inact'],\n\t['highlight', 'hl'],\n\t['selection', 'sel'],\n\t['indicator', 'ind'],\n\t['shadow', 'shd'],\n\t['family', 'fml'],\n\t['transform', 'trf'],\n\t['decoration', 'dec'],\n\t['button', 'btn'],\n\t['editor', 'ed'],\n\t['terminal', 'trm'],\n\t['scrollbar', 'sb'],\n\t['toolbar', 'tb'],\n\t['gutter', 'gtr'],\n\t['titlebar', 'ttb'],\n\t['textMarkers', 'tm'],\n\t['frames', 'frm'],\n])\n\n/**\n * Generates a CSS variable name for a given style setting path.\n *\n * Performs the following transformations on the path:\n * - To avoid name collisions, the name is prefixed with `--ec-`.\n * - All dots in the path are replaced with dashes.\n * - Various common terms are replaced with shorter alternatives to reduce CSS size\n *   (see {@link cssVarReplacements}).\n */\nexport function getCssVarName(styleSetting: StyleSettingPath) {\n\tlet varName = styleSetting.replace(/\\./g, '-')\n\tconst capitalize = (word: string) => word[0].toUpperCase() + word.slice(1)\n\tcssVarReplacements.forEach((replacement, term) => {\n\t\tconst termRegExp = new RegExp(\n\t\t\t[\n\t\t\t\t// The lowercase term,\n\t\t\t\t// preceded by a non-lowercase character or the beginning of the string,\n\t\t\t\t// and followed by a non-lowercase character or the end of the string\n\t\t\t\t`(?<=[^a-z]|^)${term}(?=[^a-z]|$)`,\n\t\t\t\t// The capitalized term,\n\t\t\t\t// preceded by a lowercase character or the beginning of the string,\n\t\t\t\t// and followed by a non-lowercase character or the end of the string\n\t\t\t\t`(?<=[a-z]|^)${capitalize(term)}(?=[^a-z]|$)`,\n\t\t\t].join('|'),\n\t\t\t'g'\n\t\t)\n\t\tvarName = varName.replace(termRegExp, (match) => (match === term ? replacement : capitalize(replacement)))\n\t})\n\treturn `--ec-${varName}`\n}\n\nexport const codeLineClass = 'ec-line'\n","import { Node } from '../hast'\n\nexport function isNumber(input: number) {\n\treturn typeof input === 'number' && !isNaN(input)\n}\n\nexport function isString(input: string) {\n\treturn typeof input === 'string'\n}\n\nexport function isBoolean(input: boolean) {\n\treturn typeof input === 'boolean'\n}\n\nexport function isFunction<Type>(input: Type) {\n\treturn typeof input === 'function'\n}\n\nfunction isHastNode(node: { type: string }) {\n\treturn node?.type ? typeof node.type === 'string' : false\n}\n\nexport function isHastElement(node: Node) {\n\treturn isHastNode(node) && node.type === 'element'\n}\n\nexport function newTypeError(expectedTypeDescription: string, actualValue: unknown, fieldName?: string) {\n\treturn new Error(`${fieldName ? `Invalid ${fieldName} value: ` : ''}Expected a valid ${expectedTypeDescription}, but got ${JSON.stringify(actualValue)}`)\n}\n","import type { Element, Parents } from '../hast'\nimport { h } from '../hast'\nimport { ExpressiveCodeLine } from '../common/line'\nimport { AnnotationRenderPhase, AnnotationRenderPhaseOrder, ExpressiveCodeAnnotation } from '../common/annotation'\nimport { codeLineClass } from '../common/style-settings'\nimport { ExpressiveCodeHookContextBase, RenderEmptyLineFn } from '../common/plugin-hooks'\nimport { GutterElement } from '../common/gutter'\nimport { isHastElement, newTypeError } from './type-checks'\n\nexport function splitLineAtAnnotationBoundaries(line: ExpressiveCodeLine) {\n\tconst textParts: string[] = []\n\tconst partIndicesByAnnotation = new Map<ExpressiveCodeAnnotation, number[]>()\n\tconst fullText = line.text\n\tconst annotations = line.getAnnotations()\n\n\t// Create an array of unique boundaries\n\tconst annotationBoundaries = [\n\t\t...new Set(\n\t\t\tannotations.flatMap(({ inlineRange }) => {\n\t\t\t\tif (!inlineRange) return []\n\t\t\t\treturn [inlineRange.columnStart, inlineRange.columnEnd]\n\t\t\t})\n\t\t),\n\t].sort((a, b) => a - b)\n\n\t// Use the array of boundaries to split the line plaintext into parts\n\tlet lastColumn = 0\n\tannotationBoundaries.forEach((column) => {\n\t\tif (column === lastColumn) return\n\t\ttextParts.push(fullText.slice(lastColumn, column))\n\t\tlastColumn = column\n\t})\n\tif (lastColumn < fullText.length) textParts.push(fullText.slice(lastColumn))\n\n\t// Build a list of part indices contained within each annotation\n\tannotations.forEach((annotation) => {\n\t\tif (!annotation.inlineRange) return\n\t\tconst { columnStart, columnEnd } = annotation.inlineRange\n\t\tconst partIndices: number[] = []\n\t\tlet partStart = 0\n\t\ttextParts.forEach((part, partIndex) => {\n\t\t\tconst partEnd = partStart + part.length\n\t\t\t// If the part is completely contained within the current annotation's column range,\n\t\t\t// add its part index to the list of part indices for the annotation\n\t\t\tif (partStart >= columnStart && partEnd <= columnEnd) {\n\t\t\t\tpartIndices.push(partIndex)\n\t\t\t}\n\t\t\tpartStart = partEnd\n\t\t})\n\t\tpartIndicesByAnnotation.set(annotation, partIndices)\n\t})\n\n\treturn {\n\t\ttextParts,\n\t\tpartIndicesByAnnotation,\n\t}\n}\n\nexport function renderLineToAst({\n\tline,\n\tlineIndex,\n\tgutterElements,\n\t...restContext\n}: ExpressiveCodeHookContextBase & { line: ExpressiveCodeLine; lineIndex: number; gutterElements: PluginGutterElement[] }) {\n\t// Flatten intersecting annotations by splitting the line text into non-intersecting parts\n\t// and mapping annotations to the contained parts\n\tconst { textParts, partIndicesByAnnotation } = splitLineAtAnnotationBoundaries(line)\n\n\t// Map the resulting parts to AST nodes\n\tconst partNodes: Parents[] = textParts.map((textPart) => h(null, [textPart]))\n\n\t// Sort all annotations based on their render phase\n\tconst annotations = [...line.getAnnotations()].sort(renderPhaseSortFn)\n\n\t// Render inline annotations\n\tannotations.forEach((annotation, annotationIndex) => {\n\t\tif (!annotation.inlineRange) return\n\n\t\t// Get the part nodes that are contained within the current annotation\n\t\tconst partIndices = partIndicesByAnnotation.get(annotation)\n\t\t/* c8 ignore next */\n\t\tif (!partIndices) throw new Error(`Failed to find inline annotation in part indices: ${JSON.stringify(annotation)}`)\n\n\t\t// Check if the part nodes can be merged into a single node\n\t\tif (partIndices.length > 1) {\n\t\t\t// Check if there are later annotations that include some,\n\t\t\t// but not all parts of this annotation\n\t\t\tconst isPartiallyContainedInLaterAnnotations = annotations.slice(annotationIndex + 1).some((laterAnnotation) => {\n\t\t\t\tif (!laterAnnotation.inlineRange) return false\n\t\t\t\tconst laterPartIndices = partIndicesByAnnotation.get(laterAnnotation)\n\t\t\t\t/* c8 ignore next */\n\t\t\t\tif (!laterPartIndices) return false\n\t\t\t\tconst intersectingParts = laterPartIndices.filter((partIndex) => partIndices.includes(partIndex))\n\t\t\t\tconst isPartiallyContained = intersectingParts.length > 0 && intersectingParts.length < partIndices.length\n\n\t\t\t\treturn isPartiallyContained\n\t\t\t})\n\t\t\t// If this annotation is not only partially contained in later annotations,\n\t\t\t// we can now merge all of its parts into a single node\n\t\t\tif (!isPartiallyContainedInLaterAnnotations) {\n\t\t\t\t// Merge the affected nodes in partNodes\n\t\t\t\tconst mergedNode = h(\n\t\t\t\t\tnull,\n\t\t\t\t\tpartIndices.map((partIndex) => partNodes[partIndex])\n\t\t\t\t)\n\t\t\t\tpartNodes.splice(partIndices[0], partIndices.length, mergedNode)\n\n\t\t\t\t// Replace the indices of the affected parts with the index of the first part\n\t\t\t\t// and reduce the indices of all following parts accordingly\n\t\t\t\tconst indicesToRemove = partIndices.length - 1\n\t\t\t\tconst firstPartIndex = partIndices[0]\n\t\t\t\tconst lastPartIndex = partIndices[partIndices.length - 1]\n\t\t\t\tpartIndicesByAnnotation.forEach((partIndicesToCheck) => {\n\t\t\t\t\tlet anyChanges = false\n\t\t\t\t\tconst updatedIndices = partIndicesToCheck\n\t\t\t\t\t\t.map((partIndex) => {\n\t\t\t\t\t\t\tif (partIndex <= firstPartIndex) return partIndex\n\t\t\t\t\t\t\tanyChanges = true\n\t\t\t\t\t\t\tif (partIndex > lastPartIndex) return partIndex - indicesToRemove\n\t\t\t\t\t\t\treturn NaN\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter((partIndex) => !isNaN(partIndex))\n\t\t\t\t\tif (anyChanges) {\n\t\t\t\t\t\t// Replace contents of partIndicesToCheck with our new updated indices\n\t\t\t\t\t\t// (as this array is coming from partIndicesByAnnotation and\n\t\t\t\t\t\t// we are modifying it in place, this will also update partIndices\n\t\t\t\t\t\t// if we're updating the part indices for the current annotation)\n\t\t\t\t\t\tpartIndicesToCheck.splice(0, partIndicesToCheck.length, ...updatedIndices)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Pass all part nodes to the annotation's render function\n\t\tconst renderInput = partIndices.map((partIndex) => partNodes[partIndex])\n\t\tconst renderOutput = annotation.render({ nodesToTransform: [...renderInput], line, lineIndex, ...restContext })\n\t\tvalidateAnnotationRenderOutput(renderOutput, renderInput.length)\n\t\tpartIndices.forEach((partIndex, index) => {\n\t\t\tpartNodes[partIndex] = renderOutput[index]\n\t\t})\n\t})\n\n\t// Sort gutter elements by their render phase and render them\n\tconst sortedGutterElements = [...gutterElements].sort((a, b) => renderPhaseSortFn(a.gutterElement, b.gutterElement))\n\tconst renderedGutterElements = sortedGutterElements.map(({ pluginName, gutterElement }) => {\n\t\ttry {\n\t\t\tconst node = gutterElement.renderLine({ ...restContext, line, lineIndex })\n\t\t\tif (!isHastElement(node)) throw new Error(`renderLine function did not return a valid HAST Element node: ${JSON.stringify(node)}`)\n\t\t\treturn node\n\t\t} catch (error) {\n\t\t\t/* c8 ignore next */\n\t\t\tconst msg = error instanceof Error ? error.message : (error as string)\n\t\t\tthrow new Error(`Plugin \"${pluginName}\" failed to render a gutter element. Error message: ${msg}`, { cause: error })\n\t\t}\n\t})\n\n\t// Create a line node for all rendered parts\n\tlet lineNode = h(`div.${codeLineClass}`)\n\n\t// If we have any gutter elements, wrap a gutter container around the elements\n\t// and add it to the line's nodes\n\tif (renderedGutterElements.length) {\n\t\tlineNode.children.push(h('div.gutter', renderedGutterElements))\n\t}\n\n\t// Now also wrap the code in a container and add it to the line's nodes\n\t// (in case the line is empty, insert a line break to ensure it still gets rendered)\n\tlineNode.children.push(h('div.code', partNodes.length > 0 ? partNodes : h(null, '\\n')))\n\n\t// Render line-level annotations\n\tannotations.forEach((annotation) => {\n\t\tif (annotation.inlineRange) return\n\t\tconst renderOutput = annotation.render({ nodesToTransform: [lineNode], line, lineIndex, ...restContext })\n\t\tvalidateAnnotationRenderOutput(renderOutput, 1)\n\t\tlineNode = renderOutput[0] as Element\n\t\tif (!isHastElement(lineNode)) {\n\t\t\tthrow newTypeError('hast Element', lineNode, 'line-level annotation render output')\n\t\t}\n\t})\n\n\treturn lineNode\n}\n\nexport function getRenderEmptyLineFn(context: ExpressiveCodeHookContextBase & { gutterElements: PluginGutterElement[] }): RenderEmptyLineFn {\n\treturn () => {\n\t\tconst { gutterElements } = context\n\n\t\t// Sort gutter elements by their render phase and render placeholders for them\n\t\tconst sortedGutterElements = [...gutterElements].sort((a, b) => renderPhaseSortFn(a.gutterElement, b.gutterElement))\n\t\tconst renderedGutterElements = sortedGutterElements.map(({ pluginName, gutterElement }) => {\n\t\t\ttry {\n\t\t\t\tconst node = gutterElement.renderPlaceholder()\n\t\t\t\tif (!isHastElement(node)) throw new Error(`renderPlaceholder function did not return a valid HAST Element node: ${JSON.stringify(node)}`)\n\t\t\t\treturn node\n\t\t\t} catch (error) {\n\t\t\t\t/* c8 ignore next */\n\t\t\t\tconst msg = error instanceof Error ? error.message : (error as string)\n\t\t\t\tthrow new Error(`Plugin \"${pluginName}\" failed to render a gutter element placeholder. Error message: ${msg}`, { cause: error })\n\t\t\t}\n\t\t})\n\n\t\t// Create a line node for all rendered parts\n\t\tconst lineAst = h(`div.${codeLineClass}`)\n\n\t\t// If we have any gutter elements, wrap a gutter container around the elements\n\t\t// and add it to the line's nodes\n\t\tconst gutterWrapper = renderedGutterElements.length ? h('div.gutter', renderedGutterElements) : undefined\n\t\tif (gutterWrapper) lineAst.children.push(gutterWrapper)\n\n\t\t// Now also wrap the code in a container and add it to the line's nodes\n\t\tconst codeWrapper = h('div.code')\n\t\tlineAst.children.push(codeWrapper)\n\n\t\treturn {\n\t\t\tlineAst,\n\t\t\tgutterWrapper,\n\t\t\tcodeWrapper,\n\t\t}\n\t}\n}\n\nfunction renderPhaseSortFn(a: { renderPhase?: AnnotationRenderPhase | undefined }, b: { renderPhase?: AnnotationRenderPhase | undefined }) {\n\tconst indexA = AnnotationRenderPhaseOrder.indexOf(a.renderPhase || 'normal')\n\tconst indexB = AnnotationRenderPhaseOrder.indexOf(b.renderPhase || 'normal')\n\treturn indexA - indexB\n}\n\nfunction validateAnnotationRenderOutput(nodes: Parents[], expectedLength: number) {\n\tif (!Array.isArray(nodes) || nodes.length !== expectedLength)\n\t\tthrow new Error(`Expected annotation render function to return an array of ${expectedLength} node(s), but got ${JSON.stringify(nodes)}.`)\n\tnodes.forEach((node, nodeIndex) => {\n\t\tif (!node || !node.type) throw new Error(`Annotation render function returned an invalid node at index ${nodeIndex}: ${JSON.stringify(node)}`)\n\t})\n}\n\nexport type PluginGutterElement = { pluginName: string; gutterElement: GutterElement }\n","import type { Element } from '../hast'\nimport { addClassName, setInlineStyle, h } from '../hast'\nimport { ExpressiveCodePlugin } from '../common/plugin'\nimport { ExpressiveCodeHookContext, ExpressiveCodeHookContextBase, ExpressiveCodePluginHooks_BeforeRendering, runHooks } from '../common/plugin-hooks'\nimport { PluginStyles } from './css'\nimport { PluginGutterElement, getRenderEmptyLineFn, renderLineToAst } from './render-line'\nimport { isBoolean, isHastElement, newTypeError } from './type-checks'\nimport { AnnotationRenderPhaseOrder } from '../common/annotation'\nimport { ExpressiveCodeBlock } from '../common/block'\nimport { GutterElement } from '../common/gutter'\n\nexport async function renderBlock({\n\tcodeBlock,\n\tgroupContents,\n\tlocale,\n\tconfig,\n\tplugins,\n\tcssVar,\n\tcssVarName,\n\tstyleVariants,\n}: {\n\tplugins: readonly ExpressiveCodePlugin[]\n} & ExpressiveCodeHookContextBase) {\n\tconst state: ExpressiveCodeProcessingState = {\n\t\tcanEditAnnotations: true,\n\t\tcanEditCode: true,\n\t\tcanEditLanguage: true,\n\t\tcanEditMetadata: true,\n\t}\n\tcodeBlock.state = state\n\n\tconst blockStyles: PluginStyles[] = []\n\tconst gutterElements: PluginGutterElement[] = []\n\n\tconst runHooksContext = {\n\t\tplugins,\n\t\tconfig,\n\t}\n\tconst baseContext: Omit<ExpressiveCodeHookContext, 'addStyles' | 'addGutterElement'> = {\n\t\tcodeBlock,\n\t\tgroupContents,\n\t\tlocale,\n\t\tconfig,\n\t\tcssVar,\n\t\tcssVarName,\n\t\tstyleVariants,\n\t}\n\n\tconst runBeforeRenderingHooks = async (key: keyof ExpressiveCodePluginHooks_BeforeRendering) => {\n\t\tawait runHooks(key, runHooksContext, async ({ hookFn, plugin }) => {\n\t\t\tawait hookFn({\n\t\t\t\t...baseContext,\n\t\t\t\taddStyles: (styles: string) => blockStyles.push({ pluginName: plugin.name, styles }),\n\t\t\t\taddGutterElement: (gutterElement: GutterElement) => {\n\t\t\t\t\tif (!gutterElement || typeof gutterElement !== 'object') throw newTypeError('object', gutterElement, 'gutterElement')\n\t\t\t\t\tif (typeof gutterElement.renderLine !== 'function') throw newTypeError('\"function\" type', typeof gutterElement.renderLine, 'gutterElement.renderLine')\n\t\t\t\t\tif (gutterElement.renderPhase && AnnotationRenderPhaseOrder.indexOf(gutterElement.renderPhase) === -1)\n\t\t\t\t\t\tthrow newTypeError('AnnotationRenderPhase', gutterElement.renderPhase, 'gutterElement.renderPhase')\n\t\t\t\t\tgutterElements.push({ pluginName: plugin.name, gutterElement })\n\t\t\t\t},\n\t\t\t})\n\t\t})\n\t}\n\n\t// Run hooks for preprocessing metadata and code\n\tstate.canEditCode = false\n\tawait runBeforeRenderingHooks('preprocessLanguage')\n\tstate.canEditLanguage = false\n\t// Apply default props to the code block now that the language is fixed\n\tapplyDefaultProps(codeBlock, config)\n\t// Continue with the next hooks\n\tawait runBeforeRenderingHooks('preprocessMetadata')\n\tstate.canEditCode = true\n\tawait runBeforeRenderingHooks('preprocessCode')\n\n\t// Run hooks for processing & finalizing the code\n\tawait runBeforeRenderingHooks('performSyntaxAnalysis')\n\tawait runBeforeRenderingHooks('postprocessAnalyzedCode')\n\tstate.canEditCode = false\n\n\t// Run hooks for annotating the code\n\tawait runBeforeRenderingHooks('annotateCode')\n\tawait runBeforeRenderingHooks('postprocessAnnotations')\n\tstate.canEditMetadata = false\n\tstate.canEditAnnotations = false\n\n\t// Render lines to AST and run rendering hooks\n\tconst lines = codeBlock.getLines()\n\tconst renderedAstLines: Element[] = []\n\tconst renderEmptyLine = getRenderEmptyLineFn({ gutterElements, ...baseContext })\n\tfor (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n\t\tconst line = lines[lineIndex]\n\t\t// Render the current line to an AST and wrap it in an object that can be passed\n\t\t// through all hooks, allowing plugins to edit or completely replace the AST\n\t\tconst lineRenderData = {\n\t\t\tlineAst: renderLineToAst({ line, lineIndex, gutterElements, ...baseContext }),\n\t\t}\n\t\t// Add indent information if wrapping is enabled and preserveIndent has not been disabled\n\t\tif (codeBlock.props.wrap && codeBlock.props.preserveIndent !== false) {\n\t\t\tconst indent = line.text.match(/^\\s*/)?.[0].length ?? 0\n\t\t\tif (indent > 0) setInlineStyle(lineRenderData.lineAst, '--ecIndent', `${indent}ch`)\n\t\t}\n\t\t// Allow plugins to modify or even completely replace the AST\n\t\tawait runHooks('postprocessRenderedLine', runHooksContext, async ({ hookFn, plugin }) => {\n\t\t\tawait hookFn({\n\t\t\t\t...baseContext,\n\t\t\t\taddStyles: (styles: string) => blockStyles.push({ pluginName: plugin.name, styles }),\n\t\t\t\tline,\n\t\t\t\tlineIndex,\n\t\t\t\trenderData: lineRenderData,\n\t\t\t\trenderEmptyLine,\n\t\t\t})\n\t\t\tif (!isHastElement(lineRenderData.lineAst)) {\n\t\t\t\tthrow newTypeError('hast Element', lineRenderData.lineAst, 'lineAst')\n\t\t\t}\n\t\t})\n\t\trenderedAstLines.push(lineRenderData.lineAst)\n\t}\n\n\t// Combine rendered lines into a block AST and wrap it in an object that can be passed\n\t// through all hooks, allowing plugins to edit or completely replace the AST\n\tconst blockRenderData = {\n\t\tblockAst: buildCodeBlockAstFromRenderedLines(codeBlock, renderedAstLines),\n\t}\n\tawait runHooks('postprocessRenderedBlock', runHooksContext, async ({ hookFn, plugin }) => {\n\t\tawait hookFn({\n\t\t\t...baseContext,\n\t\t\taddStyles: (styles: string) => blockStyles.push({ pluginName: plugin.name, styles }),\n\t\t\trenderData: blockRenderData,\n\t\t\trenderEmptyLine,\n\t\t})\n\t\tif (!isHastElement(blockRenderData.blockAst)) {\n\t\t\tthrow newTypeError('hast Element', blockRenderData.blockAst, 'blockAst')\n\t\t}\n\t})\n\n\treturn {\n\t\trenderedBlockAst: blockRenderData.blockAst,\n\t\tblockStyles,\n\t}\n}\n\nfunction buildCodeBlockAstFromRenderedLines(codeBlock: ExpressiveCodeBlock, renderedLines: Element[]) {\n\tconst preProperties = { dataLanguage: codeBlock.language || 'plaintext' }\n\tconst preElement = h('pre', preProperties, h('code', renderedLines))\n\tif (codeBlock.props.wrap) {\n\t\tconst maxLineLength = codeBlock.getLines().reduce((max, line) => Math.max(max, line.text.length), 0)\n\t\taddClassName(preElement, 'wrap')\n\t\tsetInlineStyle(preElement, '--ecMaxLine', `${maxLineLength}ch`)\n\t}\n\treturn preElement\n}\n\nfunction applyDefaultProps(codeBlock: ExpressiveCodeBlock, config: ExpressiveCodeHookContextBase['config']) {\n\t// Build default props by merging the base defaults with the language-specific overrides\n\tconst { overridesByLang = {}, ...baseDefaults } = config.defaultProps\n\tconst mergedDefaults = { ...baseDefaults }\n\tObject.keys(overridesByLang).forEach((key) => {\n\t\tconst langs = key.split(',').map((lang) => lang.trim())\n\t\tif (langs.includes(codeBlock.language)) {\n\t\t\tObject.assign(mergedDefaults, overridesByLang[key])\n\t\t}\n\t})\n\t// Apply the merged defaults to the code block\n\tconst defaultKeys = Object.keys(mergedDefaults) as (keyof ExpressiveCodeBlock['props'])[]\n\tdefaultKeys.forEach((key) => {\n\t\tif (codeBlock.props[key] === undefined) codeBlock.props[key] = mergedDefaults[key]\n\t})\n}\n\nexport interface ExpressiveCodeProcessingState {\n\tcanEditCode: boolean\n\tcanEditLanguage: boolean\n\tcanEditMetadata: boolean\n\tcanEditAnnotations: boolean\n}\n\nexport function validateExpressiveCodeProcessingState(state: ExpressiveCodeProcessingState | undefined) {\n\tconst isValid =\n\t\tstate &&\n\t\t// Expect all properties to be defined and booleans\n\t\tisBoolean(state.canEditCode) &&\n\t\tisBoolean(state.canEditLanguage) &&\n\t\tisBoolean(state.canEditMetadata) &&\n\t\tisBoolean(state.canEditAnnotations)\n\tif (!isValid) throw newTypeError('ExpressiveCodeProcessingState', state)\n}\n","/**\n * Converts a relative range defined by the inputs `start` and `end`\n * to an absolute range between `0` and `rangeMax`.\n *\n * The behavior matches the logic of `Array.prototype.slice()` and `String.prototype.slice()`,\n * which accept negative numbers as relative positions counted backwards from `rangeMax`,\n * and `undefined` to indicate either the start or end of the absolute range.\n */\nexport function getAbsoluteRange({\n\tstart,\n\tend,\n\trangeMax,\n}: {\n\t/**\n\t * The given start of the range.\n\t *\n\t * - Positive numbers will remain unchanged, but will be capped at `rangeMax`.\n\t * - Negative numbers will be counted backwards from `rangeMax`,\n\t *   but the absolute location will be capped at a minimum of 0 (the start of the range).\n\t * - A value of `undefined` will be treated like `0` (the start of the range).\n\t */\n\tstart: number | undefined\n\t/**\n\t * The given end of the range.\n\t *\n\t * - Positive numbers will remain unchanged, but will be capped at `rangeMax`.\n\t * - Negative numbers will be counted backwards from `rangeMax`,\n\t *   but the absolute location will be capped at a minimum of 0 (the start of the range).\n\t * - A value of `undefined` will be treated like `rangeMax` (the end of the range).\n\t */\n\tend: number | undefined\n\t/**\n\t * The available maximum of the range. The given inputs will be capped\n\t * to ensure that this maximum cannot be exceeded.\n\t */\n\trangeMax: number\n}) {\n\tstart = Math.min(start ?? 0, rangeMax)\n\tend = Math.min(end ?? rangeMax, rangeMax)\n\tif (start < 0) start = Math.max(start + rangeMax, 0)\n\tif (end < 0) end = Math.max(end + rangeMax, 0)\n\n\treturn [start, end]\n}\n","import type { ExpressiveCodeAnnotation, ExpressiveCodeInlineRange } from './annotation'\nimport { ExpressiveCodeBlock } from './block'\nimport { getAbsoluteRange } from '../internal/ranges'\nimport { isNumber, isString, newTypeError } from '../internal/type-checks'\n\nexport class ExpressiveCodeLine {\n\tconstructor(text: string) {\n\t\tif (typeof text !== 'string') throw new Error(`Expected code line text to be a string, but got ${JSON.stringify(text)}.`)\n\t\tthis.#text = text\n\t}\n\n\t#text: string\n\tget text() {\n\t\treturn this.#text\n\t}\n\n\t#parent: ExpressiveCodeBlock | undefined\n\tget parent() {\n\t\treturn this.#parent\n\t}\n\tset parent(value) {\n\t\tif (!(value instanceof ExpressiveCodeBlock)) throw new Error('When setting the parent of a code line, you must specify a valid code block instance.')\n\t\tif (this.#parent) {\n\t\t\tif (this.#parent === value) return\n\t\t\tthrow new Error(`You cannot change the parent of a code line after it has been added to a code block.`)\n\t\t}\n\t\tthis.#parent = value\n\t}\n\n\t#annotations: ExpressiveCodeAnnotation[] = []\n\tgetAnnotations(/*startColumn?: number, endColumn?: number*/) {\n\t\tconst matchingAnnotations = this.#annotations.filter((annotation) => !!annotation)\n\t\treturn Object.freeze(matchingAnnotations)\n\t}\n\n\taddAnnotation(annotation: ExpressiveCodeAnnotation) {\n\t\tvalidateExpressiveCodeAnnotation(annotation)\n\t\tif (this.#parent?.state?.canEditAnnotations === false) throw new Error('Cannot edit code line annotations in the current state.')\n\t\tthis.#annotations.push(annotation)\n\t}\n\n\tdeleteAnnotation(annotation: ExpressiveCodeAnnotation) {\n\t\tvalidateExpressiveCodeAnnotation(annotation)\n\t\tif (this.#parent?.state?.canEditAnnotations === false) throw new Error('Cannot edit code line annotations in the current state.')\n\t\tconst index = this.#annotations.indexOf(annotation)\n\t\tif (index === -1)\n\t\t\tthrow new Error(\n\t\t\t\t`Failed to delete annotation as it was not found (name=${JSON.stringify(annotation.constructor.name)}, inlineRange=${JSON.stringify(annotation.inlineRange)})`\n\t\t\t)\n\t\tthis.#annotations.splice(index, 1)\n\t}\n\n\teditText(columnStart: number | undefined, columnEnd: number | undefined, newText: string): string {\n\t\tif (columnStart !== undefined && !isNumber(columnStart)) throw newTypeError('number', columnStart)\n\t\tif (columnEnd !== undefined && !isNumber(columnEnd)) throw newTypeError('number', columnEnd)\n\t\tif (!isString(newText)) throw newTypeError('string', newText)\n\t\tif (this.#parent?.state?.canEditCode === false) throw new Error('Cannot edit code line text in the current state.')\n\n\t\t// Convert the given column positions to an absolute range\n\t\tconst [editStart, editEnd] = getAbsoluteRange({ start: columnStart, end: columnEnd, rangeMax: this.#text.length })\n\n\t\t// Determine how far the edit will shift affected annotation ranges\n\t\tconst editDelta = newText.length - (editEnd - editStart)\n\n\t\t// Update inline annotations affected by the edit\n\t\tfor (let index = this.#annotations.length - 1; index >= 0; index--) {\n\t\t\tconst annotation = this.#annotations[index]\n\n\t\t\t// Full-line annotations are unaffected\n\t\t\tif (!annotation.inlineRange) continue\n\n\t\t\tconst { columnStart: annotationStart, columnEnd: annotationEnd } = annotation.inlineRange\n\n\t\t\t// If the annotation ends before the edit starts, it's unaffected\n\t\t\tif (annotationEnd < editStart) continue\n\n\t\t\t// If the annotation starts after the edit ends, shift the annotation range\n\t\t\t// based on the delta between range length and new text length\n\t\t\tif (annotationStart > editEnd) {\n\t\t\t\tannotation.inlineRange.columnStart += editDelta\n\t\t\t\tannotation.inlineRange.columnEnd += editDelta\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// If the edit is fully contained in the annotation, keep the annotation\n\t\t\t// and only adjust its end based on the edit character delta\n\t\t\tif (editStart >= annotationStart && editEnd <= annotationEnd) {\n\t\t\t\tannotation.inlineRange.columnEnd += editDelta\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// If the annotation is fully contained in the edit, remove it\n\t\t\tif (editStart <= annotationStart && editEnd >= annotationEnd) {\n\t\t\t\tthis.#annotations.splice(index, 1)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t// If we arrive here, the edit partially intersects the annotation,\n\t\t\t// so remove the intersection by cutting the annotation range\n\t\t\tif (editStart > annotationStart) {\n\t\t\t\t// The edit starts inside the annotation, so we only need to cut the end\n\t\t\t\tannotation.inlineRange.columnEnd = editStart\n\t\t\t} else {\n\t\t\t\t// The edit ends inside the annotation, so we need to cut the start\n\t\t\t\t// and shift the end based on the edit character delta\n\t\t\t\tannotation.inlineRange.columnStart = editEnd + editDelta\n\t\t\t\tannotation.inlineRange.columnEnd += editDelta\n\t\t\t}\n\t\t}\n\n\t\t// Perform the edit by updating our text property\n\t\tthis.#text = this.text.slice(0, editStart) + newText + this.text.slice(editEnd)\n\n\t\treturn this.text\n\t}\n}\n\nfunction validateExpressiveCodeInlineRange(inlineRange: ExpressiveCodeInlineRange) {\n\tif (!isNumber(inlineRange.columnStart) || !isNumber(inlineRange.columnEnd)) throw newTypeError('ExpressiveCodeAnnotation', inlineRange, 'inlineRange')\n}\n\nexport function validateExpressiveCodeAnnotation(annotation: ExpressiveCodeAnnotation) {\n\t// eslint-disable-next-line @typescript-eslint/unbound-method\n\tif (typeof annotation?.render !== 'function') throw newTypeError('ExpressiveCodeAnnotation', annotation?.render, 'render')\n\tif (annotation.inlineRange) validateExpressiveCodeInlineRange(annotation.inlineRange)\n}\n","import { MetaOptions } from '../helpers/meta-options'\nimport { ExpressiveCodeProcessingState, validateExpressiveCodeProcessingState } from '../internal/render-block'\nimport { isNumber, isString, newTypeError } from '../internal/type-checks'\nimport { ExpressiveCodeLine } from './line'\n\nexport interface ExpressiveCodeBlockOptions {\n\t/**\n\t * The plaintext contents of the code block.\n\t */\n\tcode: string\n\t/**\n\t * The code block's language.\n\t *\n\t * Please use a valid [language identifier](https://expressive-code.com/key-features/syntax-highlighting/#supported-languages)\n\t * to ensure proper syntax highlighting.\n\t */\n\tlanguage: string\n\t/**\n\t * An optional meta string. In markdown or MDX documents, this is the part of the\n\t * code block's opening fence that comes after the language name.\n\t */\n\tmeta?: string | undefined\n\t/**\n\t * Optional props that can be used to influence the rendering of this code block.\n\t *\n\t * Plugins can add their own props to this type. To allow users to set these props through\n\t * the meta string, plugins can use the `preprocessMetadata` hook to read `metaOptions`\n\t * and update the `props` object accordingly.\n\t */\n\tprops?: PartialAllowUndefined<ExpressiveCodeBlockProps> | undefined\n\t/**\n\t * The code block's locale (e.g. `en-US` or `de-DE`). This is used by plugins to display\n\t * localized strings depending on the language of the containing page.\n\t *\n\t * If no locale is defined here, most Expressive Code integrations will attempt to auto-detect\n\t * the block locale using the configured\n\t * [`getBlockLocale`](https://expressive-code.com/reference/configuration/#getblocklocale)\n\t * function, and finally fall back to the configured\n\t * [`defaultLocale`](https://expressive-code.com/reference/configuration/#defaultlocale).\n\t */\n\tlocale?: string | undefined\n\t/**\n\t * Optional data about the parent document the code block is located in.\n\t *\n\t * Integrations like `rehype-expressive-code` can provide this information based on the\n\t * source document being processed. There may be cases where no document is available,\n\t * e.g. when the code block was created dynamically.\n\t */\n\tparentDocument?:\n\t\t| {\n\t\t\t\t/**\n\t\t\t\t * The full path to the source file containing the code block.\n\t\t\t\t */\n\t\t\t\tsourceFilePath?: string | undefined\n\t\t\t\t/**\n\t\t\t\t * A reference to the object representing the parsed source document.\n\t\t\t\t * This reference will stay the same for all code blocks in the same document.\n\t\t\t\t *\n\t\t\t\t * For example, if you are using `rehype-expressive-code` to render code blocks\n\t\t\t\t * in a Markdown file, this would be the `hast` node representing the file's\n\t\t\t\t * root node.\n\t\t\t\t */\n\t\t\t\tdocumentRoot?: unknown | undefined\n\t\t\t\t/**\n\t\t\t\t * Data about the position of the code block in the parent document.\n\t\t\t\t */\n\t\t\t\tpositionInDocument?:\n\t\t\t\t\t| {\n\t\t\t\t\t\t\tgroupIndex: number\n\t\t\t\t\t\t\ttotalGroups?: number | undefined\n\t\t\t\t\t  }\n\t\t\t\t\t| undefined\n\t\t  }\n\t\t| undefined\n}\n\nexport type PartialAllowUndefined<T> = {\n\t[Key in keyof T]?: T[Key] | undefined\n}\n\nexport interface ExpressiveCodeBlockProps {\n\t/**\n\t * If `true`, word wrapping will be enabled for the code block, causing lines that exceed\n\t * the available width to wrap to the next line. You can use the `preserveIndent` option\n\t * to control how wrapped lines are indented.\n\t *\n\t * If `false`, lines that exceed the available width will cause a horizontal scrollbar\n\t * to appear.\n\t *\n\t * @note This option only affects how the code block is displayed and does not change\n\t * the actual code. When copied to the clipboard, the code will still contain the\n\t * original unwrapped lines.\n\t *\n\t * @default false\n\t */\n\twrap: boolean\n\t/**\n\t * If `true`, wrapped parts of long lines will be aligned with their line's\n\t * indentation level, making the wrapped code appear to start at the same column.\n\t * This increases readability of the wrapped code and can be especially useful\n\t * for languages where indentation is significant, e.g. Python.\n\t *\n\t * If `false`, wrapped parts of long lines will always start at column 1.\n\t * This can be useful to reproduce terminal output.\n\t *\n\t * @note This option only has an effect if `wrap` is `true`. It only affects how the\n\t * code block is displayed and does not change the actual code. When copied to the clipboard,\n\t * the code will still contain the original unwrapped lines.\n\t *\n\t * @default true\n\t */\n\tpreserveIndent: boolean\n}\n\n/**\n * Represents a single code block that can be rendered by the Expressive Code engine.\n */\nexport class ExpressiveCodeBlock {\n\tconstructor(options: ExpressiveCodeBlockOptions) {\n\t\tconst { code, language, meta = '', props, locale, parentDocument } = options\n\t\tif (!isString(code) || !isString(language) || !isString(meta)) throw newTypeError('object of type ExpressiveCodeBlockOptions', options)\n\t\tthis.#lines = []\n\t\tthis.#language = language\n\t\tthis.#meta = meta\n\t\tthis.#metaOptions = new MetaOptions(meta)\n\t\tthis.#props = props || {}\n\t\tthis.#locale = locale\n\t\tthis.#parentDocument = parentDocument\n\n\t\t// Split the code into lines and remove whitespace from the end of the lines\n\t\tconst lines = code.split(/\\r?\\n/).map((line) => line.trimEnd())\n\n\t\t// Remove any fully empty lines from the start & end\n\t\twhile (lines.length && !lines[0].length) lines.shift()\n\t\twhile (lines.length && !lines[lines.length - 1].length) lines.pop()\n\n\t\t// If there are any lines left, insert them into the block\n\t\tif (lines.length) this.insertLines(0, lines)\n\n\t\t// Transfer core meta options to props\n\t\tthis.props.wrap = this.metaOptions.getBoolean('wrap') ?? this.props.wrap\n\t\tthis.props.preserveIndent = this.metaOptions.getBoolean('preserveIndent') ?? this.props.preserveIndent\n\t}\n\n\t/**\n\t * This field exists to ensure that only actual class instances are accepted\n\t * as the type `ExpressiveCodeBlock` by TypeScript. Without this workaround,\n\t * plain objects with the same structure would be accepted, but fail at runtime.\n\t */\n\tprivate _requireInstance = Symbol('ExpressiveCodeBlock')\n\n\treadonly #lines: ExpressiveCodeLine[]\n\t#language: string\n\t#meta: string\n\t#metaOptions: MetaOptions\n\t#props: NonNullable<ExpressiveCodeBlockOptions['props']>\n\t#locale: ExpressiveCodeBlockOptions['locale']\n\t#parentDocument: ExpressiveCodeBlockOptions['parentDocument']\n\t#state: ExpressiveCodeProcessingState | undefined\n\n\t/**\n\t * Provides read-only access to the code block's plaintext contents.\n\t */\n\tget code() {\n\t\treturn this.#lines.map((line) => line.text).join('\\n')\n\t}\n\n\tget language() {\n\t\treturn this.#language\n\t}\n\n\t/**\n\t * Allows getting and setting the code block's language.\n\t *\n\t * Setting this property may throw an error if not allowed in the current {@link state}.\n\t */\n\tset language(value: string) {\n\t\tif (this.#state?.canEditLanguage === false) throw new Error('Cannot edit code block property \"language\" in the current state.')\n\t\tthis.#language = value\n\t}\n\n\tget meta() {\n\t\treturn this.#meta\n\t}\n\n\t/**\n\t * Allows getting or setting the code block's meta string. In markdown or MDX documents,\n\t * this is the part of the code block's opening fence that comes after the language name.\n\t *\n\t * Setting this property may throw an error if not allowed in the current {@link state}.\n\t */\n\tset meta(value: string) {\n\t\tif (this.#state?.canEditMetadata === false) throw new Error('Cannot edit code block property \"meta\" in the current state.')\n\t\tthis.#meta = value\n\t\tthis.#metaOptions = new MetaOptions(value)\n\t}\n\n\t/**\n\t * Provides read-only access to the parsed version of the block's {@link meta} string.\n\t */\n\tget metaOptions() {\n\t\treturn this.#metaOptions\n\t}\n\n\t/**\n\t * Provides access to the code block's props.\n\t *\n\t * To allow users to set these props through the meta string, plugins can use the\n\t * `preprocessMetadata` hook to read `metaOptions` and update their props accordingly.\n\t *\n\t * Props can be modified until rendering starts and become read-only afterwards.\n\t */\n\tget props(): NonNullable<ExpressiveCodeBlockOptions['props']> {\n\t\tif (this.#state?.canEditMetadata === false) {\n\t\t\treturn Object.freeze({ ...this.#props })\n\t\t}\n\t\treturn this.#props\n\t}\n\n\t/**\n\t * Allows getting the code block's locale (e.g. `en-US` or `de-DE`). It is used by plugins\n\t * to display localized strings depending on the language of the containing page.\n\t *\n\t * Integrations like `rehype-expressive-code` support multi-language sites by allowing you\n\t * to provide custom logic to determine a block's locale (e.g. based on its parent document).\n\t *\n\t * If no locale is defined here, `ExpressiveCodeEngine` will render the code block\n\t * using the `defaultLocale` provided in its configuration.\n\t */\n\tget locale() {\n\t\treturn this.#locale\n\t}\n\n\t/**\n\t * Provides read-only access to optional data about the parent document\n\t * the code block is located in.\n\t *\n\t * Integrations like `rehype-expressive-code` can provide this information based on\n\t * the source document being processed. There may be cases where no document is available,\n\t * e.g. when the code block was created dynamically.\n\t */\n\tget parentDocument() {\n\t\treturn this.#parentDocument\n\t}\n\n\t/**\n\t * Provides read-only access to the code block's processing state.\n\t *\n\t * The processing state controls which properties of the code block can be modified.\n\t * The engine updates it automatically during rendering.\n\t */\n\tget state() {\n\t\tif (this.#state) {\n\t\t\tconst result: ExpressiveCodeProcessingState = { ...this.#state }\n\t\t\tObject.freeze(result)\n\t\t\treturn result\n\t\t}\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tset state(value) {\n\t\tvalidateExpressiveCodeProcessingState(value)\n\t\tif (this.#state) {\n\t\t\tif (this.#state === value) return\n\t\t\tthrow new Error(`You cannot change the state object of a code block after assigning it once.`)\n\t\t}\n\t\tthis.#state = value\n\t}\n\n\t/**\n\t * Returns the line at the given index, or `undefined` if the index is out of range.\n\t */\n\tgetLine(index: number): ExpressiveCodeLine | undefined {\n\t\tif (!isNumber(index) || index < 0) throw new Error('Line index must be a non-negative number.')\n\t\treturn this.getLines(index, index + 1)[0]\n\t}\n\n\t/**\n\t * Returns a readonly array of lines starting at the given index and ending before\n\t * the given index (exclusive). The indices support the same syntax as JavaScript’s\n\t * `Array.slice` method.\n\t */\n\tgetLines(startIndex?: number, endIndex?: number) {\n\t\treturn Object.freeze(this.#lines.slice(startIndex, endIndex))\n\t}\n\n\t/**\n\t * Deletes the line at the given index.\n\t *\n\t * May throw an error if not allowed in the current {@link state}.\n\t */\n\tdeleteLine(index: number) {\n\t\tthis.deleteLines([index])\n\t}\n\n\t/**\n\t * Deletes the lines at the given indices.\n\t *\n\t * This function automatically sorts the indices in descending order before deleting the lines,\n\t * so you do not need to worry about indices shifting after deleting a line.\n\t *\n\t * May throw an error if not allowed in the current {@link state}.\n\t */\n\tdeleteLines(indices: number[]) {\n\t\t// Validate arguments\n\t\tif (!Array.isArray(indices) || indices.length === 0 || indices.some((index) => !isNumber(index) || index < 0)) throw newTypeError('non-empty non-negative number[]', indices)\n\t\tif (this.#state?.canEditCode === false) throw new Error('Cannot delete code block lines in the current state.')\n\n\t\t// Sort line indices in reverse order and delete them\n\t\tconst sorted = [...indices].sort((a, b) => b - a)\n\t\tlet lastIndex: number\n\t\tsorted.forEach((index) => {\n\t\t\tif (lastIndex === index) throw new Error(`A batch of lines to delete cannot contain the same index twice. Given indices: ${JSON.stringify(indices)}`)\n\t\t\tlastIndex = index\n\t\t\tconst isValidIndex = index >= 0 && index < this.#lines.length\n\t\t\tif (!isValidIndex)\n\t\t\t\tthrow new Error(`Cannot delete invalid index ${JSON.stringify(index)} from line array (length=${this.#lines.length}). Given indices: ${JSON.stringify(indices)}`)\n\t\t\tthis.#lines.splice(index, 1)\n\t\t})\n\t}\n\n\t/**\n\t * Inserts a new line at the given index.\n\t *\n\t * May throw an error if not allowed in the current {@link state}.\n\t */\n\tinsertLine(index: number, textLine: string) {\n\t\treturn this.insertLines(index, [textLine])[0]\n\t}\n\n\t/**\n\t * Inserts multiple new lines at the given index.\n\t *\n\t * May throw an error if not allowed in the current {@link state}.\n\t */\n\tinsertLines(index: number, textLines: string[]) {\n\t\t// Validate arguments\n\t\tif (!isNumber(index) || index < 0) throw newTypeError('non-negative number', index)\n\t\tif (!Array.isArray(textLines) || textLines.length === 0 || textLines.some((textLine) => !isString(textLine))) throw newTypeError('non-empty string[]', textLines)\n\t\tif (this.#state?.canEditCode === false) throw new Error('Cannot insert code block lines in the current state.')\n\t\t// Note: To allow inserting a line after the last one, we need to use `<=` instead of `<`\n\t\tconst isValidIndex = index >= 0 && index <= this.#lines.length\n\t\tif (!isValidIndex) throw new Error(`Cannot insert at invalid index ${JSON.stringify(index)} into line array (length=${this.#lines.length}).`)\n\n\t\t// Create line instances and insert them\n\t\tconst lineInstances = textLines.map((text) => {\n\t\t\tconst line = new ExpressiveCodeLine(text)\n\t\t\tline.parent = this\n\t\t\treturn line\n\t\t})\n\t\tthis.#lines.splice(index, 0, ...lineInstances)\n\t\treturn lineInstances\n\t}\n}\n","var githubDark = Object.freeze({\n  \"colors\": {\n    \"activityBar.activeBorder\": \"#f9826c\",\n    \"activityBar.background\": \"#24292e\",\n    \"activityBar.border\": \"#1b1f23\",\n    \"activityBar.foreground\": \"#e1e4e8\",\n    \"activityBar.inactiveForeground\": \"#6a737d\",\n    \"activityBarBadge.background\": \"#0366d6\",\n    \"activityBarBadge.foreground\": \"#fff\",\n    \"badge.background\": \"#044289\",\n    \"badge.foreground\": \"#c8e1ff\",\n    \"breadcrumb.activeSelectionForeground\": \"#d1d5da\",\n    \"breadcrumb.focusForeground\": \"#e1e4e8\",\n    \"breadcrumb.foreground\": \"#959da5\",\n    \"breadcrumbPicker.background\": \"#2b3036\",\n    \"button.background\": \"#176f2c\",\n    \"button.foreground\": \"#dcffe4\",\n    \"button.hoverBackground\": \"#22863a\",\n    \"button.secondaryBackground\": \"#444d56\",\n    \"button.secondaryForeground\": \"#fff\",\n    \"button.secondaryHoverBackground\": \"#586069\",\n    \"checkbox.background\": \"#444d56\",\n    \"checkbox.border\": \"#1b1f23\",\n    \"debugToolBar.background\": \"#2b3036\",\n    \"descriptionForeground\": \"#959da5\",\n    \"diffEditor.insertedTextBackground\": \"#28a74530\",\n    \"diffEditor.removedTextBackground\": \"#d73a4930\",\n    \"dropdown.background\": \"#2f363d\",\n    \"dropdown.border\": \"#1b1f23\",\n    \"dropdown.foreground\": \"#e1e4e8\",\n    \"dropdown.listBackground\": \"#24292e\",\n    \"editor.background\": \"#24292e\",\n    \"editor.findMatchBackground\": \"#ffd33d44\",\n    \"editor.findMatchHighlightBackground\": \"#ffd33d22\",\n    \"editor.focusedStackFrameHighlightBackground\": \"#2b6a3033\",\n    \"editor.foldBackground\": \"#58606915\",\n    \"editor.foreground\": \"#e1e4e8\",\n    \"editor.inactiveSelectionBackground\": \"#3392FF22\",\n    \"editor.lineHighlightBackground\": \"#2b3036\",\n    \"editor.linkedEditingBackground\": \"#3392FF22\",\n    \"editor.selectionBackground\": \"#3392FF44\",\n    \"editor.selectionHighlightBackground\": \"#17E5E633\",\n    \"editor.selectionHighlightBorder\": \"#17E5E600\",\n    \"editor.stackFrameHighlightBackground\": \"#C6902625\",\n    \"editor.wordHighlightBackground\": \"#17E5E600\",\n    \"editor.wordHighlightBorder\": \"#17E5E699\",\n    \"editor.wordHighlightStrongBackground\": \"#17E5E600\",\n    \"editor.wordHighlightStrongBorder\": \"#17E5E666\",\n    \"editorBracketHighlight.foreground1\": \"#79b8ff\",\n    \"editorBracketHighlight.foreground2\": \"#ffab70\",\n    \"editorBracketHighlight.foreground3\": \"#b392f0\",\n    \"editorBracketHighlight.foreground4\": \"#79b8ff\",\n    \"editorBracketHighlight.foreground5\": \"#ffab70\",\n    \"editorBracketHighlight.foreground6\": \"#b392f0\",\n    \"editorBracketMatch.background\": \"#17E5E650\",\n    \"editorBracketMatch.border\": \"#17E5E600\",\n    \"editorCursor.foreground\": \"#c8e1ff\",\n    \"editorError.foreground\": \"#f97583\",\n    \"editorGroup.border\": \"#1b1f23\",\n    \"editorGroupHeader.tabsBackground\": \"#1f2428\",\n    \"editorGroupHeader.tabsBorder\": \"#1b1f23\",\n    \"editorGutter.addedBackground\": \"#28a745\",\n    \"editorGutter.deletedBackground\": \"#ea4a5a\",\n    \"editorGutter.modifiedBackground\": \"#2188ff\",\n    \"editorIndentGuide.activeBackground\": \"#444d56\",\n    \"editorIndentGuide.background\": \"#2f363d\",\n    \"editorLineNumber.activeForeground\": \"#e1e4e8\",\n    \"editorLineNumber.foreground\": \"#444d56\",\n    \"editorOverviewRuler.border\": \"#1b1f23\",\n    \"editorWarning.foreground\": \"#ffea7f\",\n    \"editorWhitespace.foreground\": \"#444d56\",\n    \"editorWidget.background\": \"#1f2428\",\n    \"errorForeground\": \"#f97583\",\n    \"focusBorder\": \"#005cc5\",\n    \"foreground\": \"#d1d5da\",\n    \"gitDecoration.addedResourceForeground\": \"#34d058\",\n    \"gitDecoration.conflictingResourceForeground\": \"#ffab70\",\n    \"gitDecoration.deletedResourceForeground\": \"#ea4a5a\",\n    \"gitDecoration.ignoredResourceForeground\": \"#6a737d\",\n    \"gitDecoration.modifiedResourceForeground\": \"#79b8ff\",\n    \"gitDecoration.submoduleResourceForeground\": \"#6a737d\",\n    \"gitDecoration.untrackedResourceForeground\": \"#34d058\",\n    \"input.background\": \"#2f363d\",\n    \"input.border\": \"#1b1f23\",\n    \"input.foreground\": \"#e1e4e8\",\n    \"input.placeholderForeground\": \"#959da5\",\n    \"list.activeSelectionBackground\": \"#39414a\",\n    \"list.activeSelectionForeground\": \"#e1e4e8\",\n    \"list.focusBackground\": \"#044289\",\n    \"list.hoverBackground\": \"#282e34\",\n    \"list.hoverForeground\": \"#e1e4e8\",\n    \"list.inactiveFocusBackground\": \"#1d2d3e\",\n    \"list.inactiveSelectionBackground\": \"#282e34\",\n    \"list.inactiveSelectionForeground\": \"#e1e4e8\",\n    \"notificationCenterHeader.background\": \"#24292e\",\n    \"notificationCenterHeader.foreground\": \"#959da5\",\n    \"notifications.background\": \"#2f363d\",\n    \"notifications.border\": \"#1b1f23\",\n    \"notifications.foreground\": \"#e1e4e8\",\n    \"notificationsErrorIcon.foreground\": \"#ea4a5a\",\n    \"notificationsInfoIcon.foreground\": \"#79b8ff\",\n    \"notificationsWarningIcon.foreground\": \"#ffab70\",\n    \"panel.background\": \"#1f2428\",\n    \"panel.border\": \"#1b1f23\",\n    \"panelInput.border\": \"#2f363d\",\n    \"panelTitle.activeBorder\": \"#f9826c\",\n    \"panelTitle.activeForeground\": \"#e1e4e8\",\n    \"panelTitle.inactiveForeground\": \"#959da5\",\n    \"peekViewEditor.background\": \"#1f242888\",\n    \"peekViewEditor.matchHighlightBackground\": \"#ffd33d33\",\n    \"peekViewResult.background\": \"#1f2428\",\n    \"peekViewResult.matchHighlightBackground\": \"#ffd33d33\",\n    \"pickerGroup.border\": \"#444d56\",\n    \"pickerGroup.foreground\": \"#e1e4e8\",\n    \"progressBar.background\": \"#0366d6\",\n    \"quickInput.background\": \"#24292e\",\n    \"quickInput.foreground\": \"#e1e4e8\",\n    \"scrollbar.shadow\": \"#0008\",\n    \"scrollbarSlider.activeBackground\": \"#6a737d88\",\n    \"scrollbarSlider.background\": \"#6a737d33\",\n    \"scrollbarSlider.hoverBackground\": \"#6a737d44\",\n    \"settings.headerForeground\": \"#e1e4e8\",\n    \"settings.modifiedItemIndicator\": \"#0366d6\",\n    \"sideBar.background\": \"#1f2428\",\n    \"sideBar.border\": \"#1b1f23\",\n    \"sideBar.foreground\": \"#d1d5da\",\n    \"sideBarSectionHeader.background\": \"#1f2428\",\n    \"sideBarSectionHeader.border\": \"#1b1f23\",\n    \"sideBarSectionHeader.foreground\": \"#e1e4e8\",\n    \"sideBarTitle.foreground\": \"#e1e4e8\",\n    \"statusBar.background\": \"#24292e\",\n    \"statusBar.border\": \"#1b1f23\",\n    \"statusBar.debuggingBackground\": \"#931c06\",\n    \"statusBar.debuggingForeground\": \"#fff\",\n    \"statusBar.foreground\": \"#d1d5da\",\n    \"statusBar.noFolderBackground\": \"#24292e\",\n    \"statusBarItem.prominentBackground\": \"#282e34\",\n    \"statusBarItem.remoteBackground\": \"#24292e\",\n    \"statusBarItem.remoteForeground\": \"#d1d5da\",\n    \"tab.activeBackground\": \"#24292e\",\n    \"tab.activeBorder\": \"#24292e\",\n    \"tab.activeBorderTop\": \"#f9826c\",\n    \"tab.activeForeground\": \"#e1e4e8\",\n    \"tab.border\": \"#1b1f23\",\n    \"tab.hoverBackground\": \"#24292e\",\n    \"tab.inactiveBackground\": \"#1f2428\",\n    \"tab.inactiveForeground\": \"#959da5\",\n    \"tab.unfocusedActiveBorder\": \"#24292e\",\n    \"tab.unfocusedActiveBorderTop\": \"#1b1f23\",\n    \"tab.unfocusedHoverBackground\": \"#24292e\",\n    \"terminal.ansiBlack\": \"#586069\",\n    \"terminal.ansiBlue\": \"#2188ff\",\n    \"terminal.ansiBrightBlack\": \"#959da5\",\n    \"terminal.ansiBrightBlue\": \"#79b8ff\",\n    \"terminal.ansiBrightCyan\": \"#56d4dd\",\n    \"terminal.ansiBrightGreen\": \"#85e89d\",\n    \"terminal.ansiBrightMagenta\": \"#b392f0\",\n    \"terminal.ansiBrightRed\": \"#f97583\",\n    \"terminal.ansiBrightWhite\": \"#fafbfc\",\n    \"terminal.ansiBrightYellow\": \"#ffea7f\",\n    \"terminal.ansiCyan\": \"#39c5cf\",\n    \"terminal.ansiGreen\": \"#34d058\",\n    \"terminal.ansiMagenta\": \"#b392f0\",\n    \"terminal.ansiRed\": \"#ea4a5a\",\n    \"terminal.ansiWhite\": \"#d1d5da\",\n    \"terminal.ansiYellow\": \"#ffea7f\",\n    \"terminal.foreground\": \"#d1d5da\",\n    \"terminal.tab.activeBorder\": \"#f9826c\",\n    \"terminalCursor.background\": \"#586069\",\n    \"terminalCursor.foreground\": \"#79b8ff\",\n    \"textBlockQuote.background\": \"#24292e\",\n    \"textBlockQuote.border\": \"#444d56\",\n    \"textCodeBlock.background\": \"#2f363d\",\n    \"textLink.activeForeground\": \"#c8e1ff\",\n    \"textLink.foreground\": \"#79b8ff\",\n    \"textPreformat.foreground\": \"#d1d5da\",\n    \"textSeparator.foreground\": \"#586069\",\n    \"titleBar.activeBackground\": \"#24292e\",\n    \"titleBar.activeForeground\": \"#e1e4e8\",\n    \"titleBar.border\": \"#1b1f23\",\n    \"titleBar.inactiveBackground\": \"#1f2428\",\n    \"titleBar.inactiveForeground\": \"#959da5\",\n    \"tree.indentGuidesStroke\": \"#2f363d\",\n    \"welcomePage.buttonBackground\": \"#2f363d\",\n    \"welcomePage.buttonHoverBackground\": \"#444d56\"\n  },\n  \"displayName\": \"GitHub Dark\",\n  \"name\": \"github-dark\",\n  \"semanticHighlighting\": true,\n  \"tokenColors\": [\n    {\n      \"scope\": [\n        \"comment\",\n        \"punctuation.definition.comment\",\n        \"string.comment\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#6a737d\"\n      }\n    },\n    {\n      \"scope\": [\n        \"constant\",\n        \"entity.name.constant\",\n        \"variable.other.constant\",\n        \"variable.other.enummember\",\n        \"variable.language\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#79b8ff\"\n      }\n    },\n    {\n      \"scope\": [\n        \"entity\",\n        \"entity.name\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#b392f0\"\n      }\n    },\n    {\n      \"scope\": \"variable.parameter.function\",\n      \"settings\": {\n        \"foreground\": \"#e1e4e8\"\n      }\n    },\n    {\n      \"scope\": \"entity.name.tag\",\n      \"settings\": {\n        \"foreground\": \"#85e89d\"\n      }\n    },\n    {\n      \"scope\": \"keyword\",\n      \"settings\": {\n        \"foreground\": \"#f97583\"\n      }\n    },\n    {\n      \"scope\": [\n        \"storage\",\n        \"storage.type\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#f97583\"\n      }\n    },\n    {\n      \"scope\": [\n        \"storage.modifier.package\",\n        \"storage.modifier.import\",\n        \"storage.type.java\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#e1e4e8\"\n      }\n    },\n    {\n      \"scope\": [\n        \"string\",\n        \"punctuation.definition.string\",\n        \"string punctuation.section.embedded source\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#9ecbff\"\n      }\n    },\n    {\n      \"scope\": \"support\",\n      \"settings\": {\n        \"foreground\": \"#79b8ff\"\n      }\n    },\n    {\n      \"scope\": \"meta.property-name\",\n      \"settings\": {\n        \"foreground\": \"#79b8ff\"\n      }\n    },\n    {\n      \"scope\": \"variable\",\n      \"settings\": {\n        \"foreground\": \"#ffab70\"\n      }\n    },\n    {\n      \"scope\": \"variable.other\",\n      \"settings\": {\n        \"foreground\": \"#e1e4e8\"\n      }\n    },\n    {\n      \"scope\": \"invalid.broken\",\n      \"settings\": {\n        \"fontStyle\": \"italic\",\n        \"foreground\": \"#fdaeb7\"\n      }\n    },\n    {\n      \"scope\": \"invalid.deprecated\",\n      \"settings\": {\n        \"fontStyle\": \"italic\",\n        \"foreground\": \"#fdaeb7\"\n      }\n    },\n    {\n      \"scope\": \"invalid.illegal\",\n      \"settings\": {\n        \"fontStyle\": \"italic\",\n        \"foreground\": \"#fdaeb7\"\n      }\n    },\n    {\n      \"scope\": \"invalid.unimplemented\",\n      \"settings\": {\n        \"fontStyle\": \"italic\",\n        \"foreground\": \"#fdaeb7\"\n      }\n    },\n    {\n      \"scope\": \"carriage-return\",\n      \"settings\": {\n        \"background\": \"#f97583\",\n        \"content\": \"^M\",\n        \"fontStyle\": \"italic underline\",\n        \"foreground\": \"#24292e\"\n      }\n    },\n    {\n      \"scope\": \"message.error\",\n      \"settings\": {\n        \"foreground\": \"#fdaeb7\"\n      }\n    },\n    {\n      \"scope\": \"string variable\",\n      \"settings\": {\n        \"foreground\": \"#79b8ff\"\n      }\n    },\n    {\n      \"scope\": [\n        \"source.regexp\",\n        \"string.regexp\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#dbedff\"\n      }\n    },\n    {\n      \"scope\": [\n        \"string.regexp.character-class\",\n        \"string.regexp constant.character.escape\",\n        \"string.regexp source.ruby.embedded\",\n        \"string.regexp string.regexp.arbitrary-repitition\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#dbedff\"\n      }\n    },\n    {\n      \"scope\": \"string.regexp constant.character.escape\",\n      \"settings\": {\n        \"fontStyle\": \"bold\",\n        \"foreground\": \"#85e89d\"\n      }\n    },\n    {\n      \"scope\": \"support.constant\",\n      \"settings\": {\n        \"foreground\": \"#79b8ff\"\n      }\n    },\n    {\n      \"scope\": \"support.variable\",\n      \"settings\": {\n        \"foreground\": \"#79b8ff\"\n      }\n    },\n    {\n      \"scope\": \"meta.module-reference\",\n      \"settings\": {\n        \"foreground\": \"#79b8ff\"\n      }\n    },\n    {\n      \"scope\": \"punctuation.definition.list.begin.markdown\",\n      \"settings\": {\n        \"foreground\": \"#ffab70\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.heading\",\n        \"markup.heading entity.name\"\n      ],\n      \"settings\": {\n        \"fontStyle\": \"bold\",\n        \"foreground\": \"#79b8ff\"\n      }\n    },\n    {\n      \"scope\": \"markup.quote\",\n      \"settings\": {\n        \"foreground\": \"#85e89d\"\n      }\n    },\n    {\n      \"scope\": \"markup.italic\",\n      \"settings\": {\n        \"fontStyle\": \"italic\",\n        \"foreground\": \"#e1e4e8\"\n      }\n    },\n    {\n      \"scope\": \"markup.bold\",\n      \"settings\": {\n        \"fontStyle\": \"bold\",\n        \"foreground\": \"#e1e4e8\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.underline\"\n      ],\n      \"settings\": {\n        \"fontStyle\": \"underline\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.strikethrough\"\n      ],\n      \"settings\": {\n        \"fontStyle\": \"strikethrough\"\n      }\n    },\n    {\n      \"scope\": \"markup.inline.raw\",\n      \"settings\": {\n        \"foreground\": \"#79b8ff\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.deleted\",\n        \"meta.diff.header.from-file\",\n        \"punctuation.definition.deleted\"\n      ],\n      \"settings\": {\n        \"background\": \"#86181d\",\n        \"foreground\": \"#fdaeb7\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.inserted\",\n        \"meta.diff.header.to-file\",\n        \"punctuation.definition.inserted\"\n      ],\n      \"settings\": {\n        \"background\": \"#144620\",\n        \"foreground\": \"#85e89d\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.changed\",\n        \"punctuation.definition.changed\"\n      ],\n      \"settings\": {\n        \"background\": \"#c24e00\",\n        \"foreground\": \"#ffab70\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.ignored\",\n        \"markup.untracked\"\n      ],\n      \"settings\": {\n        \"background\": \"#79b8ff\",\n        \"foreground\": \"#2f363d\"\n      }\n    },\n    {\n      \"scope\": \"meta.diff.range\",\n      \"settings\": {\n        \"fontStyle\": \"bold\",\n        \"foreground\": \"#b392f0\"\n      }\n    },\n    {\n      \"scope\": \"meta.diff.header\",\n      \"settings\": {\n        \"foreground\": \"#79b8ff\"\n      }\n    },\n    {\n      \"scope\": \"meta.separator\",\n      \"settings\": {\n        \"fontStyle\": \"bold\",\n        \"foreground\": \"#79b8ff\"\n      }\n    },\n    {\n      \"scope\": \"meta.output\",\n      \"settings\": {\n        \"foreground\": \"#79b8ff\"\n      }\n    },\n    {\n      \"scope\": [\n        \"brackethighlighter.tag\",\n        \"brackethighlighter.curly\",\n        \"brackethighlighter.round\",\n        \"brackethighlighter.square\",\n        \"brackethighlighter.angle\",\n        \"brackethighlighter.quote\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#d1d5da\"\n      }\n    },\n    {\n      \"scope\": \"brackethighlighter.unmatched\",\n      \"settings\": {\n        \"foreground\": \"#fdaeb7\"\n      }\n    },\n    {\n      \"scope\": [\n        \"constant.other.reference.link\",\n        \"string.other.link\"\n      ],\n      \"settings\": {\n        \"fontStyle\": \"underline\",\n        \"foreground\": \"#dbedff\"\n      }\n    }\n  ],\n  \"type\": \"dark\"\n});\n\nexport { githubDark as default };\n","var githubLight = Object.freeze({\n  \"colors\": {\n    \"activityBar.activeBorder\": \"#f9826c\",\n    \"activityBar.background\": \"#fff\",\n    \"activityBar.border\": \"#e1e4e8\",\n    \"activityBar.foreground\": \"#2f363d\",\n    \"activityBar.inactiveForeground\": \"#959da5\",\n    \"activityBarBadge.background\": \"#2188ff\",\n    \"activityBarBadge.foreground\": \"#fff\",\n    \"badge.background\": \"#dbedff\",\n    \"badge.foreground\": \"#005cc5\",\n    \"breadcrumb.activeSelectionForeground\": \"#586069\",\n    \"breadcrumb.focusForeground\": \"#2f363d\",\n    \"breadcrumb.foreground\": \"#6a737d\",\n    \"breadcrumbPicker.background\": \"#fafbfc\",\n    \"button.background\": \"#159739\",\n    \"button.foreground\": \"#fff\",\n    \"button.hoverBackground\": \"#138934\",\n    \"button.secondaryBackground\": \"#e1e4e8\",\n    \"button.secondaryForeground\": \"#1b1f23\",\n    \"button.secondaryHoverBackground\": \"#d1d5da\",\n    \"checkbox.background\": \"#fafbfc\",\n    \"checkbox.border\": \"#d1d5da\",\n    \"debugToolBar.background\": \"#fff\",\n    \"descriptionForeground\": \"#6a737d\",\n    \"diffEditor.insertedTextBackground\": \"#34d05822\",\n    \"diffEditor.removedTextBackground\": \"#d73a4922\",\n    \"dropdown.background\": \"#fafbfc\",\n    \"dropdown.border\": \"#e1e4e8\",\n    \"dropdown.foreground\": \"#2f363d\",\n    \"dropdown.listBackground\": \"#fff\",\n    \"editor.background\": \"#fff\",\n    \"editor.findMatchBackground\": \"#ffdf5d\",\n    \"editor.findMatchHighlightBackground\": \"#ffdf5d66\",\n    \"editor.focusedStackFrameHighlightBackground\": \"#28a74525\",\n    \"editor.foldBackground\": \"#d1d5da11\",\n    \"editor.foreground\": \"#24292e\",\n    \"editor.inactiveSelectionBackground\": \"#0366d611\",\n    \"editor.lineHighlightBackground\": \"#f6f8fa\",\n    \"editor.linkedEditingBackground\": \"#0366d611\",\n    \"editor.selectionBackground\": \"#0366d625\",\n    \"editor.selectionHighlightBackground\": \"#34d05840\",\n    \"editor.selectionHighlightBorder\": \"#34d05800\",\n    \"editor.stackFrameHighlightBackground\": \"#ffd33d33\",\n    \"editor.wordHighlightBackground\": \"#34d05800\",\n    \"editor.wordHighlightBorder\": \"#24943e99\",\n    \"editor.wordHighlightStrongBackground\": \"#34d05800\",\n    \"editor.wordHighlightStrongBorder\": \"#24943e50\",\n    \"editorBracketHighlight.foreground1\": \"#005cc5\",\n    \"editorBracketHighlight.foreground2\": \"#e36209\",\n    \"editorBracketHighlight.foreground3\": \"#5a32a3\",\n    \"editorBracketHighlight.foreground4\": \"#005cc5\",\n    \"editorBracketHighlight.foreground5\": \"#e36209\",\n    \"editorBracketHighlight.foreground6\": \"#5a32a3\",\n    \"editorBracketMatch.background\": \"#34d05840\",\n    \"editorBracketMatch.border\": \"#34d05800\",\n    \"editorCursor.foreground\": \"#044289\",\n    \"editorError.foreground\": \"#cb2431\",\n    \"editorGroup.border\": \"#e1e4e8\",\n    \"editorGroupHeader.tabsBackground\": \"#f6f8fa\",\n    \"editorGroupHeader.tabsBorder\": \"#e1e4e8\",\n    \"editorGutter.addedBackground\": \"#28a745\",\n    \"editorGutter.deletedBackground\": \"#d73a49\",\n    \"editorGutter.modifiedBackground\": \"#2188ff\",\n    \"editorIndentGuide.activeBackground\": \"#d7dbe0\",\n    \"editorIndentGuide.background\": \"#eff2f6\",\n    \"editorLineNumber.activeForeground\": \"#24292e\",\n    \"editorLineNumber.foreground\": \"#1b1f234d\",\n    \"editorOverviewRuler.border\": \"#fff\",\n    \"editorWarning.foreground\": \"#f9c513\",\n    \"editorWhitespace.foreground\": \"#d1d5da\",\n    \"editorWidget.background\": \"#f6f8fa\",\n    \"errorForeground\": \"#cb2431\",\n    \"focusBorder\": \"#2188ff\",\n    \"foreground\": \"#444d56\",\n    \"gitDecoration.addedResourceForeground\": \"#28a745\",\n    \"gitDecoration.conflictingResourceForeground\": \"#e36209\",\n    \"gitDecoration.deletedResourceForeground\": \"#d73a49\",\n    \"gitDecoration.ignoredResourceForeground\": \"#959da5\",\n    \"gitDecoration.modifiedResourceForeground\": \"#005cc5\",\n    \"gitDecoration.submoduleResourceForeground\": \"#959da5\",\n    \"gitDecoration.untrackedResourceForeground\": \"#28a745\",\n    \"input.background\": \"#fafbfc\",\n    \"input.border\": \"#e1e4e8\",\n    \"input.foreground\": \"#2f363d\",\n    \"input.placeholderForeground\": \"#959da5\",\n    \"list.activeSelectionBackground\": \"#e2e5e9\",\n    \"list.activeSelectionForeground\": \"#2f363d\",\n    \"list.focusBackground\": \"#cce5ff\",\n    \"list.hoverBackground\": \"#ebf0f4\",\n    \"list.hoverForeground\": \"#2f363d\",\n    \"list.inactiveFocusBackground\": \"#dbedff\",\n    \"list.inactiveSelectionBackground\": \"#e8eaed\",\n    \"list.inactiveSelectionForeground\": \"#2f363d\",\n    \"notificationCenterHeader.background\": \"#e1e4e8\",\n    \"notificationCenterHeader.foreground\": \"#6a737d\",\n    \"notifications.background\": \"#fafbfc\",\n    \"notifications.border\": \"#e1e4e8\",\n    \"notifications.foreground\": \"#2f363d\",\n    \"notificationsErrorIcon.foreground\": \"#d73a49\",\n    \"notificationsInfoIcon.foreground\": \"#005cc5\",\n    \"notificationsWarningIcon.foreground\": \"#e36209\",\n    \"panel.background\": \"#f6f8fa\",\n    \"panel.border\": \"#e1e4e8\",\n    \"panelInput.border\": \"#e1e4e8\",\n    \"panelTitle.activeBorder\": \"#f9826c\",\n    \"panelTitle.activeForeground\": \"#2f363d\",\n    \"panelTitle.inactiveForeground\": \"#6a737d\",\n    \"pickerGroup.border\": \"#e1e4e8\",\n    \"pickerGroup.foreground\": \"#2f363d\",\n    \"progressBar.background\": \"#2188ff\",\n    \"quickInput.background\": \"#fafbfc\",\n    \"quickInput.foreground\": \"#2f363d\",\n    \"scrollbar.shadow\": \"#6a737d33\",\n    \"scrollbarSlider.activeBackground\": \"#959da588\",\n    \"scrollbarSlider.background\": \"#959da533\",\n    \"scrollbarSlider.hoverBackground\": \"#959da544\",\n    \"settings.headerForeground\": \"#2f363d\",\n    \"settings.modifiedItemIndicator\": \"#2188ff\",\n    \"sideBar.background\": \"#f6f8fa\",\n    \"sideBar.border\": \"#e1e4e8\",\n    \"sideBar.foreground\": \"#586069\",\n    \"sideBarSectionHeader.background\": \"#f6f8fa\",\n    \"sideBarSectionHeader.border\": \"#e1e4e8\",\n    \"sideBarSectionHeader.foreground\": \"#2f363d\",\n    \"sideBarTitle.foreground\": \"#2f363d\",\n    \"statusBar.background\": \"#fff\",\n    \"statusBar.border\": \"#e1e4e8\",\n    \"statusBar.debuggingBackground\": \"#f9826c\",\n    \"statusBar.debuggingForeground\": \"#fff\",\n    \"statusBar.foreground\": \"#586069\",\n    \"statusBar.noFolderBackground\": \"#fff\",\n    \"statusBarItem.prominentBackground\": \"#e8eaed\",\n    \"statusBarItem.remoteBackground\": \"#fff\",\n    \"statusBarItem.remoteForeground\": \"#586069\",\n    \"tab.activeBackground\": \"#fff\",\n    \"tab.activeBorder\": \"#fff\",\n    \"tab.activeBorderTop\": \"#f9826c\",\n    \"tab.activeForeground\": \"#2f363d\",\n    \"tab.border\": \"#e1e4e8\",\n    \"tab.hoverBackground\": \"#fff\",\n    \"tab.inactiveBackground\": \"#f6f8fa\",\n    \"tab.inactiveForeground\": \"#6a737d\",\n    \"tab.unfocusedActiveBorder\": \"#fff\",\n    \"tab.unfocusedActiveBorderTop\": \"#e1e4e8\",\n    \"tab.unfocusedHoverBackground\": \"#fff\",\n    \"terminal.ansiBlack\": \"#24292e\",\n    \"terminal.ansiBlue\": \"#0366d6\",\n    \"terminal.ansiBrightBlack\": \"#959da5\",\n    \"terminal.ansiBrightBlue\": \"#005cc5\",\n    \"terminal.ansiBrightCyan\": \"#3192aa\",\n    \"terminal.ansiBrightGreen\": \"#22863a\",\n    \"terminal.ansiBrightMagenta\": \"#5a32a3\",\n    \"terminal.ansiBrightRed\": \"#cb2431\",\n    \"terminal.ansiBrightWhite\": \"#d1d5da\",\n    \"terminal.ansiBrightYellow\": \"#b08800\",\n    \"terminal.ansiCyan\": \"#1b7c83\",\n    \"terminal.ansiGreen\": \"#28a745\",\n    \"terminal.ansiMagenta\": \"#5a32a3\",\n    \"terminal.ansiRed\": \"#d73a49\",\n    \"terminal.ansiWhite\": \"#6a737d\",\n    \"terminal.ansiYellow\": \"#dbab09\",\n    \"terminal.foreground\": \"#586069\",\n    \"terminal.tab.activeBorder\": \"#f9826c\",\n    \"terminalCursor.background\": \"#d1d5da\",\n    \"terminalCursor.foreground\": \"#005cc5\",\n    \"textBlockQuote.background\": \"#fafbfc\",\n    \"textBlockQuote.border\": \"#e1e4e8\",\n    \"textCodeBlock.background\": \"#f6f8fa\",\n    \"textLink.activeForeground\": \"#005cc5\",\n    \"textLink.foreground\": \"#0366d6\",\n    \"textPreformat.foreground\": \"#586069\",\n    \"textSeparator.foreground\": \"#d1d5da\",\n    \"titleBar.activeBackground\": \"#fff\",\n    \"titleBar.activeForeground\": \"#2f363d\",\n    \"titleBar.border\": \"#e1e4e8\",\n    \"titleBar.inactiveBackground\": \"#f6f8fa\",\n    \"titleBar.inactiveForeground\": \"#6a737d\",\n    \"tree.indentGuidesStroke\": \"#e1e4e8\",\n    \"welcomePage.buttonBackground\": \"#f6f8fa\",\n    \"welcomePage.buttonHoverBackground\": \"#e1e4e8\"\n  },\n  \"displayName\": \"GitHub Light\",\n  \"name\": \"github-light\",\n  \"semanticHighlighting\": true,\n  \"tokenColors\": [\n    {\n      \"scope\": [\n        \"comment\",\n        \"punctuation.definition.comment\",\n        \"string.comment\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#6a737d\"\n      }\n    },\n    {\n      \"scope\": [\n        \"constant\",\n        \"entity.name.constant\",\n        \"variable.other.constant\",\n        \"variable.other.enummember\",\n        \"variable.language\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#005cc5\"\n      }\n    },\n    {\n      \"scope\": [\n        \"entity\",\n        \"entity.name\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#6f42c1\"\n      }\n    },\n    {\n      \"scope\": \"variable.parameter.function\",\n      \"settings\": {\n        \"foreground\": \"#24292e\"\n      }\n    },\n    {\n      \"scope\": \"entity.name.tag\",\n      \"settings\": {\n        \"foreground\": \"#22863a\"\n      }\n    },\n    {\n      \"scope\": \"keyword\",\n      \"settings\": {\n        \"foreground\": \"#d73a49\"\n      }\n    },\n    {\n      \"scope\": [\n        \"storage\",\n        \"storage.type\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#d73a49\"\n      }\n    },\n    {\n      \"scope\": [\n        \"storage.modifier.package\",\n        \"storage.modifier.import\",\n        \"storage.type.java\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#24292e\"\n      }\n    },\n    {\n      \"scope\": [\n        \"string\",\n        \"punctuation.definition.string\",\n        \"string punctuation.section.embedded source\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#032f62\"\n      }\n    },\n    {\n      \"scope\": \"support\",\n      \"settings\": {\n        \"foreground\": \"#005cc5\"\n      }\n    },\n    {\n      \"scope\": \"meta.property-name\",\n      \"settings\": {\n        \"foreground\": \"#005cc5\"\n      }\n    },\n    {\n      \"scope\": \"variable\",\n      \"settings\": {\n        \"foreground\": \"#e36209\"\n      }\n    },\n    {\n      \"scope\": \"variable.other\",\n      \"settings\": {\n        \"foreground\": \"#24292e\"\n      }\n    },\n    {\n      \"scope\": \"invalid.broken\",\n      \"settings\": {\n        \"fontStyle\": \"italic\",\n        \"foreground\": \"#b31d28\"\n      }\n    },\n    {\n      \"scope\": \"invalid.deprecated\",\n      \"settings\": {\n        \"fontStyle\": \"italic\",\n        \"foreground\": \"#b31d28\"\n      }\n    },\n    {\n      \"scope\": \"invalid.illegal\",\n      \"settings\": {\n        \"fontStyle\": \"italic\",\n        \"foreground\": \"#b31d28\"\n      }\n    },\n    {\n      \"scope\": \"invalid.unimplemented\",\n      \"settings\": {\n        \"fontStyle\": \"italic\",\n        \"foreground\": \"#b31d28\"\n      }\n    },\n    {\n      \"scope\": \"carriage-return\",\n      \"settings\": {\n        \"background\": \"#d73a49\",\n        \"content\": \"^M\",\n        \"fontStyle\": \"italic underline\",\n        \"foreground\": \"#fafbfc\"\n      }\n    },\n    {\n      \"scope\": \"message.error\",\n      \"settings\": {\n        \"foreground\": \"#b31d28\"\n      }\n    },\n    {\n      \"scope\": \"string variable\",\n      \"settings\": {\n        \"foreground\": \"#005cc5\"\n      }\n    },\n    {\n      \"scope\": [\n        \"source.regexp\",\n        \"string.regexp\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#032f62\"\n      }\n    },\n    {\n      \"scope\": [\n        \"string.regexp.character-class\",\n        \"string.regexp constant.character.escape\",\n        \"string.regexp source.ruby.embedded\",\n        \"string.regexp string.regexp.arbitrary-repitition\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#032f62\"\n      }\n    },\n    {\n      \"scope\": \"string.regexp constant.character.escape\",\n      \"settings\": {\n        \"fontStyle\": \"bold\",\n        \"foreground\": \"#22863a\"\n      }\n    },\n    {\n      \"scope\": \"support.constant\",\n      \"settings\": {\n        \"foreground\": \"#005cc5\"\n      }\n    },\n    {\n      \"scope\": \"support.variable\",\n      \"settings\": {\n        \"foreground\": \"#005cc5\"\n      }\n    },\n    {\n      \"scope\": \"meta.module-reference\",\n      \"settings\": {\n        \"foreground\": \"#005cc5\"\n      }\n    },\n    {\n      \"scope\": \"punctuation.definition.list.begin.markdown\",\n      \"settings\": {\n        \"foreground\": \"#e36209\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.heading\",\n        \"markup.heading entity.name\"\n      ],\n      \"settings\": {\n        \"fontStyle\": \"bold\",\n        \"foreground\": \"#005cc5\"\n      }\n    },\n    {\n      \"scope\": \"markup.quote\",\n      \"settings\": {\n        \"foreground\": \"#22863a\"\n      }\n    },\n    {\n      \"scope\": \"markup.italic\",\n      \"settings\": {\n        \"fontStyle\": \"italic\",\n        \"foreground\": \"#24292e\"\n      }\n    },\n    {\n      \"scope\": \"markup.bold\",\n      \"settings\": {\n        \"fontStyle\": \"bold\",\n        \"foreground\": \"#24292e\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.underline\"\n      ],\n      \"settings\": {\n        \"fontStyle\": \"underline\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.strikethrough\"\n      ],\n      \"settings\": {\n        \"fontStyle\": \"strikethrough\"\n      }\n    },\n    {\n      \"scope\": \"markup.inline.raw\",\n      \"settings\": {\n        \"foreground\": \"#005cc5\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.deleted\",\n        \"meta.diff.header.from-file\",\n        \"punctuation.definition.deleted\"\n      ],\n      \"settings\": {\n        \"background\": \"#ffeef0\",\n        \"foreground\": \"#b31d28\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.inserted\",\n        \"meta.diff.header.to-file\",\n        \"punctuation.definition.inserted\"\n      ],\n      \"settings\": {\n        \"background\": \"#f0fff4\",\n        \"foreground\": \"#22863a\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.changed\",\n        \"punctuation.definition.changed\"\n      ],\n      \"settings\": {\n        \"background\": \"#ffebda\",\n        \"foreground\": \"#e36209\"\n      }\n    },\n    {\n      \"scope\": [\n        \"markup.ignored\",\n        \"markup.untracked\"\n      ],\n      \"settings\": {\n        \"background\": \"#005cc5\",\n        \"foreground\": \"#f6f8fa\"\n      }\n    },\n    {\n      \"scope\": \"meta.diff.range\",\n      \"settings\": {\n        \"fontStyle\": \"bold\",\n        \"foreground\": \"#6f42c1\"\n      }\n    },\n    {\n      \"scope\": \"meta.diff.header\",\n      \"settings\": {\n        \"foreground\": \"#005cc5\"\n      }\n    },\n    {\n      \"scope\": \"meta.separator\",\n      \"settings\": {\n        \"fontStyle\": \"bold\",\n        \"foreground\": \"#005cc5\"\n      }\n    },\n    {\n      \"scope\": \"meta.output\",\n      \"settings\": {\n        \"foreground\": \"#005cc5\"\n      }\n    },\n    {\n      \"scope\": [\n        \"brackethighlighter.tag\",\n        \"brackethighlighter.curly\",\n        \"brackethighlighter.round\",\n        \"brackethighlighter.square\",\n        \"brackethighlighter.angle\",\n        \"brackethighlighter.quote\"\n      ],\n      \"settings\": {\n        \"foreground\": \"#586069\"\n      }\n    },\n    {\n      \"scope\": \"brackethighlighter.unmatched\",\n      \"settings\": {\n        \"foreground\": \"#b31d28\"\n      }\n    },\n    {\n      \"scope\": [\n        \"constant.other.reference.link\",\n        \"string.other.link\"\n      ],\n      \"settings\": {\n        \"fontStyle\": \"underline\",\n        \"foreground\": \"#032f62\"\n      }\n    }\n  ],\n  \"type\": \"light\"\n});\n\nexport { githubLight as default };\n","import postcss, { Root } from 'postcss'\nimport postcssNested from 'postcss-nested'\nimport { escapeRegExp } from './escaping'\n\nexport const groupWrapperElement = 'div'\nexport const groupWrapperClassName = 'expressive-code'\n\nconst preprocessor = postcss([\n\t// Prevent top-level selectors that are already scoped from being scoped twice\n\t(root: Root) => {\n\t\tconst groupWrapperScope = `.${groupWrapperClassName}`\n\t\troot.walkRules((rule) => {\n\t\t\tif (rule.parent?.parent === root) {\n\t\t\t\trule.selectors = rule.selectors.map((selector) => {\n\t\t\t\t\tif (selector.indexOf(groupWrapperScope) === 0) {\n\t\t\t\t\t\treturn selector.slice(groupWrapperScope.length).trim() || '&'\n\t\t\t\t\t}\n\t\t\t\t\treturn selector\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t},\n\t// Parse SASS-like nested selectors\n\tpostcssNested(),\n])\nconst processor = postcss([\n\t// Prevent selectors targeting the wrapper class name or top-level elements from being scoped\n\t(root: Root) => {\n\t\tconst groupWrapperScope = escapeRegExp(`.${groupWrapperClassName}`)\n\t\tconst regExpScopedTopLevel = new RegExp(`^${groupWrapperScope} .*(${groupWrapperScope}|:root|html|body)`, 'g')\n\t\troot.walkRules((rule) => {\n\t\t\trule.selectors = rule.selectors.map((selector) => selector.replace(regExpScopedTopLevel, '$1'))\n\t\t})\n\t},\n\t// Apply some simple minifications\n\t(root: Root) => {\n\t\t// Remove whitespace after the last rule\n\t\troot.raws.after = ''\n\t\t// Discard comments\n\t\troot.walkComments((comment) => {\n\t\t\tcomment.remove()\n\t\t})\n\t\t// Process rules\n\t\troot.walkRules((rule) => {\n\t\t\trule.selector = rule.selectors.join(',')\n\t\t\trule.raws.before = rule.raws.before?.trim() || ''\n\t\t\trule.raws.between = ''\n\t\t\trule.raws.after = ''\n\t\t\trule.raws.semicolon = false\n\t\t})\n\t\t// Process at-rules like `@media`\n\t\troot.walkAtRules((atRule) => {\n\t\t\tatRule.raws.before = atRule.raws.before?.trim() || ''\n\t\t\tatRule.raws.between = ''\n\t\t\tatRule.raws.after = ''\n\t\t})\n\t\t// Process declarations\n\t\troot.walkDecls((decl) => {\n\t\t\tdecl.raws.before = decl.raws.before?.trim() || ''\n\t\t\t/* c8 ignore next */\n\t\t\tdecl.raws.between = decl.raws.between?.trim() || ':'\n\t\t\tdecl.raws.value = {\n\t\t\t\tvalue: decl.value,\n\t\t\t\traw: decl.raws.value?.raw.trim() ?? decl.value.trim(),\n\t\t\t}\n\t\t})\n\t},\n])\n\nexport async function scopeAndMinifyNestedCss(css: string): Promise<string> {\n\t// @ts-expect-error PostCSS has incorrect types when using exactOptionalPropertyTypes\n\t// eslint-disable-next-line redundant-undefined/redundant-undefined\n\tconst postCssOptions: { from?: string } = { from: undefined }\n\n\t// Scope and parse the styles\n\tconst root = postcss.parse(`.${groupWrapperClassName}{${css}}`, postCssOptions)\n\n\t// Preprocess the parsed root node\n\tconst preprocessedStyles = await preprocessor.process(root, postCssOptions)\n\n\t// Process the preprocessed result (the root node is still the same)\n\tconst processedStyles = await processor.process(preprocessedStyles, postCssOptions)\n\n\treturn processedStyles.css\n}\n\nexport type PluginStyles = { pluginName: string; styles: string }\n\nconst processedStylesCache = new Map<string, string>()\n\n/**\n * Processes the CSS styles added by plugins:\n * - Deduplicates the styles.\n * - Ensures that all selectors are scoped, unless they target the root element, html or body.\n * - Minifies the CSS.\n */\nexport async function processPluginStyles(pluginStyles: PluginStyles[]): Promise<Set<string>> {\n\tconst result = new Set<string>()\n\tconst seenStyles = new Set<string>()\n\n\tfor (const { pluginName, styles } of pluginStyles) {\n\t\t// Deduplicate the current set of styles\n\t\tif (seenStyles.has(styles)) continue\n\t\tseenStyles.add(styles)\n\n\t\t// Return cached result if the current styles have already been processed\n\t\t// in a previous call to this function with the same config class name\n\t\tconst cacheKey = styles\n\t\tconst cachedStyles = processedStylesCache.get(cacheKey)\n\t\tif (cachedStyles !== undefined) {\n\t\t\tresult.add(cachedStyles)\n\t\t\tcontinue\n\t\t}\n\n\t\ttry {\n\t\t\t// Scope the plugin styles to our group wrapper and minify them\n\t\t\tconst processedCss = await scopeAndMinifyNestedCss(styles)\n\t\t\t// Add the processed styles to the result\n\t\t\tresult.add(processedCss)\n\t\t\t// Cache the processed styles\n\t\t\tprocessedStylesCache.set(cacheKey, processedCss)\n\t\t} catch (error) {\n\t\t\t/* c8 ignore next */\n\t\t\tconst msg = error instanceof Error ? error.message : (error as string)\n\t\t\tthrow new Error(`Plugin \"${pluginName}\" added CSS styles that could not be processed (error=${JSON.stringify(msg)}). Styles=\"${styles}\"`)\n\t\t}\n\t}\n\n\treturn result\n}\n\n/**\n * If `cascadeLayerName` is a non-empty string, wraps the given `css` styles\n * into a `@layer` rule with the given name.\n */\nexport function wrapInCascadeLayer(css: string, cascadeLayerName: string | undefined) {\n\tif (!cascadeLayerName || cascadeLayerName.trim() === '') return css\n\treturn `@layer ${cascadeLayerName.trim()}{${css}}`\n}\n","import type { Element } from '../hast'\nimport { h } from '../hast'\nimport { ExpressiveCodeBlock, ExpressiveCodeBlockOptions } from '../common/block'\nimport { ExpressiveCodePlugin, ResolverContext } from '../common/plugin'\nimport { ResolvedExpressiveCodeEngineConfig } from '../common/engine'\nimport { runHooks } from '../common/plugin-hooks'\nimport { groupWrapperClassName, groupWrapperElement, PluginStyles, processPluginStyles } from './css'\nimport { renderBlock } from './render-block'\nimport { isHastElement, newTypeError } from './type-checks'\n\nexport type RenderInput = ExpressiveCodeBlockOptions | ExpressiveCodeBlock | (ExpressiveCodeBlockOptions | ExpressiveCodeBlock)[]\n\nexport interface RenderOptions {\n\t/**\n\t * An optional handler function that can initialize plugin data for the\n\t * code block group before processing starts.\n\t *\n\t * Plugins can provide access to their data by exporting a const\n\t * set to a `new AttachedPluginData(...)` instance (e.g. `myPluginData`).\n\t *\n\t * You can then import the const and set `onInitGroup` to a function that\n\t * calls `myPluginData.setFor(group, { ...data... })`.\n\t */\n\tonInitGroup?: ((groupContents: GroupContents) => void) | undefined\n}\n\nexport type GroupContents = readonly { codeBlock: ExpressiveCodeBlock }[]\n\nexport type RenderedGroupContents = readonly { codeBlock: ExpressiveCodeBlock; renderedBlockAst: Element }[]\n\nexport async function renderGroup({\n\tinput,\n\toptions,\n\tdefaultLocale,\n\tconfig,\n\tplugins,\n\tcssVar,\n\tcssVarName,\n\tstyleVariants,\n}: {\n\tinput: RenderInput\n\toptions?: RenderOptions | undefined\n\tdefaultLocale: string\n\tconfig: ResolvedExpressiveCodeEngineConfig\n\tplugins: readonly ExpressiveCodePlugin[]\n} & ResolverContext) {\n\t// Ensure that the input is an array\n\tconst inputArray = Array.isArray(input) ? input : [input]\n\n\t// Validate input array, create ExpressiveCodeBlock instances if necessary,\n\t// and combine them into a frozen group array that can be passed to plugins\n\tconst groupContents: GroupContents = inputArray.map((blockOrOptions) => {\n\t\tif (blockOrOptions instanceof ExpressiveCodeBlock) {\n\t\t\treturn { codeBlock: blockOrOptions }\n\t\t} else {\n\t\t\treturn { codeBlock: new ExpressiveCodeBlock(blockOrOptions) }\n\t\t}\n\t})\n\tObject.freeze(groupContents)\n\n\t// Allow the caller to initialize group data after the group has been created\n\toptions?.onInitGroup?.(groupContents)\n\n\t// Render all blocks\n\tconst renderedGroupContents = groupContents as RenderedGroupContents\n\tconst pluginStyles: PluginStyles[] = []\n\tfor (const groupContent of renderedGroupContents) {\n\t\t// Render the current block\n\t\tconst { renderedBlockAst, blockStyles } = await renderBlock({\n\t\t\tcodeBlock: groupContent.codeBlock,\n\t\t\tgroupContents,\n\t\t\tlocale: groupContent.codeBlock.locale || defaultLocale,\n\t\t\tconfig,\n\t\t\tplugins,\n\t\t\tcssVar,\n\t\t\tcssVarName,\n\t\t\tstyleVariants,\n\t\t})\n\n\t\t// Store the rendered AST on the group content object\n\t\tgroupContent.renderedBlockAst = renderedBlockAst\n\n\t\t// Add the returned block styles to the group styles\n\t\tpluginStyles.push(...blockStyles)\n\t}\n\n\t// Combine rendered blocks into a group AST\n\tconst groupRenderData = {\n\t\tgroupAst: buildGroupAstFromRenderedBlocks(renderedGroupContents.map(({ renderedBlockAst }) => renderedBlockAst)),\n\t}\n\n\t// Run postprocessing hooks\n\tconst runHooksContext = {\n\t\tplugins,\n\t\tconfig,\n\t}\n\tawait runHooks('postprocessRenderedBlockGroup', runHooksContext, async ({ hookFn, plugin }) => {\n\t\tawait hookFn({\n\t\t\trenderedGroupContents,\n\t\t\tpluginStyles: pluginStyles,\n\t\t\taddStyles: (styles: string) => pluginStyles.push({ pluginName: plugin.name, styles }),\n\t\t\trenderData: groupRenderData,\n\t\t})\n\t\t// The hook may have replaced the group AST though, so ensure it's still valid\n\t\tif (!isHastElement(groupRenderData.groupAst)) {\n\t\t\tthrow newTypeError('hast Element', groupRenderData.groupAst, 'groupAst')\n\t\t}\n\t})\n\n\treturn {\n\t\trenderedGroupAst: groupRenderData.groupAst,\n\t\trenderedGroupContents,\n\t\tstyles: await processPluginStyles(pluginStyles),\n\t}\n}\n\n/**\n * Creates the group AST wrapper element with a class,\n * allowing us to scope CSS styles that are added by plugins.\n */\nfunction buildGroupAstFromRenderedBlocks(renderedBlocks: Element[]): Element {\n\treturn h(`${groupWrapperElement}.${groupWrapperClassName}`, renderedBlocks)\n}\n","import { TinyColor, readability } from '@ctrl/tinycolor'\nimport {\n\tRgbaColor,\n\tHsl,\n\tOklch,\n\thslToRgba,\n\tlabToRgba,\n\tlchabToRgba,\n\toklchToRgba,\n\tparseCssLabColor,\n\tparseCssLchColor,\n\tparseCssOklchColor,\n\trgbaToOklch,\n} from '../internal/color-spaces'\nimport { binarySearch } from '../internal/search-algorithms'\nimport { StyleVariant } from '../common/style-variants'\n\n/**\n * Overrides the alpha value of a color with the given value.\n * Values should be between 0 and 1.\n */\nexport function setAlpha(input: string, newAlpha: number) {\n\treturn withParsedColor(input, (color) => {\n\t\treturn toHexColor(color.setAlpha(newAlpha))\n\t})\n}\n\n/**\n * Multiplies the existing alpha value of a color with the given factor.\n * Automatically limits the resulting alpha value to the range 0 to 1.\n */\nexport function multiplyAlpha(input: string, factor: number) {\n\treturn withParsedColor(input, (color) => {\n\t\treturn toHexColor(color.setAlpha(minMaxRounded(color.getAlpha() * factor)))\n\t})\n}\n\n/**\n * Returns the luminance of a color.\n * Luminance values are between 0 and 1.\n */\nexport function getLuminance(input: string) {\n\treturn toTinyColor(input).getLuminance()\n}\n\n/**\n * Mixes a color with white or black to achieve the desired luminance.\n * Luminance values should be between 0 and 1.\n */\nexport function setLuminance(input: string, targetLuminance: number) {\n\treturn withParsedColor(input, (color) => {\n\t\ttargetLuminance = minMaxRounded(targetLuminance)\n\t\tconst increasing = targetLuminance > color.getLuminance()\n\t\tconst mixColor = increasing ? '#fff' : '#000'\n\t\tconst mixAmount = binarySearch({\n\t\t\tgetValueFn: (amount) => {\n\t\t\t\treturn toTinyColor(color)\n\t\t\t\t\t.mix(mixColor, amount * 100)\n\t\t\t\t\t.getLuminance()\n\t\t\t},\n\t\t\ttargetValue: targetLuminance,\n\t\t\tpreferHigher: targetLuminance > 0 && targetLuminance < 1 ? increasing : undefined,\n\t\t\ttolerance: 1 / 256,\n\t\t\t// Ensure that the binary search range matches the luminance target direction\n\t\t\tlow: increasing ? 0 : 1,\n\t\t\thigh: increasing ? 1 : 0,\n\t\t})\n\t\treturn toHexColor(color.mix(mixColor, mixAmount * 100))\n\t})\n}\n\n/**\n * Lightens a color by the given amount.\n * Automatically limits the resulting lightness value to the range 0 to 1.\n */\nexport function lighten(input: string, amount: number) {\n\treturn withParsedColor(input, (color) => {\n\t\tconst hsl = color.toHsl()\n\t\tconst l = minMaxRounded(hsl.l)\n\t\tconst { h, s, a: alpha } = hsl\n\t\treturn toHexColor(toTinyColor({ mode: 'hsl', h, s, l: minMaxRounded(l + l * amount), alpha }))\n\t})\n}\n\n/**\n * Darkens a color by the given amount.\n * Automatically limits the resulting lightness value to the range 0 to 1.\n */\nexport function darken(input: string, amount: number) {\n\treturn lighten(input, -amount)\n}\n\n/**\n * Mixes the second color into the first color by the given amount.\n * Amount should be between 0 and 1.\n */\nexport function mix(input: string, mixinInput: string, amount: number) {\n\treturn withParsedColor(input, (color) => {\n\t\tconst mixinColor = toTinyColor(mixinInput)\n\t\t// TinyColor's mix() method expects a value between 0 and 100\n\t\tconst mixAmount = minMaxRounded(amount * 100, 0, 100)\n\t\treturn toHexColor(color.mix(mixinColor, mixAmount))\n\t})\n}\n\n/**\n * Computes how the first color would look on top of the second color.\n */\nexport function onBackground(input: string, background: string) {\n\treturn withParsedColor(\n\t\tinput,\n\t\t(color) => {\n\t\t\tconst backgroundColor = toTinyColor(background)\n\t\t\treturn toHexColor(color.onBackground(backgroundColor))\n\t\t},\n\t\tbackground\n\t)\n}\n\nexport function getColorContrast(color1: string, color2: string) {\n\tconst color = toTinyColor(color1)\n\tconst backgroundColor = toTinyColor(color2)\n\treturn readability(color, backgroundColor)\n}\n\nexport function getColorContrastOnBackground(input: string, background: string) {\n\tconst color = toTinyColor(input)\n\tconst backgroundColor = toTinyColor(background)\n\treturn readability(color.onBackground(backgroundColor), backgroundColor)\n}\n\n/**\n * Modifies the luminance and/or the alpha value of a color to ensure its color contrast\n * on the given background color is within the given range.\n *\n * - If the contrast is too low, the luminance is either increased or decreased first,\n *   and then the alpha value is increased (if required).\n * - If the contrast is too high, only the alpha value is decreased.\n *\n * If the target contrast cannot be reached, the function will try to get as close as possible.\n */\nexport function ensureColorContrastOnBackground(input: string, background: string, minContrast = 5.5, maxContrast = 22): string {\n\treturn withParsedColor(input, (color) => {\n\t\treturn withParsedColor(\n\t\t\tbackground,\n\t\t\t(backgroundColor) => {\n\t\t\t\tconst hexBackgroundColor = toHexColor(backgroundColor)\n\t\t\t\tlet newColor = toTinyColor(color)\n\t\t\t\tlet curContrast = readability(newColor.onBackground(backgroundColor), backgroundColor)\n\n\t\t\t\t// If the current contrast is too low, check if we need to change the luminance\n\t\t\t\tif (curContrast < minContrast) {\n\t\t\t\t\tconst contrastWithoutAlpha = readability(newColor, backgroundColor)\n\t\t\t\t\tif (contrastWithoutAlpha < minContrast) {\n\t\t\t\t\t\t// The contrast is also too low when fully opaque, so change the luminance\n\t\t\t\t\t\tnewColor = toTinyColor(changeLuminanceToReachColorContrast(toHexColor(newColor), hexBackgroundColor, minContrast))\n\t\t\t\t\t\tcurContrast = readability(newColor.onBackground(backgroundColor), backgroundColor)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Try to modify the alpha value to reach the desired contrast\n\t\t\t\tif (curContrast < minContrast || curContrast > maxContrast) {\n\t\t\t\t\tnewColor = toTinyColor(changeAlphaToReachColorContrast(toHexColor(newColor), hexBackgroundColor, minContrast, maxContrast))\n\t\t\t\t}\n\n\t\t\t\treturn toHexColor(newColor)\n\t\t\t},\n\t\t\ttoHexColor(color)\n\t\t)\n\t})\n}\n\nexport function changeLuminanceToReachColorContrast(input1: string, input2: string, minContrast = 6): string {\n\tconst color1 = toTinyColor(input1)\n\tconst color2 = toTinyColor(input2)\n\tconst oldContrast = readability(color1, color2)\n\tif (oldContrast >= minContrast) return toHexColor(color1)\n\n\tconst color1L = color1.getLuminance()\n\tconst color2L = color2.getLuminance()\n\tconst lightenTargetL = (color2L + 0.05) * minContrast - 0.05\n\tconst darkenTargetL = (color2L + 0.05) / minContrast - 0.05\n\tconst lightenedColor = setLuminance(input1, lightenTargetL)\n\tconst darkenedColor = setLuminance(input1, darkenTargetL)\n\tconst lightenedContrast = readability(lightenedColor, color2)\n\tconst darkenedContrast = readability(darkenedColor, color2)\n\n\t// If we couldn't improve the contrast, return the old color\n\tif (lightenedContrast <= oldContrast && darkenedContrast <= oldContrast) return toHexColor(color1)\n\n\t// First try to achieve the desired minimum contrast without inverting\n\tif (color1L >= color2L && lightenedContrast >= minContrast) return lightenedColor\n\tif (color1L < color2L && darkenedContrast >= minContrast) return darkenedColor\n\n\t// If that didn't work, return the color that achieves the best contrast\n\treturn lightenedContrast > darkenedContrast ? lightenedColor : darkenedColor\n}\n\nexport function changeAlphaToReachColorContrast(input: string, background: string, minContrast = 6, maxContrast = 22) {\n\tconst color = toTinyColor(input)\n\tconst backgroundColor = toTinyColor(background)\n\tconst colorOnBackground = color.onBackground(backgroundColor)\n\tconst curContrast = readability(colorOnBackground, backgroundColor)\n\tif (curContrast >= minContrast && curContrast <= maxContrast) return toHexColor(color)\n\n\tconst newAlpha = binarySearch({\n\t\tgetValueFn: (alpha) => {\n\t\t\tconst newColor = toTinyColor(color).setAlpha(alpha)\n\t\t\tconst onBg = newColor.onBackground(backgroundColor)\n\t\t\tconst result = readability(onBg, backgroundColor)\n\t\t\treturn result\n\t\t},\n\t\ttargetValue: curContrast < minContrast ? minContrast : maxContrast,\n\t\tpreferHigher: curContrast < minContrast,\n\t\ttolerance: 1 / 256,\n\t\tlow: 0.15,\n\t\thigh: 1,\n\t})\n\n\treturn setAlpha(toHexColor(color), newAlpha)\n}\n\n/**\n * Given any number of input colors, which may include CSS variables with optional fallbacks,\n * returns the first static color.\n *\n * Returns `undefined` if no parseable static color can be found.\n */\nexport function getFirstStaticColor(...inputs: (string | undefined)[]) {\n\tconst extractFallbackFromCssVar = (input: string) => {\n\t\tconst match = input.match(/^\\s*var\\([^,]+,\\s*(.+?)\\s*\\)\\s*$/i)\n\t\treturn match ? match[1] : undefined\n\t}\n\tconst isValid = (input: string) => toTinyColor(input)?.isValid\n\tfor (const input of inputs) {\n\t\tif (!input) continue\n\t\t// First, try the input as a static color\n\t\tif (isValid(input)) return input\n\t\t// Then, try the input as a CSS variable with fallback (supports nested fallbacks)\n\t\tlet cssVarFallback = extractFallbackFromCssVar(input)\n\t\twhile (cssVarFallback) {\n\t\t\tif (isValid(cssVarFallback)) return cssVarFallback\n\t\t\tcssVarFallback = extractFallbackFromCssVar(cssVarFallback)\n\t\t}\n\t}\n\treturn undefined\n}\n\n/**\n * Determine a static background color based on the given style variant,\n * trying to resolve fallback values of CSS variables if necessary.\n *\n * This color is intended to be used for contrast calculations, not as an actual background color.\n */\nexport function getStaticBackgroundColor(styleVariant: StyleVariant) {\n\t// Try to find an actual static color based on the given style variant\n\tconst color = getFirstStaticColor(styleVariant.resolvedStyleSettings.get('codeBackground'), styleVariant.theme.bg)\n\t// If no color was found, use white for light themes and dark grey for dark themes\n\treturn color ?? (styleVariant.theme.type === 'dark' ? '#202020' : '#fff')\n}\n\nexport type ChromaticRecolorTarget = {\n\t/**\n\t * The target hue in degrees (0 – 360).\n\t */\n\thue: number\n\t/**\n\t * The target chroma (0 – 0.4).\n\t *\n\t * If the input color's lightness is very high, the resulting chroma may be lower\n\t * than this value. This avoids results that appear too saturated in comparison\n\t * to the input color.\n\t */\n\tchroma: number\n\t/**\n\t * The lightness (0 – 1) that the target chroma was measured at.\n\t *\n\t * If given, the chroma will be adjusted relative to this lightness\n\t * before applying it to the input color.\n\t */\n\tchromaMeasuredAtLightness?: number | undefined\n}\n\n/**\n * Adjusts the input color based on the given target color while keeping\n * the input lightness unchanged. Uses the OKLCH color space to ensure\n * the resulting color is perceptually similar to the input color.\n *\n * The target color can either be defined as a string (e.g. a hex color),\n * or as an object with `hue` and `chroma`.\n *\n * Note that the resulting color's chroma may be lower than the target value\n * for input colors with very high lightness. This avoids results\n * that appear too saturated in comparison to the input color.\n */\nexport function chromaticRecolor(input: string, target: string | ChromaticRecolorTarget) {\n\tlet targetHue: number\n\tlet targetChroma: number\n\tlet targetChromaMeasuredAtLightness: number | undefined\n\tif (typeof target === 'string') {\n\t\tconst targetOklch = rgbaToOklch(toTinyColor(target))\n\t\ttargetHue = targetOklch.h ?? 0\n\t\ttargetChroma = targetOklch.c\n\t\ttargetChromaMeasuredAtLightness = targetOklch.l\n\t} else {\n\t\ttargetHue = target.hue\n\t\ttargetChroma = target.chroma\n\t\ttargetChromaMeasuredAtLightness = target.chromaMeasuredAtLightness\n\t}\n\treturn withParsedColor(input, (color) => {\n\t\tconst oklch = rgbaToOklch(color)\n\n\t\t// Set new hue\n\t\toklch.h = targetHue\n\n\t\t// Determine the maximum chroma for the input lightness\n\t\tconst maxChromaForInputLightness = rgbaToOklch(oklchToRgba({ ...oklch, c: 0.4 })).c\n\n\t\t// Calculate new chroma\n\t\tlet newChroma: number\n\t\tif (targetChromaMeasuredAtLightness !== undefined) {\n\t\t\t// As the target color's lightness was given, we can use it to calculate\n\t\t\t// its relative chroma, and apply the same factor to the input lightness\n\t\t\tconst maxChromaForTargetLightness = rgbaToOklch(oklchToRgba({ ...oklch, c: 0.4, l: targetChromaMeasuredAtLightness })).c\n\t\t\tconst relativeTargetChroma = Math.min(targetChroma, maxChromaForTargetLightness) / maxChromaForTargetLightness\n\t\t\tnewChroma = maxChromaForInputLightness * relativeTargetChroma\n\t\t} else {\n\t\t\t// As the target color's lightness was not given, we can only\n\t\t\t// clamp the target chroma to the maximum value for the input lightness\n\t\t\tnewChroma = Math.min(targetChroma, maxChromaForInputLightness)\n\t\t}\n\n\t\t// Avoid too high chroma values for very light colors\n\t\tconst linearDecrease = (i: number, start: number, end: number) => Math.max(0, Math.min(1, 1 - (i - start) / (end - start)))\n\t\t// const lowLightnessFactor = (1 - 0.6) + linearDecrease(oklch.l, 0.5, 0.3) * 0.6\n\t\tconst highLightnessFactor = linearDecrease(oklch.l, 0.95, 0.99)\n\t\toklch.c = newChroma * highLightnessFactor\n\n\t\treturn toHexColor(toTinyColor(oklchToRgba(oklch, true)))\n\t})\n}\n\nfunction withParsedColor(input: string, transform: (color: TinyColor) => string, fallback?: string) {\n\tconst color = input && toTinyColor(input)\n\tif (!color || !color.isValid) {\n\t\tconst fallbackOrInput = fallback !== undefined ? fallback : input\n\t\treturn !fallbackOrInput || typeof fallbackOrInput === 'string' ? fallbackOrInput : toHexColor(fallbackOrInput)\n\t}\n\treturn transform(color)\n}\n\nfunction toTinyColor(input: string | TinyColor | RgbaColor | Hsl | Oklch) {\n\tif (input instanceof TinyColor) {\n\t\t// We use this instead of clone() because clone performs unwanted rounding\n\t\treturn new TinyColor(input.toRgb())\n\t}\n\tif (typeof input === 'string') {\n\t\t// Detect CSS lab() color notation as input and convert it to RGBA\n\t\t// as this color space is not supported by TinyColor yet\n\t\tconst labColor = parseCssLabColor(input)\n\t\tif (labColor) {\n\t\t\treturn new TinyColor(labToRgba(labColor))\n\t\t}\n\t\t// Detect CSS lch() color notation as input and convert it to RGBA\n\t\t// as this color space is not supported by TinyColor yet\n\t\tconst lchColor = parseCssLchColor(input)\n\t\tif (lchColor) {\n\t\t\treturn new TinyColor(lchabToRgba(lchColor))\n\t\t}\n\t\t// Detect CSS oklch() color notation as input and convert it to RGBA\n\t\t// as this color space is not supported by TinyColor yet\n\t\tconst oklchColor = parseCssOklchColor(input)\n\t\tif (oklchColor) {\n\t\t\treturn new TinyColor(oklchToRgba(oklchColor))\n\t\t}\n\t\treturn new TinyColor(input)\n\t}\n\t// Detect known color object types\n\tif (typeof input === 'object' && 'mode' in input) {\n\t\t// HSL\n\t\tif (input.mode === 'hsl') return new TinyColor(hslToRgba(input))\n\t\t// OKLCH\n\t\tif (input.mode === 'oklch') return new TinyColor(oklchToRgba(input))\n\t}\n\treturn new TinyColor(input)\n}\n\nexport function toHexColor(input: TinyColor | string) {\n\tconst color = input instanceof TinyColor ? input : toTinyColor(input)\n\treturn color.toHexShortString()\n}\n\nexport function toRgbaString(input: string) {\n\treturn toTinyColor(input).toRgbString().toLowerCase()\n}\n\nfunction roundFloat(number: number, decimalPoints: number): number {\n\tconst decimal = Math.pow(10, decimalPoints)\n\treturn Math.round(number * decimal) / decimal\n}\n\nfunction minMaxRounded(number: number, min = 0, max = 1, decimalPoints = 3) {\n\treturn Math.max(min, Math.min(max, roundFloat(number, decimalPoints)))\n}\n","const fn = (c = 0) => {\n\tconst abs = Math.abs(c);\n\tif (abs <= 0.04045) {\n\t\treturn c / 12.92;\n\t}\n\treturn (Math.sign(c) || 1) * Math.pow((abs + 0.055) / 1.055, 2.4);\n};\n\nconst convertRgbToLrgb = ({ r, g, b, alpha }) => {\n\tlet res = {\n\t\tmode: 'lrgb',\n\t\tr: fn(r),\n\t\tg: fn(g),\n\t\tb: fn(b)\n\t};\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertRgbToLrgb;\n","const fn = (c = 0) => {\n\tconst abs = Math.abs(c);\n\tif (abs > 0.0031308) {\n\t\treturn (Math.sign(c) || 1) * (1.055 * Math.pow(abs, 1 / 2.4) - 0.055);\n\t}\n\treturn c * 12.92;\n};\n\nconst convertLrgbToRgb = ({ r, g, b, alpha }, mode = 'rgb') => {\n\tlet res = {\n\t\tmode,\n\t\tr: fn(r),\n\t\tg: fn(g),\n\t\tb: fn(b)\n\t};\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertLrgbToRgb;\n","const normalizeHue = hue => ((hue = hue % 360) < 0 ? hue + 360 : hue);\n\nexport default normalizeHue;\n","import normalizeHue from '../util/normalizeHue.js';\n\n/* \n\tReferences: \n\t\t* https://drafts.csswg.org/css-color/#lab-to-lch\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n*/\nconst convertLabToLch = ({ l, a, b, alpha }, mode = 'lch') => {\n\tif (a === undefined) a = 0;\n\tif (b === undefined) b = 0;\n\tlet c = Math.sqrt(a * a + b * b);\n\tlet res = { mode, l, c };\n\tif (c) res.h = normalizeHue((Math.atan2(b, a) * 180) / Math.PI);\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertLabToLch;\n","/* \n\tReferences: \n\t\t* https://drafts.csswg.org/css-color/#lch-to-lab\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n*/\nconst convertLchToLab = ({ l, c, h, alpha }, mode = 'lab') => {\n\tif (h === undefined) h = 0;\n\tlet res = {\n\t\tmode,\n\t\tl,\n\t\ta: c ? c * Math.cos((h / 180) * Math.PI) : 0,\n\t\tb: c ? c * Math.sin((h / 180) * Math.PI) : 0\n\t};\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertLchToLab;\n","import normalizeHue from '../util/normalizeHue.js';\n// Based on: https://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\n\nexport default function convertHslToRgb({ h, s, l, alpha }) {\n\th = normalizeHue(h !== undefined ? h : 0);\n\tif (s === undefined) s = 0;\n\tif (l === undefined) l = 0;\n\tlet m1 = l + s * (l < 0.5 ? l : 1 - l);\n\tlet m2 = m1 - (m1 - l) * 2 * Math.abs(((h / 60) % 2) - 1);\n\tlet res;\n\tswitch (Math.floor(h / 60)) {\n\t\tcase 0:\n\t\t\tres = { r: m1, g: m2, b: 2 * l - m1 };\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tres = { r: m2, g: m1, b: 2 * l - m1 };\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tres = { r: 2 * l - m1, g: m1, b: m2 };\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tres = { r: 2 * l - m1, g: m2, b: m1 };\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tres = { r: m2, g: 2 * l - m1, b: m1 };\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tres = { r: m1, g: 2 * l - m1, b: m2 };\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tres = { r: 2 * l - m1, g: 2 * l - m1, b: 2 * l - m1 };\n\t}\n\tres.mode = 'rgb';\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n}\n","const convertLrgbToOklab = ({ r, g, b, alpha }) => {\n\tif (r === undefined) r = 0;\n\tif (g === undefined) g = 0;\n\tif (b === undefined) b = 0;\n\tlet L = Math.cbrt(\n\t\t0.41222147079999993 * r + 0.5363325363 * g + 0.0514459929 * b\n\t);\n\tlet M = Math.cbrt(\n\t\t0.2119034981999999 * r + 0.6806995450999999 * g + 0.1073969566 * b\n\t);\n\tlet S = Math.cbrt(\n\t\t0.08830246189999998 * r + 0.2817188376 * g + 0.6299787005000002 * b\n\t);\n\n\tlet res = {\n\t\tmode: 'oklab',\n\t\tl: 0.2104542553 * L + 0.793617785 * M - 0.0040720468 * S,\n\t\ta: 1.9779984951 * L - 2.428592205 * M + 0.4505937099 * S,\n\t\tb: 0.0259040371 * L + 0.7827717662 * M - 0.808675766 * S\n\t};\n\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\n\treturn res;\n};\n\nexport default convertLrgbToOklab;\n","import convertRgbToLrgb from '../lrgb/convertRgbToLrgb.js';\nimport convertLrgbToOklab from './convertLrgbToOklab.js';\n\nconst convertRgbToOklab = rgb => {\n\tlet res = convertLrgbToOklab(convertRgbToLrgb(rgb));\n\tif (rgb.r === rgb.b && rgb.b === rgb.g) {\n\t\tres.a = res.b = 0;\n\t}\n\treturn res;\n};\n\nexport default convertRgbToOklab;\n","const convertOklabToLrgb = ({ l, a, b, alpha }) => {\n\tif (l === undefined) l = 0;\n\tif (a === undefined) a = 0;\n\tif (b === undefined) b = 0;\n\tlet L = Math.pow(\n\t\tl * 0.99999999845051981432 +\n\t\t\t0.39633779217376785678 * a +\n\t\t\t0.21580375806075880339 * b,\n\t\t3\n\t);\n\tlet M = Math.pow(\n\t\tl * 1.0000000088817607767 -\n\t\t\t0.1055613423236563494 * a -\n\t\t\t0.063854174771705903402 * b,\n\t\t3\n\t);\n\tlet S = Math.pow(\n\t\tl * 1.0000000546724109177 -\n\t\t\t0.089484182094965759684 * a -\n\t\t\t1.2914855378640917399 * b,\n\t\t3\n\t);\n\n\tlet res = {\n\t\tmode: 'lrgb',\n\t\tr:\n\t\t\t+4.076741661347994 * L -\n\t\t\t3.307711590408193 * M +\n\t\t\t0.230969928729428 * S,\n\t\tg:\n\t\t\t-1.2684380040921763 * L +\n\t\t\t2.6097574006633715 * M -\n\t\t\t0.3413193963102197 * S,\n\t\tb:\n\t\t\t-0.004196086541837188 * L -\n\t\t\t0.7034186144594493 * M +\n\t\t\t1.7076147009309444 * S\n\t};\n\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\n\treturn res;\n};\n\nexport default convertOklabToLrgb;\n","import convertLrgbToRgb from '../lrgb/convertLrgbToRgb.js';\nimport convertOklabToLrgb from './convertOklabToLrgb.js';\n\nconst convertOklabToRgb = c => convertLrgbToRgb(convertOklabToLrgb(c));\n\nexport default convertOklabToRgb;\n","export function binarySearch({\n\tgetValueFn,\n\ttargetValue,\n\tpreferHigher,\n\ttolerance = 0.1,\n\tlow = 0,\n\thigh = 1,\n\tminChangeFactor = 0.001,\n\tmaxIterations = 25,\n}: {\n\tgetValueFn: (mid: number) => number\n\ttargetValue: number\n\t/**\n\t * Determines the preferred direction in relation to `targetValue`. Will be used in two cases:\n\t * - The calculated value is within `tolerance` of `targetValue`.\n\t * - The midpoint does not change enough between iterations anymore (see `minChangeFactor`).\n\t *\n\t * If undefined, the direction will not be taken into account.\n\t */\n\tpreferHigher?: boolean | undefined\n\ttolerance?: number | undefined\n\tlow?: number | undefined\n\thigh?: number | undefined\n\t/**\n\t * If the midpoint changes less than `minChangeFactor * Math.abs(high - low)`\n\t * between iterations, the search will stop as soon as the value returned by `getValueFn`\n\t * is in the preferred direction in relation to `targetValue`.\n\t */\n\tminChangeFactor?: number | undefined\n\tmaxIterations?: number | undefined\n}) {\n\tconst epsilon = minChangeFactor * Math.abs(high - low)\n\tlet iterations = 0\n\tlet mid: number\n\tlet lastMid: number | undefined\n\n\twhile (((mid = (low + high) / 2), iterations < maxIterations)) {\n\t\tconst currentValue = getValueFn(mid)\n\n\t\tconst resultIsWithinTolerance = Math.abs(currentValue - targetValue) <= tolerance\n\t\tconst resultIsInPreferredDirection = preferHigher === undefined ? true : preferHigher ? currentValue > targetValue : currentValue < targetValue\n\t\tconst midChangedLessThanEpsilon = lastMid !== undefined && Math.abs(lastMid - mid) < epsilon\n\n\t\tif (resultIsInPreferredDirection && (resultIsWithinTolerance || midChangedLessThanEpsilon)) {\n\t\t\treturn mid\n\t\t} else if (currentValue < targetValue) {\n\t\t\tlow = mid\n\t\t} else {\n\t\t\thigh = mid\n\t\t}\n\n\t\titerations++\n\t\tlastMid = mid\n\t}\n\n\treturn mid\n}\n\n/**\n * Searches the range between `low` and `high` to find the value closest to `high`\n * that `checkFn` returns `true` for.\n *\n * Returns `undefined` if no such value was found.\n */\nexport function bisect({\n\tcheckFn,\n\tlow = 0,\n\thigh = 1,\n\t/**\n\t * If the midpoint changes less than `minChangeFactor * Math.abs(high - low)`\n\t * between iterations, the search will stop and return the highest value\n\t * that `checkFn` returned `true` for.\n\t */\n\tminChangeFactor = 0.001,\n\tmaxIterations = 25,\n}: {\n\tcheckFn: (mid: number) => boolean\n\tlow?: number | undefined\n\thigh?: number | undefined\n\t/**\n\t * If the midpoint changes less than `minChangeFactor * Math.abs(high - low)`\n\t * between iterations, the search will stop and return the last value that `checkFn`\n\t * returned `true` for.\n\t */\n\tminChangeFactor?: number | undefined\n\tmaxIterations?: number | undefined\n}) {\n\tconst epsilon = minChangeFactor * Math.abs(high - low)\n\tlet iterations = 0\n\tlet highestValid: number | undefined\n\tlet mid: number\n\tlet lastMid: number | undefined\n\n\twhile (((mid = (low + high) / 2), iterations < maxIterations)) {\n\t\tconst isValid = checkFn(mid)\n\n\t\tif (isValid) {\n\t\t\thighestValid = mid\n\t\t\tlow = mid\n\t\t} else {\n\t\t\thigh = mid\n\t\t}\n\n\t\tconst midChangedLessThanEpsilon = lastMid !== undefined && Math.abs(lastMid - mid) < epsilon\n\t\tif (midChangedLessThanEpsilon) return highestValid\n\n\t\titerations++\n\t\tlastMid = mid\n\t}\n\n\treturn highestValid\n}\n","import type { Rgb, Hsl, Oklch } from 'culori/fn'\nimport { convertHslToRgb, convertRgbToHsl, convertLchToLab, convertLabToLch, convertOklabToRgb, convertRgbToOklab } from 'culori/fn'\nimport { bisect } from './search-algorithms'\n\n/**\n * RGBA color space, with all color channels ranging from 0 to 255,\n * and alpha ranging from 0 to 1.\n */\nexport type RgbaColor = {\n\tr: number\n\tg: number\n\tb: number\n\ta?: number | undefined\n}\n\n/**\n * LAB color space, with all color channels ranging from 0 to 100,\n * and alpha ranging from 0 to 1.\n */\nexport type LabColor = {\n\tl: number\n\ta: number\n\tb: number\n\talpha?: number | undefined\n}\n\nexport type LchColor = {\n\tl: number\n\tc: number\n\th: number | undefined\n\talpha?: number | undefined\n}\n\nexport { Hsl, Oklch }\n\n// White point constants\nexport const D65 = [0.3127 / 0.329, 1, (1 - 0.3127 - 0.329) / 0.329]\nexport const D50 = [0.3457 / 0.3585, 1, (1 - 0.3457 - 0.3585) / 0.3585]\nconst m = [\n\t[3.240969941904521, -1.537383177570093, -0.498610760293],\n\t[-0.96924363628087, 1.87596750150772, 0.041555057407175],\n\t[0.055630079696993, -0.20397695888897, 1.056971514242878],\n]\nconst minv = [\n\t[0.41239079926595, 0.35758433938387, 0.18048078840183],\n\t[0.21263900587151, 0.71516867876775, 0.072192315360733],\n\t[0.019330818715591, 0.11919477979462, 0.95053215224966],\n]\n\nfunction rgbToXyz(rgb: { r: number; g: number; b: number }) {\n\tconst srgbToLinear = (v: number) => {\n\t\tv /= 255\n\t\treturn v > 0.04045 ? Math.pow((v + 0.055) / 1.055, 2.4) : v / 12.92\n\t}\n\n\tconst [r, g, b] = [rgb.r, rgb.g, rgb.b].map(srgbToLinear)\n\n\treturn {\n\t\tx: (r * minv[0][0] + g * minv[0][1] + b * minv[0][2]) * 100,\n\t\ty: (r * minv[1][0] + g * minv[1][1] + b * minv[1][2]) * 100,\n\t\tz: (r * minv[2][0] + g * minv[2][1] + b * minv[2][2]) * 100,\n\t}\n}\n\nfunction xyzToRgb(xyz: { x: number; y: number; z: number }) {\n\tconst [x, y, z] = [xyz.x, xyz.y, xyz.z].map((v) => v / 100)\n\n\tconst linearToSrgb = (v: number) => (v > 0.0031308 ? 1.055 * Math.pow(v, 1 / 2.4) - 0.055 : 12.92 * v)\n\n\tconst r = x * m[0][0] + y * m[0][1] + z * m[0][2]\n\tconst g = x * m[1][0] + y * m[1][1] + z * m[1][2]\n\tconst b = x * m[2][0] + y * m[2][1] + z * m[2][2]\n\n\treturn {\n\t\tr: linearToSrgb(r) * 255,\n\t\tg: linearToSrgb(g) * 255,\n\t\tb: linearToSrgb(b) * 255,\n\t}\n}\n\nfunction xyzToLab(xyz: { x: number; y: number; z: number }, illuminant: number[] = D65) {\n\tconst transform = (v: number, whitepoint: number) => {\n\t\tv /= 100\n\t\tv /= whitepoint\n\t\treturn v > 0.008856 ? Math.cbrt(v) : 7.787037 * v + 16 / 116\n\t}\n\n\tconst x = transform(xyz.x, illuminant[0])\n\tconst y = transform(xyz.y, illuminant[1])\n\tconst z = transform(xyz.z, illuminant[2])\n\n\treturn {\n\t\tl: (1.16 * y - 0.16) * 100,\n\t\ta: 5 * (x - y) * 100,\n\t\tb: 2 * (y - z) * 100,\n\t}\n}\n\nfunction labToXyz(lab: { l: number; a: number; b: number }, illuminant: number[] = D65) {\n\tconst [l, a, b] = [lab.l, lab.a, lab.b].map((v) => v / 100)\n\n\tconst y = (l + 0.16) / 1.16\n\tconst x = a / 5 + y\n\tconst z = y - b / 2\n\n\tconst transform = (v: number, whitepoint: number) => {\n\t\tconst pow = Math.pow(v, 3)\n\t\treturn (pow > 0.008856 ? pow : (v - 16 / 116) / 7.787037) * whitepoint\n\t}\n\n\treturn {\n\t\tx: transform(x, illuminant[0]) * 100,\n\t\ty: transform(y, illuminant[1]) * 100,\n\t\tz: transform(z, illuminant[2]) * 100,\n\t}\n}\n\nfunction lchabToLab(lch: LchColor): LabColor {\n\treturn {\n\t\tl: lch.l,\n\t\ta: lch.c * Math.cos(((lch.h ?? 0) * Math.PI) / 180),\n\t\tb: lch.c * Math.sin(((lch.h ?? 0) * Math.PI) / 180),\n\t\talpha: lch.alpha,\n\t}\n}\n\nfunction labToLchab(lab: LabColor): LchColor {\n\treturn {\n\t\tl: lab.l,\n\t\tc: Math.sqrt(lab.a * lab.a + lab.b * lab.b),\n\t\th: normalizeAngle((Math.atan2(lab.b, lab.a) * 180) / Math.PI),\n\t\talpha: lab.alpha,\n\t}\n}\n\nexport function rgbaToLab(rgb: RgbaColor, illuminant: number[] = D65): LabColor {\n\tconst xyz = rgbToXyz(rgb)\n\treturn {\n\t\t...xyzToLab(xyz, illuminant),\n\t\talpha: rgb.a,\n\t}\n}\n\nexport function labToRgba(lab: LabColor, illuminant: number[] = D65): RgbaColor {\n\tconst xyz = labToXyz(lab, illuminant)\n\treturn {\n\t\t...xyzToRgb(xyz),\n\t\ta: lab.alpha,\n\t}\n}\n\nexport function rgbaToLchab(rgb: RgbaColor, illuminant: number[] = D65): LchColor {\n\treturn labToLchab(rgbaToLab(rgb, illuminant))\n}\n\nexport function lchabToRgba(lch: LchColor, illuminant: number[] = D65): RgbaColor {\n\treturn labToRgba(lchabToLab(lch), illuminant)\n}\n\nfunction rgbaToCulori(rgba: RgbaColor): Rgb {\n\tconst { r, g, b, a } = rgba\n\treturn {\n\t\tmode: 'rgb',\n\t\tr: r / 255,\n\t\tg: g / 255,\n\t\tb: b / 255,\n\t\t...(a !== undefined && { alpha: a }),\n\t}\n}\n\nfunction rgbaFromCulori(culoriRgb: Rgb): RgbaColor {\n\tconst { r, g, b, alpha } = culoriRgb\n\treturn {\n\t\tr: r * 255,\n\t\tg: g * 255,\n\t\tb: b * 255,\n\t\ta: alpha,\n\t}\n}\n\nexport function rgbaToHsl(input: RgbaColor): Hsl {\n\treturn convertRgbToHsl(rgbaToCulori(input))\n}\n\nexport function hslToRgba(input: Hsl): RgbaColor {\n\treturn rgbaFromCulori(convertHslToRgb(input))\n}\n\nexport function rgbaToOklch(input: RgbaColor): Oklch {\n\tconst oklab = convertRgbToOklab(rgbaToCulori(input))\n\treturn convertLabToLch(oklab, 'oklch')\n}\n\nexport function oklchToRgba(input: Oklch, clampChroma = true): RgbaColor {\n\tconst convert = (oklch: Oklch) => {\n\t\t// @ts-expect-error Types are missing the `mode` argument\n\t\tconst oklab = convertLchToLab(oklch, 'oklab')\n\t\tconst rgb = convertOklabToRgb(oklab)\n\t\tconst minChannel = Math.min(rgb.r, rgb.g, rgb.b)\n\t\tconst maxChannel = Math.max(rgb.r, rgb.g, rgb.b)\n\t\tconst inGamut = minChannel >= 0 && maxChannel <= 1\n\t\treturn {\n\t\t\trgb,\n\t\t\tc: oklch.c,\n\t\t\tinGamut,\n\t\t}\n\t}\n\tlet result = convert(input)\n\t// If the resulting RGB color is out of gamut (exceeds the RGB color space),\n\t// try to get it into gamut by reducing the chroma\n\tif (!result.inGamut && clampChroma) {\n\t\t// Check if the color can be brought into gamut by reducing the chroma\n\t\tresult = convert({ ...input, c: 0 })\n\t\tif (result.inGamut) {\n\t\t\t// Yes, so perform the bisect method to find the maximum chroma\n\t\t\t// that is still in gamut\n\t\t\tconst maxChromaInGamut = bisect({\n\t\t\t\tcheckFn: (c) => convert({ ...input, c }).inGamut,\n\t\t\t\tlow: 0,\n\t\t\t\thigh: input.c,\n\t\t\t\tminChangeFactor: 0.0001,\n\t\t\t})\n\t\t\tresult = convert({ ...input, c: maxChromaInGamut ?? 0 })\n\t\t}\n\t}\n\treturn rgbaFromCulori(result.rgb)\n}\n\nfunction normalizeAngle(angle: number): number {\n\tangle %= 360\n\treturn angle < 0 ? angle + 360 : angle\n}\n\nfunction parseAngle(value: string): number {\n\treturn normalizeAngle(parseFloat(value))\n}\n\n// Parsing functions\nexport function parseCssLabColor(labString: string): LabColor | undefined {\n\tconst match = labString.match(/^lab\\(\\s*([\\d.]+%?)\\s+(-?[\\d.]+%?)\\s+(-?[\\d.]+%?)(?:\\s*\\/\\s*([\\d.]+%?))?\\s*\\)$/i)\n\n\tif (!match) {\n\t\treturn undefined\n\t}\n\n\tconst [, l, a, b, alpha] = match\n\n\treturn {\n\t\tl: parseCssValue(l, 0, 100),\n\t\ta: parseCssValue(a, -125, 125),\n\t\tb: parseCssValue(b, -125, 125),\n\t\talpha: alpha !== undefined ? parseCssValue(alpha, 0, 1) : undefined,\n\t}\n}\n\nexport function parseCssLchColor(lchString: string): LchColor | undefined {\n\tconst match = lchString.match(/^lch\\(\\s*([\\d.]+%?)\\s+([\\d.]+%?)\\s+([\\d.]+(?:deg)?)(?:\\s*\\/\\s*([\\d.]+%?))?\\s*\\)$/i)\n\n\tif (!match) {\n\t\treturn undefined\n\t}\n\n\tconst [, l, c, h, alpha] = match\n\n\treturn {\n\t\tl: parseCssValue(l, 0, 100),\n\t\tc: parseCssValue(c, 0, 150),\n\t\th: parseAngle(h),\n\t\talpha: alpha !== undefined ? parseCssValue(alpha, 0, 1) : undefined,\n\t}\n}\n\nexport function parseCssOklchColor(oklchString: string): Oklch | undefined {\n\tconst match = oklchString.match(/^oklch\\(\\s*([\\d.]+%?)\\s+([\\d.]+%?)\\s+([\\d.]+(?:deg)?)(?:\\s*\\/\\s*([\\d.]+%?))?\\s*\\)$/i)\n\n\tif (!match) {\n\t\treturn undefined\n\t}\n\n\tconst [, l, c, h, alpha] = match\n\n\treturn {\n\t\tmode: 'oklch',\n\t\tl: parseCssValue(l, 0, 1),\n\t\tc: parseCssValue(c, 0, 0.5, 0.4),\n\t\th: parseAngle(h),\n\t\t...(alpha !== undefined && { alpha: parseCssValue(alpha, 0, 1) }),\n\t}\n}\n\nfunction parseCssValue(value: string, min: number, max: number, valueFor100Percent?: number): number {\n\tconst isPercentage = value.endsWith('%')\n\tconst floatValue = parseFloat(value)\n\tconst convertedValue = isPercentage ? (floatValue * (valueFor100Percent ?? max)) / 100 : floatValue\n\treturn Math.max(min, Math.min(max, convertedValue))\n}\n","import { multiplyAlpha, lighten, darken, getLuminance } from '../helpers/color-transforms'\n\nexport type VSCodeDefaultColorTransform =\n\t| ['transparent', VSCodeDefaultColorKey, number]\n\t| ['lighten', VSCodeDefaultColorKey, number]\n\t| ['darken', VSCodeDefaultColorKey, number]\n\t| ['lessProminent', VSCodeDefaultColorKey, VSCodeDefaultColorKey, number, number]\n\nexport type VSCodeDefaultColorDefinition = string | VSCodeDefaultColorTransform | null\n\n/**\n * Either two colors based on the theme type in the order `[dark, light]`,\n * or a single color that is used for both dark and light themes.\n */\nexport type VSCodeDefaultColorsByType = [VSCodeDefaultColorDefinition, VSCodeDefaultColorDefinition] | VSCodeDefaultColorDefinition\n\n/**\n * A union of VS Code colors that we know the default values for. The default values are required\n * because VS Code themes do not need to define all colors, only the ones they want to change.\n *\n * This is not an exhaustive list of all VS Code colors and does not need to be. If a color is\n * missing here, it can still be set by themes and used by plugins - it will just have no defaults.\n */\nexport type VSCodeDefaultColorKey =\n\t// Base colors\n\t| 'focusBorder'\n\t| 'foreground'\n\t| 'disabledForeground'\n\t| 'descriptionForeground'\n\t| 'errorForeground'\n\t| 'icon.foreground'\n\t// Contrast colors\n\t| 'contrastActiveBorder'\n\t| 'contrastBorder'\n\t// Colors inside a text document, such as the welcome page\n\t| 'textBlockQuote.background'\n\t| 'textBlockQuote.border'\n\t| 'textCodeBlock.background'\n\t| 'textLink.activeForeground'\n\t| 'textLink.foreground'\n\t| 'textPreformat.foreground'\n\t| 'textSeparator.foreground'\n\t// Editor colors\n\t| 'editor.background'\n\t| 'editor.foreground'\n\t| 'editorLineNumber.foreground'\n\t| 'editorLineNumber.activeForeground'\n\t| 'editorActiveLineNumber.foreground'\n\t| 'editor.selectionBackground'\n\t| 'editor.inactiveSelectionBackground'\n\t| 'editor.selectionHighlightBackground'\n\t// Editor status colors & icons\n\t| 'editorError.foreground'\n\t| 'editorWarning.foreground'\n\t| 'editorInfo.foreground'\n\t| 'editorHint.foreground'\n\t| 'problemsErrorIcon.foreground'\n\t| 'problemsWarningIcon.foreground'\n\t| 'problemsInfoIcon.foreground'\n\t// Editor find matches\n\t| 'editor.findMatchBackground'\n\t| 'editor.findMatchHighlightBackground'\n\t| 'editor.findRangeHighlightBackground'\n\t// Editor links\n\t| 'editorLink.activeForeground'\n\t// Editor lightbulb icons\n\t| 'editorLightBulb.foreground'\n\t| 'editorLightBulbAutoFix.foreground'\n\t// Editor diffs\n\t| 'diffEditor.insertedTextBackground'\n\t| 'diffEditor.insertedTextBorder'\n\t| 'diffEditor.removedTextBackground'\n\t| 'diffEditor.removedTextBorder'\n\t| 'diffEditor.insertedLineBackground'\n\t| 'diffEditor.removedLineBackground'\n\t// Editor sticky scroll\n\t| 'editorStickyScroll.background'\n\t| 'editorStickyScrollHover.background'\n\t// Editor inlays (hints displayed inside an editor line)\n\t| 'editorInlayHint.background'\n\t| 'editorInlayHint.foreground'\n\t| 'editorInlayHint.typeForeground'\n\t| 'editorInlayHint.typeBackground'\n\t| 'editorInlayHint.parameterForeground'\n\t| 'editorInlayHint.parameterBackground'\n\t// Editor groups & panes\n\t| 'editorPane.background'\n\t| 'editorGroup.emptyBackground'\n\t| 'editorGroup.focusedEmptyBorder'\n\t| 'editorGroupHeader.tabsBackground'\n\t| 'editorGroupHeader.tabsBorder'\n\t| 'editorGroupHeader.noTabsBackground'\n\t| 'editorGroupHeader.border'\n\t| 'editorGroup.border'\n\t| 'editorGroup.dropBackground'\n\t| 'editorGroup.dropIntoPromptForeground'\n\t| 'editorGroup.dropIntoPromptBackground'\n\t| 'editorGroup.dropIntoPromptBorder'\n\t| 'sideBySideEditor.horizontalBorder'\n\t| 'sideBySideEditor.verticalBorder'\n\t// Scrollbars\n\t| 'scrollbar.shadow'\n\t| 'scrollbarSlider.background'\n\t| 'scrollbarSlider.hoverBackground'\n\t| 'scrollbarSlider.activeBackground'\n\t// Panels\n\t| 'panel.background'\n\t| 'panel.border'\n\t| 'panelTitle.activeBorder'\n\t| 'panelTitle.activeForeground'\n\t| 'panelTitle.inactiveForeground'\n\t| 'panelSectionHeader.background'\n\t| 'terminal.background'\n\t// Widgets\n\t| 'widget.shadow'\n\t| 'editorWidget.background'\n\t| 'editorWidget.foreground'\n\t| 'editorWidget.border'\n\t| 'quickInput.background'\n\t| 'quickInput.foreground'\n\t| 'quickInputTitle.background'\n\t| 'pickerGroup.foreground'\n\t| 'pickerGroup.border'\n\t| 'editor.hoverHighlightBackground'\n\t| 'editorHoverWidget.background'\n\t| 'editorHoverWidget.foreground'\n\t| 'editorHoverWidget.border'\n\t| 'editorHoverWidget.statusBarBackground'\n\t// Title bar\n\t| 'titleBar.activeBackground'\n\t| 'titleBar.activeForeground'\n\t| 'titleBar.inactiveBackground'\n\t| 'titleBar.inactiveForeground'\n\t| 'titleBar.border'\n\t// Toolbars\n\t| 'toolbar.hoverBackground'\n\t| 'toolbar.activeBackground'\n\t// Tab background\n\t| 'tab.activeBackground'\n\t| 'tab.unfocusedActiveBackground'\n\t| 'tab.inactiveBackground'\n\t| 'tab.unfocusedInactiveBackground'\n\t// Tab foreground\n\t| 'tab.activeForeground'\n\t| 'tab.inactiveForeground'\n\t| 'tab.unfocusedActiveForeground'\n\t| 'tab.unfocusedInactiveForeground'\n\t// Tab hover foreground/background\n\t| 'tab.hoverBackground'\n\t| 'tab.unfocusedHoverBackground'\n\t| 'tab.hoverForeground'\n\t| 'tab.unfocusedHoverForeground'\n\t// Tab border\n\t| 'tab.border'\n\t| 'tab.lastPinnedBorder'\n\t| 'tab.activeBorder'\n\t| 'tab.unfocusedActiveBorder'\n\t| 'tab.activeBorderTop'\n\t| 'tab.unfocusedActiveBorderTop'\n\t| 'tab.hoverBorder'\n\t| 'tab.unfocusedHoverBorder'\n\t// Tab modified border\n\t| 'tab.activeModifiedBorder'\n\t| 'tab.inactiveModifiedBorder'\n\t| 'tab.unfocusedActiveModifiedBorder'\n\t| 'tab.unfocusedInactiveModifiedBorder'\n\t// Badges (small information labels, for example, search results count)\n\t| 'badge.background'\n\t| 'badge.foreground'\n\t// Buttons\n\t| 'button.background'\n\t| 'button.foreground'\n\t| 'button.border'\n\t| 'button.separator'\n\t| 'button.hoverBackground'\n\t| 'button.secondaryBackground'\n\t| 'button.secondaryForeground'\n\t| 'button.secondaryHoverBackground'\n\t// Dropdowns (selects)\n\t| 'dropdown.background'\n\t| 'dropdown.foreground'\n\t| 'dropdown.border'\n\t// Lists\n\t| 'list.activeSelectionBackground'\n\t| 'list.activeSelectionForeground'\n\t// Trees\n\t| 'tree.indentGuidesStroke'\n\t// Input fields\n\t| 'input.background'\n\t| 'input.foreground'\n\t| 'input.placeholderForeground'\n\t| 'inputOption.activeBorder'\n\t| 'inputOption.hoverBackground'\n\t| 'inputOption.activeBackground'\n\t| 'inputOption.activeForeground'\n\t| 'inputValidation.infoBackground'\n\t| 'inputValidation.infoBorder'\n\t| 'inputValidation.warningBackground'\n\t| 'inputValidation.warningBorder'\n\t| 'inputValidation.errorBackground'\n\t| 'inputValidation.errorBorder'\n\t// Keybinding labels\n\t| 'keybindingLabel.background'\n\t| 'keybindingLabel.foreground'\n\t| 'keybindingLabel.border'\n\t| 'keybindingLabel.bottomBorder'\n\t// Menu colors\n\t| 'menu.foreground'\n\t| 'menu.background'\n\t| 'menu.selectionForeground'\n\t| 'menu.selectionBackground'\n\t| 'menu.separatorBackground'\n\t// Snippet placeholder colors\n\t| 'editor.snippetTabstopHighlightBackground'\n\t| 'editor.snippetFinalTabstopHighlightBorder'\n\t// Terminal colors\n\t| 'terminal.ansiBlack'\n\t| 'terminal.ansiRed'\n\t| 'terminal.ansiGreen'\n\t| 'terminal.ansiYellow'\n\t| 'terminal.ansiBlue'\n\t| 'terminal.ansiMagenta'\n\t| 'terminal.ansiCyan'\n\t| 'terminal.ansiWhite'\n\t| 'terminal.ansiBrightBlack'\n\t| 'terminal.ansiBrightRed'\n\t| 'terminal.ansiBrightGreen'\n\t| 'terminal.ansiBrightYellow'\n\t| 'terminal.ansiBrightBlue'\n\t| 'terminal.ansiBrightMagenta'\n\t| 'terminal.ansiBrightCyan'\n\t| 'terminal.ansiBrightWhite'\n\nexport const groupedDefaultWorkbenchColorKeys = {\n\tbackgrounds: [\n\t\t'editor.background',\n\t\t'editorGroupHeader.tabsBackground',\n\t\t'editorGroupHeader.tabsBorder',\n\t\t'titleBar.activeBackground',\n\t\t'titleBar.border',\n\t\t'panel.background',\n\t\t'tab.activeBackground',\n\t\t'tab.activeBorderTop',\n\t\t'tab.activeBorder',\n\t\t'terminal.background',\n\t\t'widget.shadow',\n\t],\n\taccents: [\n\t\t'focusBorder',\n\t\t'editor.selectionBackground',\n\t\t'textBlockQuote.border',\n\t\t'textLink.activeForeground',\n\t\t'textLink.foreground',\n\t\t'editorLink.activeForeground',\n\t\t'tab.activeForeground',\n\t\t'tab.inactiveForeground',\n\t\t'tab.unfocusedActiveForeground',\n\t\t'tab.unfocusedInactiveForeground',\n\t],\n} satisfies { [key in string]: readonly VSCodeDefaultColorKey[] }\n\nconst defaultEditorBackgroundColors: [string, string] = ['#1e1e1e', '#ffffff']\nconst defaultEditorForegroundColors: [string, string] = ['#bbbbbb', '#333333']\n\nconst defaultWorkbenchColors: { [key in VSCodeDefaultColorKey]: VSCodeDefaultColorsByType } = {\n\t// Base colors\n\tfocusBorder: ['#007fd4', '#0090f1'],\n\tforeground: ['#cccccc', '#616161'],\n\tdisabledForeground: ['#cccccc80', '#61616180'],\n\tdescriptionForeground: [['transparent', 'foreground', 0.7], '#717171'],\n\terrorForeground: ['#f48771', '#a1260d'],\n\t'icon.foreground': ['#c5c5c5', '#424242'],\n\n\t// Contrast colors\n\tcontrastActiveBorder: null,\n\tcontrastBorder: null,\n\n\t// Colors inside a text document, such as the welcome page\n\t'textBlockQuote.background': ['#7f7f7f1a', '#7f7f7f1a'],\n\t'textBlockQuote.border': ['#007acc80', '#007acc80'],\n\t'textCodeBlock.background': ['#0a0a0a66', '#dcdcdc66'],\n\t'textLink.activeForeground': ['#3794ff', '#006ab1'],\n\t'textLink.foreground': ['#3794ff', '#006ab1'],\n\t'textPreformat.foreground': ['#d7ba7d', '#a31515'],\n\t'textSeparator.foreground': ['#ffffff2e', '#0000002e'],\n\n\t// Editor colors\n\t'editor.background': defaultEditorBackgroundColors,\n\t'editor.foreground': defaultEditorForegroundColors,\n\t'editorLineNumber.foreground': ['#858585', '#237893'],\n\t'editorLineNumber.activeForeground': 'editorActiveLineNumber.foreground',\n\t'editorActiveLineNumber.foreground': ['#c6c6c6', '#0b216f'],\n\t'editor.selectionBackground': ['#264f78', '#add6ff'],\n\t'editor.inactiveSelectionBackground': ['transparent', 'editor.selectionBackground', 0.5],\n\t'editor.selectionHighlightBackground': ['lessProminent', 'editor.selectionBackground', 'editor.background', 0.3, 0.6],\n\n\t// Editor status colors & icons\n\t'editorError.foreground': ['#f14c4c', '#e51400'],\n\t'editorWarning.foreground': ['#cca700', '#bf8803'],\n\t'editorInfo.foreground': ['#3794ff', '#1a85ff'],\n\t'editorHint.foreground': ['#eeeeeeb2', '#6c6c6c'],\n\t'problemsErrorIcon.foreground': 'editorError.foreground',\n\t'problemsWarningIcon.foreground': 'editorWarning.foreground',\n\t'problemsInfoIcon.foreground': 'editorInfo.foreground',\n\n\t// Editor find matches\n\t'editor.findMatchBackground': ['#515c6a', '#a8ac94'],\n\t'editor.findMatchHighlightBackground': ['#ea5c0055', '#ea5c0055'],\n\t'editor.findRangeHighlightBackground': ['#3a3d4166', '#b4b4b44d'],\n\n\t// Editor links\n\t'editorLink.activeForeground': ['#4e94ce', '#0000ff'],\n\n\t// Editor lightbulb icons\n\t'editorLightBulb.foreground': ['#ffcc00', '#ddb100'],\n\t'editorLightBulbAutoFix.foreground': ['#75beff', '#007acc'],\n\n\t// Editor diffs\n\t'diffEditor.insertedTextBackground': ['#9ccc2c33', '#9ccc2c40'],\n\t'diffEditor.insertedTextBorder': null,\n\t'diffEditor.removedTextBackground': ['#ff000033', '#ff000033'],\n\t'diffEditor.removedTextBorder': null,\n\t'diffEditor.insertedLineBackground': ['#9bb95533', '#9bb95533'],\n\t'diffEditor.removedLineBackground': ['#ff000033', '#ff000033'],\n\n\t// Editor sticky scroll\n\t'editorStickyScroll.background': 'editor.background',\n\t'editorStickyScrollHover.background': ['#2a2d2e', '#f0f0f0'],\n\n\t// Editor inlays (hints displayed inside an editor line)\n\t'editorInlayHint.background': [\n\t\t['transparent', 'badge.background', 0.8],\n\t\t['transparent', 'badge.background', 0.6],\n\t],\n\t'editorInlayHint.foreground': 'badge.foreground',\n\t'editorInlayHint.typeBackground': 'editorInlayHint.background',\n\t'editorInlayHint.typeForeground': 'editorInlayHint.foreground',\n\t'editorInlayHint.parameterBackground': 'editorInlayHint.background',\n\t'editorInlayHint.parameterForeground': 'editorInlayHint.foreground',\n\n\t// Editor groups & panes\n\t'editorPane.background': ['editor.background', 'editor.background'],\n\t'editorGroup.emptyBackground': null,\n\t'editorGroup.focusedEmptyBorder': null,\n\t'editorGroupHeader.tabsBackground': ['#252526', '#f3f3f3'],\n\t'editorGroupHeader.tabsBorder': null,\n\t'editorGroupHeader.noTabsBackground': ['editor.background', 'editor.background'],\n\t'editorGroupHeader.border': null,\n\t'editorGroup.border': ['#444444', '#e7e7e7'],\n\t'editorGroup.dropBackground': ['#53595d80', '#2677cb2d'],\n\t'editorGroup.dropIntoPromptForeground': ['editorWidget.foreground', 'editorWidget.foreground'],\n\t'editorGroup.dropIntoPromptBackground': ['editorWidget.background', 'editorWidget.background'],\n\t'editorGroup.dropIntoPromptBorder': null,\n\t'sideBySideEditor.horizontalBorder': ['editorGroup.border', 'editorGroup.border'],\n\t'sideBySideEditor.verticalBorder': ['editorGroup.border', 'editorGroup.border'],\n\n\t// Scrollbars\n\t'scrollbar.shadow': ['#000000', '#dddddd'],\n\t'scrollbarSlider.background': ['#79797966', '#64646466'],\n\t'scrollbarSlider.hoverBackground': ['#646464b2', '#646464b2'],\n\t'scrollbarSlider.activeBackground': ['#bfbfbf66', '#00000099'],\n\n\t// Panels\n\t'panel.background': 'editor.background',\n\t'panel.border': '#80808059',\n\t'panelTitle.activeBorder': 'panelTitle.activeForeground',\n\t'panelTitle.activeForeground': ['#e7e7e7', '#424242'],\n\t'panelTitle.inactiveForeground': [\n\t\t['transparent', 'panelTitle.activeForeground', 0.6],\n\t\t['transparent', 'panelTitle.activeForeground', 0.75],\n\t],\n\t'panelSectionHeader.background': '#80808051',\n\t'terminal.background': 'panel.background',\n\n\t// Widgets\n\t'widget.shadow': ['#0000005b', '#00000028'],\n\t'editorWidget.background': ['#252526', '#f3f3f3'],\n\t'editorWidget.foreground': 'foreground',\n\t'editorWidget.border': ['#454545', '#c8c8c8'],\n\t'quickInput.background': 'editorWidget.background',\n\t'quickInput.foreground': 'editorWidget.foreground',\n\t'quickInputTitle.background': ['#ffffff1a', '#0000000f'],\n\t'pickerGroup.foreground': ['#3794ff', '#0066bf'],\n\t'pickerGroup.border': ['#3f3f46', '#cccedb'],\n\t'editor.hoverHighlightBackground': ['#264f7840', '#add6ff26'],\n\t'editorHoverWidget.background': 'editorWidget.background',\n\t'editorHoverWidget.foreground': 'editorWidget.foreground',\n\t'editorHoverWidget.border': 'editorWidget.border',\n\t'editorHoverWidget.statusBarBackground': [\n\t\t['lighten', 'editorHoverWidget.background', 0.2],\n\t\t['darken', 'editorHoverWidget.background', 0.05],\n\t],\n\n\t// Title bar\n\t'titleBar.activeBackground': ['#3c3c3c', '#dddddd'],\n\t'titleBar.activeForeground': ['#cccccc', '#333333'],\n\t'titleBar.inactiveBackground': ['transparent', 'titleBar.activeBackground', 0.6],\n\t'titleBar.inactiveForeground': ['transparent', 'titleBar.activeForeground', 0.6],\n\t'titleBar.border': null,\n\n\t// Toolbars\n\t'toolbar.hoverBackground': ['#5a5d5e50', '#b8b8b850'],\n\t'toolbar.activeBackground': [\n\t\t['lighten', 'toolbar.hoverBackground', 0.1],\n\t\t['darken', 'toolbar.hoverBackground', 0.1],\n\t],\n\n\t// Tab background\n\t'tab.activeBackground': ['editor.background', 'editor.background'],\n\t'tab.unfocusedActiveBackground': ['tab.activeBackground', 'tab.activeBackground'],\n\t'tab.inactiveBackground': ['#2d2d2d', '#ececec'],\n\t'tab.unfocusedInactiveBackground': ['tab.inactiveBackground', 'tab.inactiveBackground'],\n\n\t// Tab foreground\n\t'tab.activeForeground': ['#ffffff', '#333333'],\n\t'tab.inactiveForeground': [\n\t\t['transparent', 'tab.activeForeground', 0.5],\n\t\t['transparent', 'tab.activeForeground', 0.7],\n\t],\n\t'tab.unfocusedActiveForeground': [\n\t\t['transparent', 'tab.activeForeground', 0.5],\n\t\t['transparent', 'tab.activeForeground', 0.7],\n\t],\n\t'tab.unfocusedInactiveForeground': [\n\t\t['transparent', 'tab.inactiveForeground', 0.5],\n\t\t['transparent', 'tab.inactiveForeground', 0.5],\n\t],\n\n\t// Tab hover foreground/background\n\t'tab.hoverBackground': null,\n\t'tab.unfocusedHoverBackground': [\n\t\t['transparent', 'tab.hoverBackground', 0.5],\n\t\t['transparent', 'tab.hoverBackground', 0.7],\n\t],\n\t'tab.hoverForeground': null,\n\t'tab.unfocusedHoverForeground': [\n\t\t['transparent', 'tab.hoverForeground', 0.5],\n\t\t['transparent', 'tab.hoverForeground', 0.5],\n\t],\n\n\t// Tab borders\n\t'tab.border': ['#252526', '#f3f3f3'],\n\t'tab.lastPinnedBorder': ['tree.indentGuidesStroke', 'tree.indentGuidesStroke'],\n\t'tab.activeBorder': null,\n\t'tab.unfocusedActiveBorder': [\n\t\t['transparent', 'tab.activeBorder', 0.5],\n\t\t['transparent', 'tab.activeBorder', 0.7],\n\t],\n\t'tab.activeBorderTop': null,\n\t'tab.unfocusedActiveBorderTop': [\n\t\t['transparent', 'tab.activeBorderTop', 0.5],\n\t\t['transparent', 'tab.activeBorderTop', 0.7],\n\t],\n\t'tab.hoverBorder': null,\n\t'tab.unfocusedHoverBorder': [\n\t\t['transparent', 'tab.hoverBorder', 0.5],\n\t\t['transparent', 'tab.hoverBorder', 0.7],\n\t],\n\n\t// Tab modified border\n\t'tab.activeModifiedBorder': ['#3399cc', '#33aaee'],\n\t'tab.inactiveModifiedBorder': [\n\t\t['transparent', 'tab.activeModifiedBorder', 0.5],\n\t\t['transparent', 'tab.activeModifiedBorder', 0.5],\n\t],\n\t'tab.unfocusedActiveModifiedBorder': [\n\t\t['transparent', 'tab.activeModifiedBorder', 0.5],\n\t\t['transparent', 'tab.activeModifiedBorder', 0.7],\n\t],\n\t'tab.unfocusedInactiveModifiedBorder': [\n\t\t['transparent', 'tab.inactiveModifiedBorder', 0.5],\n\t\t['transparent', 'tab.inactiveModifiedBorder', 0.5],\n\t],\n\n\t// Badges (small information labels, for example, search results count)\n\t'badge.background': ['#4d4d4d', '#c4c4c4'],\n\t'badge.foreground': ['#ffffff', '#333333'],\n\n\t// Buttons\n\t'button.background': ['#0e639c', '#007acc'],\n\t'button.foreground': ['#ffffff', '#ffffff'],\n\t'button.border': 'contrastBorder',\n\t'button.separator': ['transparent', 'button.foreground', 0.4],\n\t'button.hoverBackground': [\n\t\t['lighten', 'button.background', 0.2],\n\t\t['darken', 'button.background', 0.2],\n\t],\n\t'button.secondaryBackground': ['#3a3d41', '#5f6a79'],\n\t'button.secondaryForeground': ['#ffffff', '#ffffff'],\n\t'button.secondaryHoverBackground': [\n\t\t['lighten', 'button.secondaryBackground', 0.2],\n\t\t['darken', 'button.secondaryBackground', 0.2],\n\t],\n\n\t// Dropdowns (selects)\n\t'dropdown.background': ['#3c3c3c', '#ffffff'],\n\t'dropdown.foreground': ['#f0f0f0', 'foreground'],\n\t'dropdown.border': ['dropdown.background', '#cecece'],\n\n\t// Lists\n\t'list.activeSelectionBackground': ['#04395e', '#0060c0'],\n\t'list.activeSelectionForeground': '#ffffff',\n\n\t// Trees\n\t'tree.indentGuidesStroke': ['#585858', '#a9a9a9'],\n\n\t// Input fields\n\t'input.background': ['#3c3c3c', '#ffffff'],\n\t'input.foreground': 'foreground',\n\t'input.placeholderForeground': ['transparent', 'foreground', 0.5],\n\t'inputOption.activeBorder': ['#007acc', '#007acc'],\n\t'inputOption.hoverBackground': ['#5a5d5e80', '#b8b8b850'],\n\t'inputOption.activeBackground': [\n\t\t['transparent', 'focusBorder', 0.4],\n\t\t['transparent', 'focusBorder', 0.2],\n\t],\n\t'inputOption.activeForeground': ['#ffffff', '#000000'],\n\t'inputValidation.infoBackground': ['#063b49', '#d6ecf2'],\n\t'inputValidation.infoBorder': ['#007acc', '#007acc'],\n\t'inputValidation.warningBackground': ['#352a05', '#f6f5d2'],\n\t'inputValidation.warningBorder': ['#b89500', '#b89500'],\n\t'inputValidation.errorBackground': ['#5a1d1d', '#f2dede'],\n\t'inputValidation.errorBorder': ['#be1100', '#be1100'],\n\n\t// Keybinding labels\n\t'keybindingLabel.background': ['#8080802b', '#dddddd66'],\n\t'keybindingLabel.foreground': ['#cccccc', '#555555'],\n\t'keybindingLabel.border': ['#33333399', '#cccccc66'],\n\t'keybindingLabel.bottomBorder': ['#44444499', '#bbbbbb66'],\n\n\t// Menu colors\n\t'menu.foreground': 'dropdown.foreground',\n\t'menu.background': 'dropdown.background',\n\t'menu.selectionForeground': 'list.activeSelectionForeground',\n\t'menu.selectionBackground': 'list.activeSelectionBackground',\n\t'menu.separatorBackground': ['#606060', '#d4d4d4'],\n\n\t// Snippet placeholder colors\n\t'editor.snippetTabstopHighlightBackground': ['#7c7c74c', '#0a326433'],\n\t'editor.snippetFinalTabstopHighlightBorder': ['#525252', '#0a326480'],\n\n\t// Terminal colors\n\t'terminal.ansiBlack': '#000000',\n\t'terminal.ansiRed': '#cd3131',\n\t'terminal.ansiGreen': ['#0dbc79', '#00bc00'],\n\t'terminal.ansiYellow': ['#e5e510', '#949800'],\n\t'terminal.ansiBlue': ['#2472c8', '#0451a5'],\n\t'terminal.ansiMagenta': ['#bc3fbc', '#bc05bc'],\n\t'terminal.ansiCyan': ['#11a8cd', '#0598bc'],\n\t'terminal.ansiWhite': ['#e5e5e5', '#555555'],\n\t'terminal.ansiBrightBlack': '#666666',\n\t'terminal.ansiBrightRed': ['#f14c4c', '#cd3131'],\n\t'terminal.ansiBrightGreen': ['#23d18b', '#14ce14'],\n\t'terminal.ansiBrightYellow': ['#f5f543', '#b5ba00'],\n\t'terminal.ansiBrightBlue': ['#3b8eea', '#0451a5'],\n\t'terminal.ansiBrightMagenta': ['#d670d6', '#bc05bc'],\n\t'terminal.ansiBrightCyan': ['#29b8db', '#0598bc'],\n\t'terminal.ansiBrightWhite': ['#e5e5e5', '#a5a5a5'],\n}\n\nexport type VSCodeThemeType = 'dark' | 'light'\n\nexport type VSCodeWorkbenchColors = { [key in VSCodeDefaultColorKey]: string } & { [key: string]: string }\n\nexport function resolveVSCodeWorkbenchColors(colors: { [key: string]: string } | undefined, themeType: VSCodeThemeType): VSCodeWorkbenchColors {\n\tconst typeIndex = themeType === 'dark' ? 0 : 1\n\n\t// Start with all default workbench colors and selectively override them with the given colors\n\tconst workbenchColors: { [key: string]: VSCodeDefaultColorsByType | string } = {\n\t\t...defaultWorkbenchColors,\n\t\t...colors,\n\t}\n\n\tconst colorsStartedResolving = new Set<VSCodeDefaultColorsByType | string>()\n\tconst colorsResolved = new Map<VSCodeDefaultColorsByType | string, string | null>()\n\n\tfunction applyColorTransform(unresolvedColor: VSCodeDefaultColorTransform): string | null | undefined {\n\t\tif (unresolvedColor.length === 3) {\n\t\t\tconst [type, colorKey, amount] = unresolvedColor\n\t\t\tconst hexColor = resolveColor(colorKey)\n\t\t\t/* c8 ignore next */\n\t\t\tif (hexColor === null) return null\n\n\t\t\tif (type === 'transparent') {\n\t\t\t\treturn multiplyAlpha(hexColor, amount)\n\t\t\t} else if (type === 'lighten') {\n\t\t\t\treturn lighten(hexColor, amount)\n\t\t\t} else if (type === 'darken') {\n\t\t\t\treturn darken(hexColor, amount)\n\t\t\t}\n\t\t}\n\n\t\tif (unresolvedColor.length === 5 && unresolvedColor[0] === 'lessProminent') {\n\t\t\tconst [, colorKey, backgroundKey, factor, transparency] = unresolvedColor\n\n\t\t\tconst hexFrom = resolveColor(colorKey)\n\t\t\t/* c8 ignore next */\n\t\t\tif (hexFrom === null) return null\n\n\t\t\tconst hexBackground = resolveColor(backgroundKey)\n\t\t\t/* c8 ignore next */\n\t\t\tif (hexBackground === null) return multiplyAlpha(hexFrom, factor * transparency)\n\n\t\t\tconst fromLum = getLuminance(hexFrom)\n\t\t\tconst bgLum = getLuminance(hexBackground)\n\t\t\t/* c8 ignore next */\n\t\t\tlet combinedFactor = factor ? factor : 0.5\n\t\t\tif (fromLum < bgLum) {\n\t\t\t\tcombinedFactor *= (bgLum - fromLum) / bgLum\n\t\t\t\tconst lightened = lighten(hexFrom, combinedFactor)\n\t\t\t\treturn multiplyAlpha(lightened, transparency)\n\t\t\t} else {\n\t\t\t\tcombinedFactor *= (fromLum - bgLum) / fromLum\n\t\t\t\tconst darkened = darken(hexFrom, combinedFactor)\n\t\t\t\treturn multiplyAlpha(darkened, transparency)\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction resolveColor(unresolvedColor: VSCodeDefaultColorsByType | string): string | null {\n\t\tif (unresolvedColor === null) return null\n\n\t\tconst alreadyResolvedColor = colorsResolved.get(unresolvedColor)\n\t\tif (alreadyResolvedColor !== undefined) return alreadyResolvedColor\n\n\t\t/* c8 ignore next */\n\t\tif (colorsStartedResolving.has(unresolvedColor)) throw new Error('Circular reference in default colors.')\n\t\tcolorsStartedResolving.add(unresolvedColor)\n\n\t\tlet resolved: string | null | undefined\n\t\tif (typeof unresolvedColor === 'string') {\n\t\t\tif (unresolvedColor.startsWith('#')) {\n\t\t\t\tresolved = unresolvedColor.toLowerCase()\n\t\t\t} else {\n\t\t\t\tconst referencedColor = workbenchColors[unresolvedColor]\n\t\t\t\tif (referencedColor !== undefined) resolved = resolveColor(referencedColor)\n\t\t\t}\n\t\t} else if (Array.isArray(unresolvedColor)) {\n\t\t\tif (unresolvedColor.length === 2) {\n\t\t\t\tresolved = resolveColor(unresolvedColor[typeIndex])\n\t\t\t} else {\n\t\t\t\tresolved = applyColorTransform(unresolvedColor)\n\t\t\t}\n\t\t}\n\n\t\tif (resolved === undefined) throw new Error(`Invalid color value ${JSON.stringify(unresolvedColor)}, expected a hex color.`)\n\t\tcolorsResolved.set(unresolvedColor, resolved)\n\n\t\treturn resolved\n\t}\n\n\t// Go through all workbench colors and resolve their values to a plain color\n\tconst keys = Object.keys(workbenchColors)\n\tkeys.forEach((key) => {\n\t\ttry {\n\t\t\tworkbenchColors[key] = resolveColor(workbenchColors[key])\n\t\t} catch (error) {\n\t\t\t/* c8 ignore next */\n\t\t\tconst msg = error instanceof Error ? error.message : (error as string)\n\t\t\tthrow new Error(`Failed to resolve theme color for key ${key}: ${msg}`)\n\t\t}\n\t})\n\n\treturn workbenchColors as ReturnType<typeof resolveVSCodeWorkbenchColors>\n}\n\n/**\n * Shiki themes often do not contain a `type` property which is used in proper VS Code themes\n * to indicate a dark or light theme. In such cases, we need to guess the theme type from\n * the theme colors.\n *\n * The guessing logic is: If `editor.background` is darker than `editor.foreground`,\n * we assume the theme is a dark theme.\n */\nexport function guessThemeTypeFromEditorColors(colors: { [key: string]: string } | undefined) {\n\tconst bgLuminance = getLuminance(colors?.['editor.background'] || defaultEditorBackgroundColors[0])\n\tconst fgLuminance = getLuminance(colors?.['editor.foreground'] || defaultEditorForegroundColors[0])\n\treturn bgLuminance < fgLuminance ? 'dark' : 'light'\n}\n","const singleComment = Symbol('singleComment');\nconst multiComment = Symbol('multiComment');\n\nconst stripWithoutWhitespace = () => '';\nconst stripWithWhitespace = (string, start, end) => string.slice(start, end).replace(/\\S/g, ' ');\n\nconst isEscaped = (jsonString, quotePosition) => {\n\tlet index = quotePosition - 1;\n\tlet backslashCount = 0;\n\n\twhile (jsonString[index] === '\\\\') {\n\t\tindex -= 1;\n\t\tbackslashCount += 1;\n\t}\n\n\treturn Boolean(backslashCount % 2);\n};\n\nexport default function stripJsonComments(jsonString, {whitespace = true, trailingCommas = false} = {}) {\n\tif (typeof jsonString !== 'string') {\n\t\tthrow new TypeError(`Expected argument \\`jsonString\\` to be a \\`string\\`, got \\`${typeof jsonString}\\``);\n\t}\n\n\tconst strip = whitespace ? stripWithWhitespace : stripWithoutWhitespace;\n\n\tlet isInsideString = false;\n\tlet isInsideComment = false;\n\tlet offset = 0;\n\tlet buffer = '';\n\tlet result = '';\n\tlet commaIndex = -1;\n\n\tfor (let index = 0; index < jsonString.length; index++) {\n\t\tconst currentCharacter = jsonString[index];\n\t\tconst nextCharacter = jsonString[index + 1];\n\n\t\tif (!isInsideComment && currentCharacter === '\"') {\n\t\t\t// Enter or exit string\n\t\t\tconst escaped = isEscaped(jsonString, index);\n\t\t\tif (!escaped) {\n\t\t\t\tisInsideString = !isInsideString;\n\t\t\t}\n\t\t}\n\n\t\tif (isInsideString) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!isInsideComment && currentCharacter + nextCharacter === '//') {\n\t\t\t// Enter single-line comment\n\t\t\tbuffer += jsonString.slice(offset, index);\n\t\t\toffset = index;\n\t\t\tisInsideComment = singleComment;\n\t\t\tindex++;\n\t\t} else if (isInsideComment === singleComment && currentCharacter + nextCharacter === '\\r\\n') {\n\t\t\t// Exit single-line comment via \\r\\n\n\t\t\tindex++;\n\t\t\tisInsideComment = false;\n\t\t\tbuffer += strip(jsonString, offset, index);\n\t\t\toffset = index;\n\t\t\tcontinue;\n\t\t} else if (isInsideComment === singleComment && currentCharacter === '\\n') {\n\t\t\t// Exit single-line comment via \\n\n\t\t\tisInsideComment = false;\n\t\t\tbuffer += strip(jsonString, offset, index);\n\t\t\toffset = index;\n\t\t} else if (!isInsideComment && currentCharacter + nextCharacter === '/*') {\n\t\t\t// Enter multiline comment\n\t\t\tbuffer += jsonString.slice(offset, index);\n\t\t\toffset = index;\n\t\t\tisInsideComment = multiComment;\n\t\t\tindex++;\n\t\t\tcontinue;\n\t\t} else if (isInsideComment === multiComment && currentCharacter + nextCharacter === '*/') {\n\t\t\t// Exit multiline comment\n\t\t\tindex++;\n\t\t\tisInsideComment = false;\n\t\t\tbuffer += strip(jsonString, offset, index + 1);\n\t\t\toffset = index + 1;\n\t\t\tcontinue;\n\t\t} else if (trailingCommas && !isInsideComment) {\n\t\t\tif (commaIndex !== -1) {\n\t\t\t\tif (currentCharacter === '}' || currentCharacter === ']') {\n\t\t\t\t\t// Strip trailing comma\n\t\t\t\t\tbuffer += jsonString.slice(offset, index);\n\t\t\t\t\tresult += strip(buffer, 0, 1) + buffer.slice(1);\n\t\t\t\t\tbuffer = '';\n\t\t\t\t\toffset = index;\n\t\t\t\t\tcommaIndex = -1;\n\t\t\t\t} else if (currentCharacter !== ' ' && currentCharacter !== '\\t' && currentCharacter !== '\\r' && currentCharacter !== '\\n') {\n\t\t\t\t\t// Hit non-whitespace following a comma; comma is not trailing\n\t\t\t\t\tbuffer += jsonString.slice(offset, index);\n\t\t\t\t\toffset = index;\n\t\t\t\t\tcommaIndex = -1;\n\t\t\t\t}\n\t\t\t} else if (currentCharacter === ',') {\n\t\t\t\t// Flush buffer prior to this point, and save new comma index\n\t\t\t\tresult += buffer + jsonString.slice(offset, index);\n\t\t\t\tbuffer = '';\n\t\t\t\toffset = index;\n\t\t\t\tcommaIndex = index;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result + buffer + (isInsideComment ? strip(jsonString.slice(offset)) : jsonString.slice(offset));\n}\n","import {\n\tgroupedDefaultWorkbenchColorKeys,\n\tguessThemeTypeFromEditorColors,\n\tresolveVSCodeWorkbenchColors,\n\tVSCodeDefaultColorKey,\n\tVSCodeThemeType,\n\tVSCodeWorkbenchColors,\n} from '../internal/vscode-colors'\nimport stripJsonComments from 'strip-json-comments'\nimport type { ThemeRegistration } from 'shiki'\nimport { chromaticRecolor, ChromaticRecolorTarget, ensureColorContrastOnBackground, onBackground } from '../helpers/color-transforms'\nimport { StyleOverrides } from './style-settings'\n\nexport class ExpressiveCodeTheme implements Omit<ThemeRegistration, 'type' | 'colors' | 'settings'> {\n\tname: string\n\ttype: VSCodeThemeType\n\tcolors: VSCodeWorkbenchColors\n\tfg: string\n\tbg: string\n\tsemanticHighlighting: boolean\n\tsettings: ThemeSetting[]\n\tstyleOverrides: StyleOverrides\n\n\t/**\n\t * Loads the given theme for use with Expressive Code. Supports both Shiki and VS Code themes.\n\t *\n\t * You can also pass an existing `ExpressiveCodeTheme` instance to create a copy of it.\n\t *\n\t * Note: To save on bundle size, this constructor does not support loading themes\n\t * bundled with Shiki by name (e.g. `dracula`). Instead, import Shiki's `loadTheme`\n\t * function yourself, use it to load its bundled theme (e.g. `themes/dracula.json`),\n\t * and pass the result to this constructor.\n\t */\n\tconstructor(theme: ExpressiveCodeThemeInput) {\n\t\tlet themeType = theme.type\n\t\tif (themeType === 'css') throw new Error('Theme type \"css\" is not supported.')\n\t\tif (themeType !== 'dark' && themeType !== 'light') {\n\t\t\tthemeType = guessThemeTypeFromEditorColors(theme.colors)\n\t\t}\n\n\t\t// Fix invalid themes by removing unsupported entries from theme colors\n\t\tconst themeColors: typeof theme.colors = { ...theme.colors }\n\t\tfor (const key in themeColors) {\n\t\t\tif (typeof themeColors[key] !== 'string' || !themeColors[key].trim().length) delete themeColors[key]\n\t\t}\n\n\t\t// If the theme does not define a name, use the theme type instead (\"dark\" or \"light\")\n\t\tthis.name = theme.name || themeType\n\t\tthis.type = themeType as VSCodeThemeType\n\t\tthis.colors = resolveVSCodeWorkbenchColors(themeColors, this.type)\n\t\tthis.fg = theme.fg || this.colors['editor.foreground']\n\t\tthis.bg = theme.bg || this.colors['editor.background']\n\t\tthis.semanticHighlighting = theme.semanticHighlighting || false\n\t\t// Fix themes that use transparency in unexpected places (e.g. the `rose-pine` themes)\n\t\t// by premultiplying the colors of certain elements with the color of their parent element\n\t\tconst premultiplyTable: [VSCodeDefaultColorKey, VSCodeDefaultColorKey][] = [['editorGroupHeader.tabsBackground', 'editor.background']]\n\t\tpremultiplyTable.forEach(([colorKey, bgKey]) => {\n\t\t\tthis.colors[colorKey] = onBackground(this.colors[colorKey], this.colors[bgKey])\n\t\t})\n\t\t// Shiki uses the `settings` property for theme tokens, VS Code uses `tokenColors`.\n\t\t// To allow passing both types of themes to this constructor, and to also allow passing\n\t\t// an ExpressiveCodeTheme instance directly to Shiki, we mimic Shiki's theme loader\n\t\t// and automatically migrate `tokenColors` (if defined) to `settings`.\n\t\tconst themeTokenSettings = (theme.tokenColors as unknown[]) || theme.settings\n\t\tthis.settings = this.parseThemeSettings(themeTokenSettings)\n\t\tthis.styleOverrides = theme.styleOverrides ?? {}\n\t}\n\n\t/**\n\t * Applies chromatic adjustments to entire groups of theme colors while keeping their\n\t * relative lightness and alpha components intact. This can be used to quickly create\n\t * theme variants that fit the color scheme of any website or brand.\n\t *\n\t * Adjustments can either be defined as hue and chroma values in the OKLCH color space\n\t * (range 0–360 for hue, 0–0.4 for chroma), or these values can be extracted from\n\t * hex color strings (e.g. `#3b82f6`).\n\t *\n\t * You can target predefined groups of theme colors (e.g. `backgrounds`, `accents`)\n\t * and/or use the `custom` property to define your own groups of theme colors to be adjusted.\n\t * Each custom group must contain a `themeColorKeys` property with an array of VS Code\n\t * theme color keys (e.g. `['panel.background', 'panel.border']`) and a `targetHueAndChroma`\n\t * property that accepts the same adjustment target values as `backgrounds` and `accents`.\n\t * Custom groups will be applied in the order they are defined.\n\t *\n\t * Returns the same `ExpressiveCodeTheme` instance to allow chaining.\n\t */\n\tapplyHueAndChromaAdjustments(adjustments: {\n\t\tbackgrounds?: string | ChromaticRecolorTarget | undefined\n\t\taccents?: string | ChromaticRecolorTarget | undefined\n\t\tcustom?: { themeColorKeys: string[]; targetHueAndChroma: string | ChromaticRecolorTarget }[] | undefined\n\t}) {\n\t\tconst adjustedColors: Partial<VSCodeWorkbenchColors> = {}\n\t\tconst adjustColors = (colors: string[], target: string | ChromaticRecolorTarget) => {\n\t\t\tcolors.forEach((color) => {\n\t\t\t\tif (!this.colors[color]) return\n\t\t\t\tadjustedColors[color] = chromaticRecolor(this.colors[color], target)\n\t\t\t})\n\t\t}\n\t\tif (adjustments.backgrounds) {\n\t\t\tadjustColors(groupedDefaultWorkbenchColorKeys.backgrounds, adjustments.backgrounds)\n\t\t}\n\t\tif (adjustments.accents) {\n\t\t\tadjustColors(groupedDefaultWorkbenchColorKeys.accents, adjustments.accents)\n\t\t}\n\t\tif (adjustments.custom) {\n\t\t\tadjustments.custom.forEach((custom) => {\n\t\t\t\tadjustColors(custom.themeColorKeys, custom.targetHueAndChroma)\n\t\t\t})\n\t\t}\n\t\tObject.assign(this.colors, adjustedColors)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Processes the theme's syntax highlighting colors to ensure a minimum contrast ratio\n\t * between foreground and background colors.\n\t *\n\t * The default value of 5.5 ensures optimal accessibility with a contrast ratio of 5.5:1.\n\t *\n\t * You can optionally pass a custom background color to use for the contrast checks.\n\t * By default, the theme's background color will be used.\n\t *\n\t * Returns the same `ExpressiveCodeTheme` instance to allow chaining.\n\t */\n\tensureMinSyntaxHighlightingColorContrast(minContrast = 5.5, backgroundColor?: string) {\n\t\tconst fixedContrastCache = new Map<string, string>()\n\t\tconst fixContrast = (color: string) => {\n\t\t\tconst cachedResult = fixedContrastCache.get(color)\n\t\t\tif (cachedResult) return cachedResult\n\t\t\tconst newColor = ensureColorContrastOnBackground(color, backgroundColor || this.bg, minContrast)\n\t\t\tfixedContrastCache.set(color, newColor)\n\t\t\treturn newColor\n\t\t}\n\n\t\t// Fix contrast of plain text\n\t\tthis.colors['editor.foreground'] = fixContrast(this.colors['editor.foreground'])\n\t\tthis.fg = fixContrast(this.colors['editor.foreground'])\n\n\t\t// Fix contrast of token colors\n\t\tthis.settings.forEach((s) => {\n\t\t\tif (!s.settings.foreground) return\n\t\t\ts.settings.foreground = fixContrast(s.settings.foreground)\n\t\t})\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Parses the given theme settings into a properly typed format\n\t * that can be used by both Expressive Code and Shiki.\n\t *\n\t * As theme scopes can be defined as either a comma-separated string, or an array of strings,\n\t * they will always be converted to their array form to simplify further processing.\n\t *\n\t * Also recreates known object properties to prevent accidental mutation\n\t * of the original settings when copying a theme.\n\t */\n\tprivate parseThemeSettings(settings: unknown[] | undefined): ThemeSetting[] {\n\t\tif (!settings || !Array.isArray(settings)) return []\n\t\treturn settings.map((unknownSetting) => {\n\t\t\tconst { name, scope: anyScope, settings, ...rest } = unknownSetting as ThemeSetting\n\t\t\tconst scope: string[] | undefined = Array.isArray(anyScope) ? anyScope.slice() : typeof anyScope === 'string' ? (anyScope as string).split(/\\s*,\\s*/) : undefined\n\t\t\treturn {\n\t\t\t\t...(name !== undefined ? { name } : {}),\n\t\t\t\t...(scope !== undefined ? { scope } : {}),\n\t\t\t\tsettings: { ...settings },\n\t\t\t\t...rest,\n\t\t\t}\n\t\t})\n\t}\n\n\t/**\n\t * Attempts to parse the given JSON string as a theme.\n\t *\n\t * As some themes follow the JSONC format and may contain comments and trailing commas,\n\t * this method will attempt to strip them before parsing the result.\n\t */\n\tstatic fromJSONString(json: string) {\n\t\treturn new ExpressiveCodeTheme(JSON.parse(stripJsonComments(json, { trailingCommas: true })) as Partial<ExpressiveCodeTheme>)\n\t}\n}\n\nexport type ExpressiveCodeThemeInput = Partial<Omit<ExpressiveCodeTheme | ThemeRegistration, 'type'>> & {\n\ttype?: VSCodeThemeType | string | undefined\n\ttokenColors?: unknown | undefined\n\tsemanticHighlighting?: boolean | undefined\n\tstyleOverrides?: StyleOverrides | undefined\n}\n\nexport type ThemeSetting = {\n\tname?: string | undefined\n\tscope?: string[] | undefined\n\tsettings: {\n\t\tforeground?: string | undefined\n\t\tfontStyle?: string | undefined\n\t}\n}\n","import { UnresolvedStyleSettings, StyleSettingPath } from './style-settings'\n\n/**\n * Represents a strongly typed set of style settings provided by a plugin (or core).\n *\n * The constructor expects an object with a `defaultSettings` property. This property must contain\n * the default values for all settings and will be made available as a public instance property.\n * Allowed default value types are plain values (e.g. strings), an array of two values\n * to provide a dark and light variant, or resolver functions that return one of these types.\n *\n * If you are writing a plugin that provides style overrides, please merge your style overrides\n * into the `StyleOverrides` interface declaration provided by the `@expressive-code/core` module.\n * You can see an example of this below.\n *\n * As a plugin author, you should also assign an instance of this class to your plugin's\n * `styleSettings` property. This allows the engine to automatically declare CSS variables\n * for your style settings in all theme variants defined in the config.\n *\n * To consume the CSS variables in your plugin's `baseStyles` or anywhere else, see the\n * {@link cssVar} method to get a CSS variable reference to any style setting.\n *\n * If CSS variables should not be generated for some of your style settings, you can exclude them\n * using the `cssVarExclusions` property of the object passed to the constructor.\n *\n * @example\n * // When using TypeScript: Declare the types of your style settings\n * interface FramesStyleSettings {\n *   fontFamily: string\n *   fontSize: string\n *   minContrast: string\n *   titleBarForeground: string\n * }\n *\n * // When using TypeScript: Merge your style settings into the core module's `StyleSettings`\n * declare module '@expressive-code/core' {\n *   export interface StyleSettings {\n *     frames: FramesStyleSettings\n *   }\n * }\n *\n * const framesStyleSettings = new PluginStyleSettings({\n *   defaultValues: {\n *     frames: {\n *       fontFamily: 'sans-serif',\n *       fontSize: '1rem',\n *       minContrast: '5',\n *       titleBarForeground: ({ theme }) => theme.colors['editor.foreground'],\n *     }\n *   },\n *   cssVarExclusions: ['frames.minContrast'],\n * })\n *\n * // ↓↓↓\n *\n * framesStyleSettings.defaultValues.frames.fontFamily         // 'sans-serif'\n * framesStyleSettings.defaultValues.frames.fontSize           // '1rem'\n * framesStyleSettings.defaultValues.frames.minContrast        // '5'\n * framesStyleSettings.defaultValues.frames.titleBarForeground // ({ theme }) => theme.colors['editor.foreground']\n */\nexport class PluginStyleSettings {\n\treadonly defaultValues: Partial<UnresolvedStyleSettings>\n\treadonly cssVarExclusions: StyleSettingPath[]\n\n\tconstructor({ defaultValues, cssVarExclusions = [] }: { defaultValues: Partial<UnresolvedStyleSettings>; cssVarExclusions?: StyleSettingPath[] | undefined }) {\n\t\tthis.defaultValues = defaultValues\n\t\tthis.cssVarExclusions = cssVarExclusions\n\t}\n}\n","import { lighten, ensureColorContrastOnBackground, setAlpha } from '../helpers/color-transforms'\nimport { ResolverContext } from '../common/plugin'\nimport { PluginStyleSettings } from '../common/plugin-style-settings'\nimport { UnresolvedStyleSettings, codeLineClass } from '../common/style-settings'\n\nexport interface CoreStyleSettings {\n\t/**\n\t * Border radius of code blocks.\n\t * @default '0.3rem'\n\t */\n\tborderRadius: string\n\t/**\n\t * Border width of code blocks.\n\t * @default '1.5px'\n\t */\n\tborderWidth: string\n\t/**\n\t * Border color of code blocks.\n\t * @default\n\t * ({ theme }) => theme.colors['titleBar.border'] || lighten(theme.colors['editor.background'], theme.type === 'dark' ? 0.5 : -0.15) || 'transparent'\n\t */\n\tborderColor: string\n\t/**\n\t * Font family of code content.\n\t * @default \"ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace\"\n\t */\n\tcodeFontFamily: string\n\t/**\n\t * Font size of code content.\n\t * @default '0.85rem'\n\t */\n\tcodeFontSize: string\n\t/**\n\t * Font weight of code content.\n\t * @default '400'\n\t */\n\tcodeFontWeight: string\n\t/**\n\t * Font line height of code content.\n\t * @default '1.65'\n\t */\n\tcodeLineHeight: string\n\t/**\n\t * Block-level padding (= top and bottom padding in horizontal writing mode)\n\t * around the code content inside code blocks.\n\t * @default '1rem'\n\t */\n\tcodePaddingBlock: string\n\t/**\n\t * Inline-level padding (= left and right padding in horizontal writing mode)\n\t * around the code content inside code blocks.\n\t * @default '1.35rem'\n\t */\n\tcodePaddingInline: string\n\t/**\n\t * Background color of code blocks.\n\t * @default\n\t * ({ theme }) => theme.colors['editor.background']\n\t */\n\tcodeBackground: string\n\t/**\n\t * Foreground color of code, unless overwritten by syntax highlighting.\n\t * @default\n\t * ({ theme }) => theme.colors['editor.foreground']\n\t */\n\tcodeForeground: string\n\t/**\n\t * Background color of selected code, unless selection color customization is disabled\n\t * by the option `useThemedSelectionColors`.\n\t * @default\n\t * ({ theme }) => theme.colors['editor.selectionBackground']\n\t */\n\tcodeSelectionBackground: string\n\t/**\n\t * Default color of the border between the gutter and code content,\n\t * unless overwritten by a line-level annotation.\n\t *\n\t * Only visible if a gutter is present (e.g. to display line numbers).\n\t *\n\t * @default\n\t * ({ theme }) => lighten(theme.colors['editor.background'], theme.type === 'dark' ? 0.2 : -0.15)\n\t */\n\tgutterBorderColor: string\n\t/**\n\t * Width of the border between the gutter and code content.\n\t *\n\t * @default '1.5px'\n\t */\n\tgutterBorderWidth: string\n\t/**\n\t * Default foreground color of gutter elements.\n\t *\n\t * @default\n\t * ({ theme, resolveSetting }) => ensureColorContrastOnBackground(theme.colors['editorLineNumber.foreground'] || resolveSetting('codeForeground'), resolveSetting('codeBackground'), 3.3, 3.6)\n\t */\n\tgutterForeground: string\n\t/**\n\t * Default foreground color of gutter elements in highlighted lines.\n\t *\n\t * @default\n\t * ({ theme, resolveSetting }) => ensureColorContrastOnBackground(theme.colors['editorLineNumber.activeForeground'] || theme.colors['editorLineNumber.foreground'] || resolveSetting('codeForeground'), resolveSetting('codeBackground'), 4.5, 5)\n\t */\n\tgutterHighlightForeground: string\n\t/**\n\t * Font family of UI elements.\n\t * @default \"ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'\"\n\t */\n\tuiFontFamily: string\n\t/**\n\t * Font size of UI elements.\n\t * @default '0.9rem'\n\t */\n\tuiFontSize: string\n\t/**\n\t * Font weight of UI elements.\n\t * @default '400'\n\t */\n\tuiFontWeight: string\n\t/**\n\t * Font line height of UI elements.\n\t * @default '1.65'\n\t */\n\tuiLineHeight: string\n\t/**\n\t * Block-level padding (= top and bottom padding in horizontal writing mode)\n\t * of UI elements like tabs, buttons etc.\n\t * @default '0.25rem'\n\t */\n\tuiPaddingBlock: string\n\t/**\n\t * Inline-level padding (= left and right padding in horizontal writing mode)\n\t * of UI elements like tabs, buttons etc.\n\t * @default '1rem'\n\t */\n\tuiPaddingInline: string\n\t/**\n\t * Background color of selected UI elements, unless selection color customization is disabled\n\t * by the option `useThemedSelectionColors`.\n\t * @default\n\t * ({ theme }) => theme.colors['menu.selectionBackground']\n\t */\n\tuiSelectionBackground: string\n\t/**\n\t * Foreground color of selected UI elements, unless selection color customization is disabled\n\t * by the option `useThemedSelectionColors`.\n\t * @default\n\t * ({ theme }) => theme.colors['menu.selectionForeground']\n\t */\n\tuiSelectionForeground: string\n\t/**\n\t * Color of the focus border around focused elements.\n\t * @default\n\t * ({ theme }) => theme.colors['focusBorder']\n\t */\n\tfocusBorder: string\n\t/**\n\t * Color of the scrollbar thumb, unless scrollbar color customization is disabled\n\t * by the option `useThemedScrollbars`.\n\t * @default\n\t * ({ theme }) => theme.colors['scrollbarSlider.background']\n\t */\n\tscrollbarThumbColor: string\n\t/**\n\t * Color of the scrollbar thumb when hovered, unless scrollbar color customization is disabled\n\t * by the option `useThemedScrollbars`.\n\t * @default\n\t * ({ theme }) => theme.colors['scrollbarSlider.hoverBackground']\n\t */\n\tscrollbarThumbHoverColor: string\n}\n\nexport const coreStyleSettings = new PluginStyleSettings({\n\tdefaultValues: {\n\t\t// Outer container\n\t\tborderRadius: '0.3rem',\n\t\tborderWidth: '1.5px',\n\t\tborderColor: ({ theme }) => theme.colors['titleBar.border'] || lighten(theme.colors['editor.background'], theme.type === 'dark' ? 0.5 : -0.15) || 'transparent',\n\t\t// Code editor content\n\t\tcodeFontFamily: minifyFontFamily(`ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace`),\n\t\tcodeFontSize: '0.85rem',\n\t\tcodeFontWeight: '400',\n\t\tcodeLineHeight: '1.65',\n\t\tcodePaddingBlock: '1rem',\n\t\tcodePaddingInline: '1.35rem',\n\t\tcodeBackground: ({ theme }) => theme.colors['editor.background'],\n\t\tcodeForeground: ({ theme }) => theme.colors['editor.foreground'],\n\t\tcodeSelectionBackground: ({ theme }) => theme.colors['editor.selectionBackground'],\n\t\t// Gutter\n\t\tgutterBorderColor: ({ resolveSetting }) => setAlpha(resolveSetting('gutterForeground'), 0.2),\n\t\tgutterBorderWidth: '1.5px',\n\t\tgutterForeground: ({ theme, resolveSetting }) =>\n\t\t\tensureColorContrastOnBackground(theme.colors['editorLineNumber.foreground'] || resolveSetting('codeForeground'), resolveSetting('codeBackground'), 3.3, 3.6),\n\t\tgutterHighlightForeground: ({ theme, resolveSetting }) =>\n\t\t\tensureColorContrastOnBackground(\n\t\t\t\ttheme.colors['editorLineNumber.activeForeground'] || theme.colors['editorLineNumber.foreground'] || resolveSetting('codeForeground'),\n\t\t\t\tresolveSetting('codeBackground'),\n\t\t\t\t4.5,\n\t\t\t\t5\n\t\t\t),\n\t\t// UI elements\n\t\tuiFontFamily: minifyFontFamily(\n\t\t\t`ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'`\n\t\t),\n\t\tuiFontSize: '0.9rem',\n\t\tuiFontWeight: '400',\n\t\tuiLineHeight: '1.65',\n\t\tuiPaddingBlock: '0.25rem',\n\t\tuiPaddingInline: '1rem',\n\t\tuiSelectionBackground: ({ theme }) => theme.colors['menu.selectionBackground'],\n\t\tuiSelectionForeground: ({ theme }) => theme.colors['menu.selectionForeground'],\n\t\t// Special colors\n\t\tfocusBorder: ({ theme }) => theme.colors['focusBorder'],\n\t\tscrollbarThumbColor: ({ theme, resolveSetting }) => ensureColorContrastOnBackground(theme.colors['scrollbarSlider.background'], resolveSetting('codeBackground'), 1, 2),\n\t\tscrollbarThumbHoverColor: ({ theme, resolveSetting }) =>\n\t\t\tensureColorContrastOnBackground(theme.colors['scrollbarSlider.hoverBackground'], resolveSetting('codeBackground'), 2.5, 3.5),\n\t} satisfies UnresolvedStyleSettings,\n})\n\nexport function getCoreBaseStyles({\n\tcssVar,\n\tuseStyleReset,\n\tuseThemedScrollbars,\n\tuseThemedSelectionColors,\n}: {\n\tcssVar: ResolverContext['cssVar']\n\tuseStyleReset: boolean\n\tuseThemedScrollbars: boolean\n\tuseThemedSelectionColors: boolean\n}) {\n\tconst ifThemedScrollbars = (css: string) => (useThemedScrollbars ? css : '')\n\tconst ifThemedSelectionColors = (css: string) => (useThemedSelectionColors ? css : '')\n\n\treturn `\n\t\tfont-family: ${cssVar('uiFontFamily')};\n\t\tfont-size: ${cssVar('uiFontSize')};\n\t\tfont-weight: ${cssVar('uiFontWeight')};\n\t\tline-height: ${cssVar('uiLineHeight')};\n\t\ttext-size-adjust: none;\n\t\t-webkit-text-size-adjust: none;\n\n\t\t*:not(path) {\n\t\t\t${useStyleReset ? 'all: revert;' : ''}\n\t\t\tbox-sizing: border-box;\n\t\t}\n\n\t\t${ifThemedSelectionColors(`::selection {\n\t\t\tbackground: ${cssVar('uiSelectionBackground')};\n\t\t\tcolor: ${cssVar('uiSelectionForeground')};\n\t\t}`)}\n\n\t\tpre {\n\t\t\tdisplay: flex;\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\tborder: ${cssVar('borderWidth')} solid ${cssVar('borderColor')};\n\t\t\tborder-radius: calc(${cssVar('borderRadius')} + ${cssVar('borderWidth')});\n\t\t\tbackground: ${cssVar('codeBackground')};\n\n\t\t\t&:focus-visible {\n\t\t\t\toutline: 3px solid ${cssVar('focusBorder')};\n\t\t\t\toutline-offset: -3px;\n\t\t\t}\n\n\t\t\t& > code {\n\t\t\t\tall: unset;\n\t\t\t\tdisplay: block;\n\t\t\t\tflex: 1 0 100%;\n\n\t\t\t\tpadding: ${cssVar('codePaddingBlock')} 0;\n\t\t\t\tcolor: ${cssVar('codeForeground')};\n\n\t\t\t\tfont-family: ${cssVar('codeFontFamily')};\n\t\t\t\tfont-size: ${cssVar('codeFontSize')};\n\t\t\t\tfont-weight: ${cssVar('codeFontWeight')};\n\t\t\t\tline-height: ${cssVar('codeLineHeight')};\n\t\t\t}\n\n\t\t\t${ifThemedSelectionColors(`::selection {\n\t\t\t\tbackground: ${cssVar('codeSelectionBackground')};\n\t\t\t\tcolor: inherit;\n\t\t\t}`)}\n\n\t\t\t/* Show horizontal scrollbar if required */\n\t\t\toverflow-x: auto;\n\n\t\t\t/* Enable word wrapping on demand */\n\t\t\t&.wrap .${codeLineClass} .code {\n\t\t\t\twhite-space: pre-wrap;\n\t\t\t\toverflow-wrap: break-word;\n\t\t\t\tmin-width: min(20ch, var(--ecMaxLine, 20ch));\n\t\t\t\t& span.indent {\n\t\t\t\t\twhite-space: pre;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t${ifThemedScrollbars(`\n\t\t\t&::-webkit-scrollbar,\n\t\t\t&::-webkit-scrollbar-track {\n\t\t\t\tbackground-color: inherit;\n\t\t\t\tborder-radius: calc(${cssVar('borderRadius')} + ${cssVar('borderWidth')});\n\t\t\t\tborder-top-left-radius: 0;\n\t\t\t\tborder-top-right-radius: 0;\n\t\t\t}\n\t\t\t&::-webkit-scrollbar-thumb {\n\t\t\t\tbackground-color: ${cssVar('scrollbarThumbColor')};\n\t\t\t\tborder: 4px solid transparent;\n\t\t\t\tbackground-clip: content-box;\n\t\t\t\tborder-radius: 10px;\n\t\t\t}\n\t\t\t&::-webkit-scrollbar-thumb:hover {\n\t\t\t\tbackground-color: ${cssVar('scrollbarThumbHoverColor')};\n\t\t\t}\n\t\t\t`)}\n\t\t}\n\n\t\t/* Code lines */\n\t\t.${codeLineClass} {\n\t\t\t/* RTL support: Code is always LTR */\n\t\t\tdirection: ltr;\n\t\t\tunicode-bidi: isolate;\n\n\t\t\t/* Prepare grid layout for optional gutter */\n\t\t\tdisplay: grid;\n\t\t\tgrid-template-areas: 'gutter code';\n\t\t\tgrid-template-columns: auto 1fr;\n\t\t\tposition: relative;\n\n\t\t\t.gutter {\n\t\t\t\tgrid-area: gutter;\n\t\t\t\tcolor: ${cssVar('gutterForeground')};\n\n\t\t\t\t/* Make all gutter elements non-interactive by default */\n\t\t\t\t& > * {\n\t\t\t\t\tpointer-events: none;\n\t\t\t\t\tuser-select: none;\n\t\t\t\t\t-webkit-user-select: none;\n\t\t\t\t}\n\n\t\t\t\t/* Apply conditional styles if a gutter is present */\n\t\t\t\t& ~ .code {\n\t\t\t\t\t--ecLineBrdCol: ${cssVar('gutterBorderColor')};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&.highlight .gutter {\n\t\t\t\tcolor: ${cssVar('gutterHighlightForeground')};\n\t\t\t}\n\n\t\t\t.code {\n\t\t\t\tgrid-area: code;\n\t\t\t\tposition: relative;\n\t\t\t\tbox-sizing: content-box;\n\t\t\t\tpadding-inline-start: calc(var(--ecIndent, 0ch) + ${cssVar('codePaddingInline')} - var(--ecGtrBrdWd));\n\t\t\t\tpadding-inline-end: ${cssVar('codePaddingInline')};\n\t\t\t\ttext-indent: calc(var(--ecIndent, 0ch) * -1);\n\n\t\t\t\t&::before,\n\t\t\t\t&::after,\n\t\t\t\t& :where(*) {\n\t\t\t\t\ttext-indent: 0;\n\t\t\t\t}\n\n\t\t\t\t/* Support a colorful border on the start of the code line */\n\t\t\t\t--ecGtrBrdWd: ${cssVar('gutterBorderWidth')};\n\t\t\t\tborder-inline-start: var(--ecGtrBrdWd) solid var(--ecLineBrdCol, transparent);\n\t\t\t}\n\t\t}\n\n\t\t/* Increase end padding of the first line for the copy button */\n\t\t:nth-child(1 of .${codeLineClass}) .code {\n\t\t\tpadding-inline-end: calc(2rem + ${cssVar('codePaddingInline')});\n\t\t}\n\n\t\t/* Common style to hide elements from screen readers */\n\t\t.sr-only {\n\t\t\tposition: absolute;\n\t\t\twidth: 1px;\n\t\t\theight: 1px;\n\t\t\tpadding: 0;\n\t\t\tmargin: -1px;\n\t\t\toverflow: hidden;\n\t\t\tclip: rect(0, 0, 0, 0);\n\t\t\twhite-space: nowrap;\n\t\t\tborder-width: 0;\t\t\t\t\t\t\t\n\t\t}\n\t`\n}\n\nexport function getCoreThemeStyles(styleVariantIndex: number) {\n\treturn `\n\t\t/* Theme-dependent styles for InlineStyleAnnotation */\n\t\t.${codeLineClass} :where(span[style^='--']:not([class])) {\n\t\t\tcolor: var(--${styleVariantIndex}, inherit);\n\t\t\tfont-style: var(--${styleVariantIndex}fs, inherit);\n\t\t\tfont-weight: var(--${styleVariantIndex}fw, inherit);\n\t\t\ttext-decoration: var(--${styleVariantIndex}td, inherit);\n\t\t}\n\t`\n}\n\nfunction minifyFontFamily(fontFamily: string) {\n\treturn fontFamily\n\t\t.split(',')\n\t\t.map((font) => font.trim())\n\t\t.join(',')\n}\n","import { coreStyleSettings } from './core-styles'\nimport { ExpressiveCodePlugin, ResolverContext } from '../common/plugin'\nimport { StyleOverrides, ResolvedStyleSettingsByPath, StyleSettingPath, StyleValueOrValues, UnresolvedStyleValue } from '../common/style-settings'\nimport { ExpressiveCodeTheme } from '../common/theme'\n\n/**\n * Resolves all style settings contributed by core & plugins for the given theme.\n *\n * Respects both theme and global `styleOverrides` (theme overrides take precedence).\n */\nexport function resolveStyleSettings({\n\ttheme,\n\tstyleVariantIndex,\n\tplugins,\n\tstyleOverrides,\n}: {\n\ttheme: ExpressiveCodeTheme\n\tstyleVariantIndex: number\n\tplugins: readonly ExpressiveCodePlugin[]\n\tstyleOverrides: StyleOverrides | undefined\n}): ResolvedStyleSettingsByPath {\n\tconst attemptedToResolve = new Set<StyleSettingPath>()\n\tconst resolvedByPath: ResolvedStyleSettingsByPath = new Map()\n\tconst resolverArgs = { theme, styleVariantIndex, resolveSetting }\n\n\t// Start by mapping all core setting paths to their default values\n\tconst unresolvedByPath = getStyleSettingsByPath(coreStyleSettings.defaultValues)\n\n\t// Add all plugin settings with their default values\n\tplugins.forEach((plugin) => {\n\t\tif (!plugin.styleSettings) return\n\t\tapplyStyleSettings(unresolvedByPath, getStyleSettingsByPath(plugin.styleSettings.defaultValues))\n\t})\n\n\t// Apply any global style overrides\n\tapplyStyleSettings(unresolvedByPath, getStyleSettingsByPath(styleOverrides ?? {}))\n\n\t// Apply any theme style overrides\n\tapplyStyleSettings(unresolvedByPath, getStyleSettingsByPath(theme.styleOverrides ?? {}))\n\n\t// Define a setting resolver function that can be used both by plugins and ourselves\n\tfunction resolveSetting(settingPath: StyleSettingPath): string {\n\t\tlet result = resolvedByPath.get(settingPath)\n\t\tif (result === undefined && !resolvedByPath.has(settingPath)) {\n\t\t\tif (attemptedToResolve.has(settingPath)) throw new Error(`Circular dependency detected while resolving style setting '${settingPath as string}'`)\n\t\t\tattemptedToResolve.add(settingPath)\n\n\t\t\tconst valueOrResolver = unresolvedByPath.get(settingPath)\n\t\t\tconst resolvedDefinition = (typeof valueOrResolver === 'function' ? valueOrResolver(resolverArgs) : valueOrResolver) as StyleValueOrValues\n\t\t\tresult = Array.isArray(resolvedDefinition) ? resolvedDefinition[theme.type === 'dark' ? 0 : 1] : resolvedDefinition\n\n\t\t\tresolvedByPath.set(settingPath, result)\n\t\t}\n\t\tif (result === undefined)\n\t\t\tthrow new Error(\n\t\t\t\t`Failed to resolve style setting '${settingPath as string}' for theme '${\n\t\t\t\t\ttheme.name\n\t\t\t\t}': The resolved value was undefined. This could be caused by your plugins or styleOverrides.`\n\t\t\t)\n\t\treturn result\n\t}\n\n\t// Resolve all settings\n\tunresolvedByPath.forEach((_, settingPath) => resolveSetting(settingPath))\n\n\treturn resolvedByPath\n}\n\n/**\n * Generates CSS variable declarations from the given resolved style settings.\n *\n * Style setting paths excluded by any of the plugins (`<plugin>.styleSettings.cssVarExclusions`)\n * are automatically omitted from the returned map.\n */\nexport function getCssVarDeclarations({\n\tresolvedStyleSettings,\n\tplugins,\n\tcssVarName,\n}: {\n\tresolvedStyleSettings: ResolvedStyleSettingsByPath\n\tplugins: readonly ExpressiveCodePlugin[]\n\tcssVarName: ResolverContext['cssVarName']\n}): Map<string, string> {\n\tconst cssVarDeclarations = new Map<string, string>()\n\tconst excludedPaths = new Set<StyleSettingPath>()\n\tplugins.forEach((plugin) => {\n\t\tplugin.styleSettings?.cssVarExclusions.forEach((path) => excludedPaths.add(path))\n\t})\n\tresolvedStyleSettings.forEach((value, path) => {\n\t\tif (excludedPaths.has(path)) return\n\t\tcssVarDeclarations.set(cssVarName(path), value)\n\t})\n\treturn cssVarDeclarations\n}\n\ntype UnresolvedStyleSettingsByPath = Map<StyleSettingPath, UnresolvedStyleValue>\n\n/**\n * Converts the given style settings object into a map of style setting paths to values.\n *\n * This non-nested format makes it easier to process the settings later on.\n */\nfunction getStyleSettingsByPath(styleSettings: { [K: string]: UnresolvedStyleValue | { [K: string]: UnresolvedStyleValue } }): UnresolvedStyleSettingsByPath {\n\tconst result: UnresolvedStyleSettingsByPath = new Map()\n\n\tfor (const [key, value] of Object.entries(styleSettings)) {\n\t\tif (typeof value === 'object' && !Array.isArray(value)) {\n\t\t\tObject.entries(value).forEach(([subKey, subValue]) => {\n\t\t\t\tresult.set(`${key}.${subKey}` as StyleSettingPath, subValue)\n\t\t\t})\n\t\t} else {\n\t\t\tresult.set(key as StyleSettingPath, value)\n\t\t}\n\t}\n\n\treturn result\n}\n\n/**\n * Applies any non-`undefined` values from `source` to `target`.\n */\nfunction applyStyleSettings(target: UnresolvedStyleSettingsByPath, source: UnresolvedStyleSettingsByPath) {\n\tsource.forEach((value, path) => value !== undefined && target.set(path, value))\n}\n","import { resolveStyleSettings, getCssVarDeclarations } from '../internal/style-resolving'\nimport { ExpressiveCodePlugin, ResolverContext } from './plugin'\nimport { ResolvedStyleSettingsByPath, StyleOverrides } from './style-settings'\nimport { ExpressiveCodeTheme } from './theme'\n\nexport type StyleVariant = {\n\ttheme: ExpressiveCodeTheme\n\tresolvedStyleSettings: ResolvedStyleSettingsByPath\n\tcssVarDeclarations: Map<string, string>\n}\n\n/**\n * Maps the given `themes` to an array of {@link StyleVariant `StyleVariant`} objects,\n * doing the following per theme:\n * - Resolving all style settings contributed by core & plugins,\n *   respecting both theme and global `styleOverrides` (theme overrides take precedence)\n * - Generating CSS variable declarations for the resolved style settings\n */\nexport function resolveStyleVariants({\n\tthemes,\n\tplugins,\n\tstyleOverrides,\n\tcssVarName,\n}: {\n\tthemes: ExpressiveCodeTheme[]\n\tplugins: readonly ExpressiveCodePlugin[]\n\tstyleOverrides: StyleOverrides\n\tcssVarName: ResolverContext['cssVarName']\n}): StyleVariant[] {\n\treturn themes.map((theme, styleVariantIndex) => {\n\t\t// Resolve all style settings contributed by core & plugins,\n\t\t// respecting both global and theme `styleOverrides` (theme overrides take precedence)\n\t\tconst resolvedStyleSettings = resolveStyleSettings({ theme, styleVariantIndex, plugins, styleOverrides })\n\n\t\t// Generate CSS variable declarations for the resolved style settings,\n\t\t// omitting any settings excluded from CSS variable output by plugins\n\t\tconst cssVarDeclarations = getCssVarDeclarations({ resolvedStyleSettings, plugins, cssVarName })\n\n\t\treturn {\n\t\t\ttheme,\n\t\t\tresolvedStyleSettings,\n\t\t\tcssVarDeclarations,\n\t\t}\n\t})\n}\n","/*\n\tGENERATED FILE - DO NOT EDIT\n\t----------------------------\n\tThis JS module code was built from the source file \"tabindex-js-module.ts\".\n\tTo change it, modify the source file and then re-run the build script.\n*/\n\nexport default 'try{(()=>{function i(e){if(!e)return;let r=e.getAttribute(\"tabindex\")!==null,t=e.scrollWidth>e.clientWidth;t&&!r?e.setAttribute(\"tabindex\",\"0\"):!t&&r&&e.removeAttribute(\"tabindex\")}function a(e){let r=new Set,t;return new ResizeObserver(u=>{u.forEach(o=>r.add(o.target)),t&&clearTimeout(t),t=setTimeout(()=>{t=void 0,r.forEach(o=>e(o)),r.clear()},250)})}function s(e,r){e.querySelectorAll?.(\".expressive-code pre > code\").forEach(t=>{let n=t.parentElement;n&&(i(n),r.observe(n))})}var d=a(i);s(document,d);var c=new MutationObserver(e=>e.forEach(r=>r.addedNodes.forEach(t=>{s(t,d)})));c.observe(document.body,{childList:!0,subtree:!0});document.addEventListener(\"astro:page-load\",()=>{s(document,d)});})();}catch(e){console.error(\"[EC] tabindex-js-module failed:\",e)}'\n","import { AnnotationRenderOptions, ExpressiveCodeAnnotation, isInlineStyleAnnotation } from '../common/annotation'\nimport { ExpressiveCodePlugin } from '../common/plugin'\nimport { h } from '../hast'\nimport tabindexJsModule from './tabindex-js-module.min'\n\nexport const corePlugins: ExpressiveCodePlugin[] = [\n\t{\n\t\tname: 'Indent wrapper',\n\t\thooks: {\n\t\t\tpostprocessAnnotations: ({ codeBlock }) => {\n\t\t\t\tcodeBlock.getLines().forEach((line) => {\n\t\t\t\t\tconst indent = line.text.match(/^\\s+/)?.[0].length ?? 0\n\t\t\t\t\tif (indent > 0) {\n\t\t\t\t\t\t// Remove any unnecessary inline styles inside the indent\n\t\t\t\t\t\tline.getAnnotations().forEach((annotation) => {\n\t\t\t\t\t\t\tconst { inlineRange } = annotation\n\t\t\t\t\t\t\tif (!inlineRange || !isInlineStyleAnnotation(annotation)) return\n\t\t\t\t\t\t\tif (inlineRange.columnStart >= 0 && inlineRange?.columnEnd <= indent) {\n\t\t\t\t\t\t\t\tline.deleteAnnotation(annotation)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t// Add an annotation to the indent to prevent wrapping\n\t\t\t\t\t\tline.addAnnotation(\n\t\t\t\t\t\t\tnew IndentAnnotation({\n\t\t\t\t\t\t\t\tinlineRange: { columnStart: 0, columnEnd: indent },\n\t\t\t\t\t\t\t\trenderPhase: 'earlier',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tname: 'Scrollable block tabindex',\n\t\tjsModules: [tabindexJsModule],\n\t},\n]\n\nclass IndentAnnotation extends ExpressiveCodeAnnotation {\n\trender({ nodesToTransform }: AnnotationRenderOptions) {\n\t\treturn nodesToTransform.map((node) => h('span.indent', node))\n\t}\n}\n","import githubDark from 'shiki/themes/github-dark.mjs'\nimport githubLight from 'shiki/themes/github-light.mjs'\nimport { ExpressiveCodePlugin, ResolverContext } from './plugin'\nimport { renderGroup, RenderInput, RenderOptions } from '../internal/render-group'\nimport { ExpressiveCodeTheme } from './theme'\nimport { PluginStyles, scopeAndMinifyNestedCss, processPluginStyles, wrapInCascadeLayer } from '../internal/css'\nimport { getCoreBaseStyles, getCoreThemeStyles } from '../internal/core-styles'\nimport { StyleVariant, resolveStyleVariants } from './style-variants'\nimport { StyleOverrides, StyleSettingPath, getCssVarName } from './style-settings'\nimport { ExpressiveCodeLogger, ExpressiveCodeLoggerOptions } from './logger'\nimport { resolveStyleSettings } from '../internal/style-resolving'\nimport { getFirstStaticColor } from '../helpers/color-transforms'\nimport { ExpressiveCodeBlock } from './block'\nimport { corePlugins } from '../internal/core-plugins'\n\nexport interface ExpressiveCodeEngineConfig {\n\t/**\n\t * The color themes that should be available for your code blocks.\n\t *\n\t * CSS variables will be generated for all themes, allowing to select the theme to display\n\t * using CSS. If you specify one dark and one light theme, a `prefers-color-scheme` media query\n\t * will also be generated by default. You can customize this to match your site's needs\n\t * through the `useDarkModeMediaQuery` and `themeCssSelector` options.\n\t *\n\t * Defaults to the `github-dark` and `github-light` themes.\n\t */\n\tthemes?: ExpressiveCodeTheme[] | undefined\n\t/**\n\t * Determines if Expressive Code should process the syntax highlighting colors of all themes\n\t * to ensure an accessible minimum contrast ratio between foreground and background colors.\n\t *\n\t * Defaults to `5.5`, which ensures a contrast ratio of at least 5.5:1.\n\t * You can change the desired contrast ratio by providing another value,\n\t * or turn the feature off by setting this option to `0`.\n\t */\n\tminSyntaxHighlightingColorContrast?: number | undefined\n\t/**\n\t * Determines if CSS code is generated that uses a `prefers-color-scheme` media query\n\t * to automatically switch between light and dark themes based on the user's system preferences.\n\t *\n\t * Defaults to `true` if your `themes` option is set to one dark and one light theme\n\t * (which is the default), and `false` otherwise.\n\t */\n\tuseDarkModeMediaQuery?: boolean | undefined\n\t/**\n\t * Allows to customize the base selector used to scope theme-dependent CSS styles.\n\t *\n\t * By default, this selector is `:root`, which ensures that all required CSS variables\n\t * are globally available.\n\t */\n\tthemeCssRoot?: string | undefined\n\t/**\n\t * Allows to customize the selectors used to manually switch between multiple themes.\n\t *\n\t * These selectors are useful if you want to allow your users to choose a theme\n\t * instead of relying solely on the media query generated by `useDarkModeMediaQuery`.\n\t *\n\t * Default value:\n\t * ```js\n\t * (theme) => `[data-theme='${theme.name}']`\n\t * ```\n\t *\n\t * You can add a theme selector either to your `<html>` element (which is targeted\n\t * by the `themeCssRoot` default value of `:root`), and/or any individual code block wrapper.\n\t *\n\t * For example, when using the default settings, selecting the theme `github-light`\n\t * for the entire page would look like this:\n\t * ```html\n\t * <html data-theme=\"github-light\">\n\t * ```\n\t *\n\t * If your site's theme switcher requires a different approach, you can customize the selectors\n\t * using this option. For example, if you want to use class names instead of a data attribute,\n\t * you could set this option to a function that returns `.theme-${theme.name}` instead.\n\t *\n\t * If you want to prevent the generation of theme-specific CSS rules altogether,\n\t * you can set this to `false` or return it from the function.\n\t */\n\tthemeCssSelector?: ((theme: ExpressiveCodeTheme, context: { styleVariants: StyleVariant[] }) => string | false) | false | undefined\n\t/**\n\t * Allows to specify a CSS cascade layer name that should be used for all generated CSS.\n\t *\n\t * If you are using [cascade layers](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_layers)\n\t * on your site to control the order in which CSS rules are applied, set this option to\n\t * a non-empty string, and Expressive Code will wrap all of its generated CSS styles\n\t * in a `@layer` rule with the given name.\n\t */\n\tcascadeLayer?: string | undefined\n\t/**\n\t * Determines if code blocks should be protected against influence from site-wide styles.\n\t *\n\t * Defaults to `true`, which causes Expressive Code to use the declaration `all: revert`\n\t * to revert all CSS properties to the values they would have had without any site-wide styles.\n\t * This ensures the most predictable results out of the box.\n\t *\n\t * You can set this to `false` if you want your site-wide styles to influence the code blocks.\n\t */\n\tuseStyleReset?: boolean | undefined\n\t/**\n\t * This optional function is called once per theme during engine initialization\n\t * with the loaded theme as its only argument.\n\t *\n\t * It allows customizing the loaded theme and can be used for various purposes:\n\t * - You can change a theme's `name` property to influence the CSS needed to select it\n\t *   (e.g., when using the default settings for `themeCssRoot` and `themeCssSelector`,\n\t *   setting `theme.name = 'dark'` will allow theme selection using `<html data-theme=\"dark\">`).\n\t * - You can create color variations of themes by using `theme.applyHueAndChromaAdjustments()`.\n\t *\n\t * You can optionally return an `ExpressiveCodeTheme` instance from this function to replace\n\t * the theme provided in the configuration. This allows you to create a copy of the theme\n\t * and modify it without affecting the original instance.\n\t */\n\tcustomizeTheme?: ((theme: ExpressiveCodeTheme) => ExpressiveCodeTheme | void) | undefined\n\t/**\n\t * Whether the themes are allowed to style the scrollbars. Defaults to `true`.\n\t *\n\t * If set to `false`, scrollbars will be rendered using the browser's default style.\n\t *\n\t * Note that you can override the individual scrollbar colors defined by the theme\n\t * using the `styleOverrides` option.\n\t */\n\tuseThemedScrollbars?: boolean | undefined\n\t/**\n\t * Whether the themes are allowed to style selected text. Defaults to `false`.\n\t *\n\t * By default, Expressive Code renders selected text in code blocks using the browser's\n\t * default style to maximize accessibility. If you want your selections to be more colorful,\n\t * you can set this option to `true` to allow using theme selection colors instead.\n\t *\n\t * Note that you can override the individual selection colors defined by the theme\n\t * using the `styleOverrides` option.\n\t */\n\tuseThemedSelectionColors?: boolean | undefined\n\t/**\n\t * An optional set of style overrides that can be used to customize the appearance of\n\t * the rendered code blocks without having to write custom CSS.\n\t *\n\t * The root level of this nested object contains core styles like colors, fonts, paddings\n\t * and more. Plugins can contribute their own style settings to this object as well.\n\t * For example, if the `frames` plugin is enabled, you can override its `shadowColor` by\n\t * setting `styleOverrides.frames.shadowColor` to a color value.\n\t *\n\t * If any of the settings are not given, default values will be used or derived from the theme.\n\t *\n\t * **Tip:** If your site uses CSS variables for styling, you can also use these overrides\n\t * to replace any core style with a CSS variable reference, e.g. `var(--your-css-var)`.\n\t */\n\tstyleOverrides?: StyleOverrides | undefined\n\t/**\n\t * The locale that should be used for text content. Defaults to `en-US`.\n\t */\n\tdefaultLocale?: string | undefined\n\t/**\n\t * An optional set of default props for all code blocks in your project.\n\t *\n\t * For example, setting this to `{ wrap: true }` enables word wrapping on all code blocks\n\t * by default, saving you from having to manually set this option on every single code block.\n\t */\n\tdefaultProps?:\n\t\t| (ExpressiveCodeBlock['props'] & {\n\t\t\t\t/**\n\t\t\t\t * Allows to override the default props based on a code block's\n\t\t\t\t * syntax highlighting language.\n\t\t\t\t *\n\t\t\t\t * Use the language IDs as keys and an object containing the props as values.\n\t\t\t\t * The keys also support specifying multiple language IDs separated by commas\n\t\t\t\t * to apply the same props to multiple languages.\n\t\t\t\t *\n\t\t\t\t * @example\n\t\t\t\t * ```js\n\t\t\t\t * defaultProps: {\n\t\t\t\t *   wrap: true,\n\t\t\t\t *   overridesByLang: {\n\t\t\t\t *     'bash,sh,zsh': { wrap: false }\n\t\t\t\t *   }\n\t\t\t\t * }\n\t\t\t\t * ```\n\t\t\t\t */\n\t\t\t\toverridesByLang?: Record<string, ExpressiveCodeBlock['props']> | undefined\n\t\t  })\n\t\t| undefined\n\t/**\n\t * An optional array of plugins that should be used when rendering code blocks.\n\t *\n\t * To add a plugin, import its initialization function and call it inside this array.\n\t *\n\t * If the plugin has any configuration options, you can pass them to the initialization\n\t * function as an object containing your desired property values.\n\t *\n\t * If any nested arrays are found inside the `plugins` array, they will be flattened\n\t * before processing.\n\t */\n\tplugins?: (ExpressiveCodePlugin | ExpressiveCodePlugin[])[] | undefined\n\tlogger?: Partial<ExpressiveCodeLoggerOptions> | undefined\n\n\t/**\n\t * @deprecated Efficient multi-theme support is now a core feature, so the `theme` option\n\t * was deprecated in favor of the new array `themes`. Please migrate your existing config\n\t * to use `themes` and ensure it is an array. If you only need a single theme, your `themes`\n\t * array can contain just this one theme. However, please consider the benefits of providing\n\t * multiple themes. See the `themes` option for more details.\n\t */\n\ttheme?: ExpressiveCodeTheme | undefined\n}\n\nexport type ResolvedExpressiveCodeEngineConfig = {\n\t[P in keyof Omit<ExpressiveCodeEngineConfig, 'customizeTheme' | 'plugins' | 'theme' | 'logger'>]-?: Exclude<ExpressiveCodeEngineConfig[P], undefined>\n} & {\n\tcustomizeTheme: ExpressiveCodeEngineConfig['customizeTheme']\n\tplugins: readonly ExpressiveCodePlugin[]\n\tlogger: ExpressiveCodeLogger\n}\n\n/**\n * The Expressive Code engine is responsible for rendering code blocks to a\n * [Hypertext Abstract Syntax Tree (HAST)](https://github.com/syntax-tree/hast)\n * that can be serialized to HTML, as well as generating the required CSS styles\n * and JS modules.\n *\n * It also provides read-only access to all resolved configuration options\n * through its public properties.\n */\nexport class ExpressiveCodeEngine implements ResolvedExpressiveCodeEngineConfig {\n\t/**\n\t * Creates a new instance of the Expressive Code engine.\n\t *\n\t * To minimize overhead caused by loading plugins, you can create a single instance\n\t * for your application and keep using it to render all your code blocks.\n\t */\n\tconstructor(config: ExpressiveCodeEngineConfig) {\n\t\t// Transfer deprecated `theme` option to `themes` without triggering the deprecation warning\n\t\tconst deprecatedConfig: Omit<ExpressiveCodeEngineConfig, 'theme'> & { theme?: ExpressiveCodeTheme | undefined } = config\n\t\tif (deprecatedConfig.theme && !config.themes) {\n\t\t\tconfig.themes = Array.isArray(deprecatedConfig.theme) ? deprecatedConfig.theme : [deprecatedConfig.theme]\n\t\t\tdelete deprecatedConfig.theme\n\t\t}\n\t\tthis.themes = Array.isArray(config.themes) ? [...config.themes] : config.themes ? [config.themes] : [new ExpressiveCodeTheme(githubDark), new ExpressiveCodeTheme(githubLight)]\n\t\tthis.minSyntaxHighlightingColorContrast = config.minSyntaxHighlightingColorContrast ?? 5.5\n\t\tthis.useDarkModeMediaQuery = config.useDarkModeMediaQuery ?? (this.themes.length === 2 && this.themes[0].type !== this.themes[1].type)\n\t\tthis.themeCssRoot = config.themeCssRoot ?? ':root'\n\t\tthis.themeCssSelector = config.themeCssSelector ?? ((theme) => `[data-theme='${theme.name}']`)\n\t\tthis.cascadeLayer = config.cascadeLayer ?? ''\n\t\tthis.useStyleReset = config.useStyleReset ?? true\n\t\tthis.customizeTheme = config.customizeTheme\n\t\tthis.useThemedScrollbars = config.useThemedScrollbars ?? true\n\t\tthis.useThemedSelectionColors = config.useThemedSelectionColors ?? false\n\t\tthis.styleOverrides = { ...config.styleOverrides }\n\t\tthis.defaultLocale = config.defaultLocale || 'en-US'\n\t\tthis.defaultProps = config.defaultProps || {}\n\t\tthis.plugins = [...corePlugins, ...(config.plugins?.flat() || [])]\n\t\tthis.logger = new ExpressiveCodeLogger(config.logger)\n\n\t\t// Allow customizing the loaded themes\n\t\tthis.themes = this.themes.map((theme, styleVariantIndex) => {\n\t\t\tif (this.customizeTheme) {\n\t\t\t\ttheme = this.customizeTheme(theme) ?? theme\n\t\t\t}\n\t\t\tif (this.minSyntaxHighlightingColorContrast > 0) {\n\t\t\t\t// Do a first pass of resolving style settings so we can determine\n\t\t\t\t// the code background color after applying potential overrides\n\t\t\t\tconst themeStyleSettings = resolveStyleSettings({\n\t\t\t\t\ttheme,\n\t\t\t\t\tstyleVariantIndex,\n\t\t\t\t\tplugins: this.plugins,\n\t\t\t\t\tstyleOverrides: this.styleOverrides,\n\t\t\t\t})\n\t\t\t\t// Use the code background color when ensuring contrast\n\t\t\t\tconst codeBg = getFirstStaticColor(themeStyleSettings.get('codeBackground'))\n\t\t\t\ttheme.ensureMinSyntaxHighlightingColorContrast(this.minSyntaxHighlightingColorContrast, codeBg)\n\t\t\t}\n\t\t\treturn theme\n\t\t})\n\n\t\t// Resolve core styles based on the themes and style overrides\n\t\tthis.styleVariants = resolveStyleVariants({\n\t\t\tthemes: this.themes,\n\t\t\tstyleOverrides: this.styleOverrides,\n\t\t\tplugins: this.plugins,\n\t\t\tcssVarName: getCssVarName,\n\t\t})\n\t}\n\n\t/**\n\t * Renders the given code block(s) and returns the rendered group & block ASTs,\n\t * the rendered code block contents after all transformations have been applied,\n\t * and a set of non-global CSS styles required by the rendered code blocks.\n\t *\n\t * In Expressive Code, all processing of your code blocks and their metadata\n\t * is performed by plugins. To render markup around lines or inline ranges of characters,\n\t * the `render` method calls the hook functions registered by all added plugins.\n\t *\n\t * @param input\n\t * The code block(s) to render. Can either be an `ExpressiveCodeBlockOptions` object\n\t * containing the properties required to create a new `ExpressiveCodeBlock` internally,\n\t * an existing `ExpressiveCodeBlock`, or an array containing any combination of these.\n\t *\n\t * @param options\n\t * Optional configuration options for the rendering process.\n\t */\n\tasync render(input: RenderInput, options?: RenderOptions) {\n\t\treturn await renderGroup({\n\t\t\tinput,\n\t\t\toptions,\n\t\t\tdefaultLocale: this.defaultLocale,\n\t\t\tconfig: {\n\t\t\t\t...this,\n\t\t\t},\n\t\t\tplugins: this.plugins,\n\t\t\t// Also pass resolved style variants in case plugins need them\n\t\t\t...this.getResolverContext(),\n\t\t})\n\t}\n\n\t/**\n\t * Returns a string containing all CSS styles that should be added to every page\n\t * using Expressive Code. These styles are static base styles which do not depend\n\t * on the configured theme(s).\n\t *\n\t * The calling code must take care of actually adding the returned styles to the page.\n\t *\n\t * Please note that the styles contain references to CSS variables, which must also\n\t * be added to the page. These can be obtained by calling {@link getThemeStyles}.\n\t */\n\tasync getBaseStyles(): Promise<string> {\n\t\tconst pluginStyles: PluginStyles[] = []\n\t\tconst resolverContext = this.getResolverContext()\n\t\t// Add core base styles\n\t\tpluginStyles.push({\n\t\t\tpluginName: 'core',\n\t\t\tstyles: getCoreBaseStyles({\n\t\t\t\t...resolverContext,\n\t\t\t\tuseStyleReset: this.useStyleReset,\n\t\t\t\tuseThemedScrollbars: this.useThemedScrollbars,\n\t\t\t\tuseThemedSelectionColors: this.useThemedSelectionColors,\n\t\t\t}),\n\t\t})\n\t\t// Add plugin base styles\n\t\tfor (const plugin of this.plugins) {\n\t\t\tif (!plugin.baseStyles) continue\n\t\t\tconst resolvedStyles = typeof plugin.baseStyles === 'function' ? await plugin.baseStyles(resolverContext) : plugin.baseStyles\n\t\t\tif (!resolvedStyles) continue\n\t\t\tpluginStyles.push({\n\t\t\t\tpluginName: plugin.name,\n\t\t\t\tstyles: resolvedStyles,\n\t\t\t})\n\t\t}\n\t\t// Process styles (scoping, minifying, etc.)\n\t\tconst processedStyles = await processPluginStyles(pluginStyles)\n\t\treturn wrapInCascadeLayer([...processedStyles].join(''), this.cascadeLayer)\n\t}\n\n\t/**\n\t * Returns a string containing theme-dependent styles that should be added to every page\n\t * using Expressive Code. These styles contain CSS variable declarations that are generated\n\t * automatically based on the configured {@link ExpressiveCodeEngineConfig.themes themes},\n\t * {@link ExpressiveCodeEngineConfig.useDarkModeMediaQuery useDarkModeMediaQuery} and\n\t * {@link ExpressiveCodeEngineConfig.themeCssSelector themeCssSelector} config options.\n\t *\n\t * The first theme defined in the `themes` option is considered the \"base theme\",\n\t * for which a full set of CSS variables is declared and scoped to the selector\n\t * defined by the `themeCssRoot` option (defaults to `:root`).\n\t *\n\t * For all alternate themes, a differential set of CSS variables is declared for cases where\n\t * their values differ from the base theme, and scoped to theme-specific selectors that are\n\t * generated by combining `themeCssRoot` with the theme selector specified by this option.\n\t *\n\t * The calling code must take care of actually adding the returned styles to the page.\n\t *\n\t * Please note that these styles must be added to the page together with the base styles\n\t * returned by {@link getBaseStyles}.\n\t */\n\tasync getThemeStyles(): Promise<string> {\n\t\tconst themeStyles: string[] = []\n\t\tconst renderDeclarations = (declarations: Map<string, string>) => [...declarations].map(([varName, varValue]) => `${varName}:${varValue}`).join(';')\n\n\t\t// Generate CSS styles for the first theme (the \"base theme\")\n\t\tconst { cssVarDeclarations: baseVars, theme: baseTheme } = this.styleVariants[0]\n\t\t// Generate an optional override selector with higher specificity\n\t\t// to allow selecting the base theme at the block level\n\t\tconst baseThemeSelector = this.themeCssSelector && this.themeCssSelector(baseTheme, { styleVariants: this.styleVariants })\n\t\tconst notBaseThemeSelector = baseThemeSelector ? `:not(${baseThemeSelector})` : ''\n\t\tconst baseThemeBlockInsideAlternateThemeRoot = notBaseThemeSelector && `${this.themeCssRoot}${notBaseThemeSelector} &${baseThemeSelector}`\n\t\tconst baseVarSelectors = [\n\t\t\t// Root selector without any specific theme selectors\n\t\t\tthis.themeCssRoot,\n\t\t\t// Code blocks with base theme selector inside root with non-base theme selector\n\t\t\tbaseThemeBlockInsideAlternateThemeRoot,\n\t\t]\n\t\t\t.filter((selector) => selector)\n\t\t\t.join(',')\n\t\tconst baseThemeStyleSelectors = [\n\t\t\t// Code blocks with no specific theme selector\n\t\t\t'&',\n\t\t\t// Code blocks with base theme selector inside root with non-base theme selector\n\t\t\tbaseThemeBlockInsideAlternateThemeRoot,\n\t\t]\n\t\t\t.filter((selector) => selector)\n\t\t\t.join(',')\n\t\tthemeStyles.push(\n\t\t\tawait scopeAndMinifyNestedCss(`\n\t\t\t\t${baseVarSelectors} {\n\t\t\t\t\t${renderDeclarations(baseVars)}\n\t\t\t\t}\n\t\t\t\t${baseThemeStyleSelectors} {\n\t\t\t\t\t${getCoreThemeStyles(0)}\n\t\t\t\t}\n\t\t\t`)\n\t\t)\n\n\t\t// Generate per-theme styles for all alternate themes\n\t\tconst alternateVariants: { theme: ExpressiveCodeTheme; cssVars: string; coreStyles: string }[] = []\n\t\tfor (let styleVariantIndex = 1; styleVariantIndex < this.styleVariants.length; styleVariantIndex++) {\n\t\t\tconst styleVariant = this.styleVariants[styleVariantIndex]\n\n\t\t\t// Add CSS variable declarations for any values that differ from the base theme\n\t\t\tconst diffVars = new Map<string, string>()\n\t\t\tstyleVariant.cssVarDeclarations.forEach((varValue, varName) => {\n\t\t\t\tif (baseVars.get(varName) !== varValue) {\n\t\t\t\t\tdiffVars.set(varName, varValue)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\talternateVariants.push({\n\t\t\t\ttheme: styleVariant.theme,\n\t\t\t\tcssVars: renderDeclarations(diffVars),\n\t\t\t\tcoreStyles: getCoreThemeStyles(styleVariantIndex),\n\t\t\t})\n\t\t}\n\n\t\t// Unless disabled, generate a media query to automatically switch to the first theme\n\t\t// of the alternate type (dark/light) when it's matching the user's system preferences\n\t\tif (this.useDarkModeMediaQuery) {\n\t\t\tconst baseTheme = this.styleVariants[0].theme\n\t\t\tconst altType = baseTheme.type === 'dark' ? 'light' : 'dark'\n\t\t\tconst firstAltVariant = alternateVariants.find((variant) => variant.theme.type === altType)\n\t\t\tif (!firstAltVariant)\n\t\t\t\tthrow new Error(\n\t\t\t\t\t[\n\t\t\t\t\t\t`The config option \"useDarkModeMediaQuery: true\" requires at least`,\n\t\t\t\t\t\t`one dark and one light theme, but the following themes were given:`,\n\t\t\t\t\t\tthis.themes.map((theme) => `${theme.name} (${theme.type})`).join(', '),\n\t\t\t\t\t].join(' ')\n\t\t\t\t)\n\t\t\tconst darkModeMediaQuery = await scopeAndMinifyNestedCss(`\n\t\t\t\t@media (prefers-color-scheme: ${altType}) {\n\t\t\t\t\t${this.themeCssRoot}${notBaseThemeSelector} {\n\t\t\t\t\t\t${firstAltVariant.cssVars}\n\t\t\t\t\t}\n\t\t\t\t\t${this.themeCssRoot}${notBaseThemeSelector} & {\n\t\t\t\t\t\t${firstAltVariant.coreStyles}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`)\n\t\t\tthemeStyles.push(darkModeMediaQuery)\n\t\t}\n\n\t\t// Unless disabled, also generate per-theme CSS styles\n\t\tif (this.themeCssSelector !== false) {\n\t\t\tfor (const { theme, cssVars, coreStyles } of alternateVariants) {\n\t\t\t\tconst themeSelector = this.themeCssSelector && this.themeCssSelector(theme, { styleVariants: this.styleVariants })\n\t\t\t\tif (!themeSelector) continue\n\n\t\t\t\tthemeStyles.push(\n\t\t\t\t\tawait scopeAndMinifyNestedCss(`\n\t\t\t\t\t\t${this.themeCssRoot}${themeSelector} &${notBaseThemeSelector}, &${themeSelector} {\n\t\t\t\t\t\t\t${cssVars};\n\t\t\t\t\t\t\t${coreStyles}\n\t\t\t\t\t\t}\n\t\t\t\t\t`)\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\treturn wrapInCascadeLayer(themeStyles.join(''), this.cascadeLayer)\n\t}\n\n\t/**\n\t * Returns an array of JavaScript modules (pure code without any wrapping `script` tags)\n\t * that should be added to every page containing code blocks.\n\t *\n\t * The contents are collected from the `jsModules` property of all registered plugins.\n\t * Any duplicates are removed.\n\t *\n\t * The calling code must take care of actually adding the collected scripts to the page.\n\t * For example, it could create site-wide JavaScript files from the returned modules\n\t * and refer to them in a script tag with `type=\"module\"`, or it could insert them\n\t * into inline `<script type=\"module\">` elements.\n\t */\n\tasync getJsModules(): Promise<string[]> {\n\t\tconst jsModules = new Set<string>()\n\t\tfor (const plugin of this.plugins) {\n\t\t\tconst pluginModules = typeof plugin.jsModules === 'function' ? await plugin.jsModules(this.getResolverContext()) : plugin.jsModules\n\t\t\tpluginModules?.forEach((moduleCode) => {\n\t\t\t\tmoduleCode = moduleCode.trim()\n\t\t\t\tif (moduleCode) jsModules.add(moduleCode)\n\t\t\t})\n\t\t}\n\t\treturn [...jsModules]\n\t}\n\n\tprivate cssVar(styleSetting: StyleSettingPath, fallbackValue?: string) {\n\t\treturn `var(${getCssVarName(styleSetting)}${fallbackValue ? `, ${fallbackValue}` : ''})`\n\t}\n\n\tprivate getResolverContext(): ResolverContext {\n\t\treturn {\n\t\t\tcssVar: (styleSetting, fallbackValue) => this.cssVar(styleSetting, fallbackValue),\n\t\t\tcssVarName: getCssVarName,\n\t\t\tstyleVariants: this.styleVariants,\n\t\t}\n\t}\n\n\treadonly themes: ExpressiveCodeTheme[]\n\treadonly minSyntaxHighlightingColorContrast: number\n\treadonly useDarkModeMediaQuery: boolean\n\treadonly themeCssRoot: string\n\treadonly themeCssSelector: NonNullable<ExpressiveCodeEngineConfig['themeCssSelector']>\n\treadonly cascadeLayer: string\n\treadonly useStyleReset: boolean\n\treadonly customizeTheme: ExpressiveCodeEngineConfig['customizeTheme']\n\treadonly useThemedScrollbars: boolean\n\treadonly useThemedSelectionColors: boolean\n\treadonly styleOverrides: StyleOverrides\n\treadonly styleVariants: StyleVariant[]\n\treadonly defaultLocale: string\n\treadonly defaultProps: NonNullable<ExpressiveCodeEngineConfig['defaultProps']>\n\treadonly plugins: readonly ExpressiveCodePlugin[]\n\treadonly logger: ExpressiveCodeLogger\n}\n","import { GroupContents, RenderedGroupContents } from '../internal/render-group'\nimport { ExpressiveCodeBlock } from './block'\n\nexport type PluginDataTarget = ExpressiveCodeBlock | GroupContents | RenderedGroupContents\n\n/**\n * A class that allows plugins to attach custom data to objects like code blocks,\n * and to optionally allow external access to this data in a type-safe manner.\n */\nexport class AttachedPluginData<PluginDataType> {\n\tprivate readonly dataStorage = new WeakMap<object, PluginDataType>()\n\tprivate readonly getInitialValueFn: () => PluginDataType\n\n\tconstructor(getInitialValueFn: () => PluginDataType) {\n\t\tthis.getInitialValueFn = getInitialValueFn\n\t}\n\n\tpublic getOrCreateFor(target: PluginDataTarget): PluginDataType {\n\t\tlet data = this.dataStorage.get(target)\n\t\tif (data === undefined) {\n\t\t\tdata = this.getInitialValueFn()\n\t\t\tthis.dataStorage.set(target, data)\n\t\t}\n\t\treturn data\n\t}\n\n\tpublic setFor(target: PluginDataTarget, data: PluginDataType) {\n\t\tthis.dataStorage.set(target, data)\n\t}\n}\n","type KnownTextsByKey<T extends { [K: string]: string | (() => string) }> = {\n\t[K in keyof T]: T[K]\n}\n\nexport class PluginTexts<Texts extends KnownTextsByKey<Texts>> {\n\tpublic readonly defaultTexts: Texts\n\tprivate readonly localizedTexts = new Map<string, Texts>()\n\tprivate readonly overridesByLocale = new Map<string | undefined, Partial<Texts>>()\n\n\tconstructor(defaultTexts: Texts) {\n\t\tthis.defaultTexts = defaultTexts\n\t}\n\n\t/**\n\t * Adds localized texts for a specific locale. You must provide a full set of localized texts\n\t * for the given locale.\n\t *\n\t * It is recommended to use two-letter language codes (e.g. `de`, `fr`, `es`) without region\n\t * codes to make your localized texts available to all users speaking the same language.\n\t * Region codes should only be added if regional differences must be taken into account.\n\t *\n\t * Plugin authors can use this to provide localized versions of their texts.\n\t * Users can also call this function to provide their own localizations.\n\t *\n\t * If you only want to customize a few texts of an existing localization,\n\t * have a look at `overrideTexts` instead.\n\t */\n\tpublic addLocale(locale: string, localizedTexts: Texts) {\n\t\t// Normalize the given locale\n\t\tlocale = this.parseLocale(locale).locale\n\t\t// Set (or override) the localized texts for this locale\n\t\tthis.localizedTexts.set(locale, localizedTexts)\n\t}\n\n\t/**\n\t * Allows you to override any defined texts. This is useful if you want to customize a few\n\t * selected texts without having to provide a full set of localized texts.\n\t *\n\t * You can either override texts for a specific `locale`, or override the default texts\n\t * by setting `locale` to `undefined`.\n\t *\n\t * It is recommended to use two-letter language codes (e.g. `de`, `fr`, `es`) without region\n\t * codes to apply your overrides to all users speaking the same language.\n\t * Region codes should only be added if regional differences must be taken into account.\n\t */\n\tpublic overrideTexts(locale: string | undefined, localeTextOverrides: Partial<Texts>) {\n\t\t// Normalize the given locale\n\t\tlocale = locale && this.parseLocale(locale).locale\n\t\t// Add the overrides to the map, creating the map if necessary\n\t\tconst localeOverrides = this.overridesByLocale.get(locale) || this.overridesByLocale.set(locale, {}).get(locale)!\n\t\tObject.assign(localeOverrides, localeTextOverrides)\n\t}\n\n\t/**\n\t * Returns the best matching texts for the requested locale,\n\t * taking any available localized texts and overrides into account.\n\t *\n\t * Example for locale `de-DE`:\n\t * - If localized texts for `de-DE` are available, these will be returned.\n\t * - If `de-DE` is not available, but `de` is, these will be returned.\n\t * - As the final fallback, the default texts will be returned.\n\t */\n\tpublic get(locale: string): Texts {\n\t\tconst { acceptedLocales } = this.parseLocale(locale)\n\t\tconst localizedTexts = this.getLocalizedTexts(acceptedLocales)\n\t\treturn this.applyOverrides(localizedTexts, acceptedLocales)\n\t}\n\n\tprivate parseLocale(locale: string) {\n\t\tconst parts = locale.trim().toLowerCase().split(/[-_]/)\n\t\tconst language = parts[0]\n\t\tconst region = parts[1]\n\t\tconst normalizedLocale = region ? `${language}-${region}` : language\n\n\t\tconst acceptedLocales: string[] = []\n\t\tacceptedLocales.push(language)\n\t\tif (region) acceptedLocales.push(normalizedLocale)\n\n\t\treturn {\n\t\t\tlanguage,\n\t\t\tregion,\n\t\t\tlocale: normalizedLocale,\n\t\t\tacceptedLocales,\n\t\t}\n\t}\n\n\tprivate getLocalizedTexts(acceptedLocales: string[]) {\n\t\tfor (const acceptedLocale of acceptedLocales) {\n\t\t\tconst localizedTexts = this.localizedTexts.get(acceptedLocale)\n\t\t\tif (localizedTexts) {\n\t\t\t\treturn localizedTexts\n\t\t\t}\n\t\t}\n\t\treturn this.defaultTexts\n\t}\n\n\tprivate applyOverrides(texts: Texts, acceptedLocales: string[]) {\n\t\tconst result = { ...texts }\n\n\t\t// Find all overrides matching the accepted locales,\n\t\t// as well as any global overrides as the last resort\n\t\tconst overrides = [...acceptedLocales, undefined].map((locale) => this.overridesByLocale.get(locale)).filter((x) => x)\n\n\t\t// Apply the overrides (if any) to the resulting texts\n\t\tif (overrides.length) {\n\t\t\tconst keys = Object.keys(texts) as (keyof Texts)[]\n\t\t\tkeys.forEach((key) => {\n\t\t\t\t// Find the first override that has a value for this key\n\t\t\t\t// and use it as the new value for the key\n\t\t\t\tfor (const override of overrides) {\n\t\t\t\t\tconst overrideValue = override?.[key]\n\t\t\t\t\tif (overrideValue) {\n\t\t\t\t\t\tresult[key] = overrideValue\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\treturn result\n\t}\n}\n","import { ExpressiveCodePluginHooks } from './plugin-hooks'\nimport { PluginStyleSettings } from './plugin-style-settings'\nimport { StyleSettingPath } from './style-settings'\nimport { StyleVariant } from './style-variants'\n\n/**\n * An interface that defines an Expressive Code plugin. To add a custom plugin,\n * you pass an object matching this interface into the `plugins` array property\n * of the engine configuration.\n */\nexport interface ExpressiveCodePlugin {\n\t/**\n\t * The display name of the plugin. This is the only required property.\n\t * It is used by the engine to display messages concerning the plugin,\n\t * e.g. when it encounters an error.\n\t */\n\tname: string\n\t/**\n\t * An instance of `PluginStyleSettings` that is used to define the plugin's CSS variables.\n\t */\n\tstyleSettings?: PluginStyleSettings | undefined\n\t/**\n\t * The CSS styles that should be added to every page containing code blocks.\n\t *\n\t * All styles are scoped to Expressive Code by default, so they will not affect\n\t * the rest of the page. SASS-like nesting is supported. If you want to add global styles,\n\t * you can use the `@at-root` rule or target `:root`, `html` or `body` in your selectors.\n\t *\n\t * The engine's `getBaseStyles` function goes through all registered plugins\n\t * and collects their base styles.\n\t *\n\t * If you provide a function instead of a string, it is called with an object argument\n\t * of type {@link ResolverContext}, and is expected to return a string or a string promise.\n\t *\n\t * The calling code must take care of actually adding the collected styles to the page.\n\t * For example, it could create a site-wide CSS stylesheet from the base styles\n\t * and insert a link to it, or it could insert the base styles into a `<style>` element.\n\t */\n\tbaseStyles?: string | BaseStylesResolverFn | undefined\n\t/**\n\t * JavaScript modules (pure code without any wrapping `script` tags) that should be added\n\t * to every page containing code blocks.\n\t *\n\t * The engine's `getJsModules` function goes through all registered plugins,\n\t * collects their JS modules and deduplicates them.\n\t *\n\t * If you provide a function instead of a string, it is called with an object argument\n\t * of type {@link ResolverContext}, and is expected to return a string or a string promise.\n\t *\n\t * The calling code must take care of actually adding the collected scripts to the page.\n\t * For example, it could create site-wide JavaScript files from the returned modules\n\t * and refer to them in a script tag with `type=\"module\"`, or it could insert them\n\t * into inline `<script type=\"module\">` elements.\n\t */\n\tjsModules?: string[] | JsModulesResolverFn | undefined\n\t/**\n\t * A set of functions that should be called by the engine at specific points in the\n\t * rendering process. See {@link ExpressiveCodePluginHooks} for a list of available hooks.\n\t */\n\thooks?: ExpressiveCodePluginHooks | undefined\n}\n\nexport type BaseStylesResolverFn = (context: ResolverContext) => string | Promise<string>\nexport type JsModulesResolverFn = (context: ResolverContext) => string[] | Promise<string[]>\n\n/**\n * A context object that the engine passes to most hook functions.\n *\n * It provides access to theme-dependent CSS variables, all resolved style variants\n * based on the configured themes and settings, and the config-dependent wrapper class name.\n */\nexport type ResolverContext = {\n\t/**\n\t * Returns a CSS variable reference for the given style setting. The CSS variable name is\n\t * automatically generated based on the setting path.\n\t *\n\t * You can optionally pass a fallback value that will be added to the CSS `var()` function call\n\t * (e.g. `var(--ec-xyz, fallbackValue)`) in case the referenced variable is not defined or\n\t * unsupported. However, this should rarely be the case as the engine automatically generates\n\t * CSS variables for all style settings if the plugin's `styleSettings` property is set.\n\t *\n\t * @example\n\t * cssVar('frames.fontSize')\n\t * // ↓↓↓\n\t * 'var(--ec-frames-fontSize)'\n\t *\n\t * cssVar('frames.fontSize', '2rem')\n\t * // ↓↓↓\n\t * 'var(--ec-frames-fontSize, 2rem)'\n\t */\n\tcssVar: (styleSetting: StyleSettingPath, fallbackValue?: string) => string\n\t/**\n\t * Returns the CSS variable name for the given style setting. The CSS variable name is\n\t * automatically generated based on the setting path.\n\t *\n\t * @example\n\t * cssVarName('frames.fontSize')\n\t * // ↓↓↓\n\t * '--ec-frames-fontSize'\n\t */\n\tcssVarName: (styleSetting: StyleSettingPath) => string\n\tstyleVariants: StyleVariant[]\n}\n\n/**\n * A utility function that helps you define an Expressive Code plugin.\n *\n * Using this function is recommended, but not required. It just passes through the given object,\n * but it also provides type information for your editor's auto-completion and type checking.\n *\n * @example\n * ```js\n * // your-plugin.mjs\n * import { definePlugin } from '@expressive-code/core'\n *\n * export function myCustomPlugin() {\n *   return definePlugin({\n *     name: 'My custom plugin',\n *     hooks: {\n *       // ...\n *     }\n *   })\n * }\n * ```\n */\nexport function definePlugin(plugin: ExpressiveCodePlugin) {\n\treturn plugin\n}\n","import * as hast from '../hast'\n\n/** @deprecated Please import this function from the `/hast` entrypoint instead. */\nexport const addClassName = hast.addClassName\n\n/** @deprecated Please import this function from the `/hast` entrypoint instead. */\nexport const getClassNames = hast.getClassNames\n\n/** @deprecated Please import this function from the `/hast` entrypoint instead. */\nexport const getInlineStyles = hast.getInlineStyles\n\n/** @deprecated Please import this function from the `/hast` entrypoint instead. */\nexport const removeClassName = hast.removeClassName\n\n/** @deprecated Please import this function from the `/hast` entrypoint instead. */\nexport const setInlineStyle = hast.setInlineStyle\n\n/** @deprecated Please import this function from the `/hast` entrypoint instead. */\nexport const setInlineStyles = hast.setInlineStyles\n\n/** @deprecated Please import this function from the `/hast` entrypoint instead. */\nexport const setProperty = hast.setProperty\n","/**\n * Formats a string template by replacing all placeholders with the given variables.\n *\n * Simple placeholders are written as variable names in curly brackets, e.g. `{variableName}`.\n *\n * You can also use conditional placeholders by separating multiple choices with semicolons\n * and optionally adding a condition before each choice, e.g.\n * `{itemCount;1=item;items}` or `{variableName; 0=zero; >0=positive; negative}`.\n *\n * The first choice that matches the condition will be used. There must always be exactly\n * one catch-all choice without a condition.\n */\nexport function formatTemplate(template: string, variables: { [key: string]: string | number }) {\n\tconst getReplacement = (varName: string, ...choices: string[]) => {\n\t\tconst value = variables[varName]\n\t\tif (value === undefined)\n\t\t\tthrow new Error(`Unknown variable name \"${varName}\" found in string template \"${template}\". Available variables: ${JSON.stringify(Object.keys(variables))}`)\n\t\tif (!choices.length) return value.toString()\n\t\tconst parsedChoices: { condition?: { operator: string; number: number } | undefined; text: string }[] = choices.map((choice) => {\n\t\t\tconst condition = choice.match(/^\\s*(<|>|)\\s*(-?[0-9.]+?)\\s*=\\s?/)\n\t\t\tif (!condition) return { text: choice.replace(/^\\s/, '') }\n\t\t\tconst [fullMatch, operator, conditionValue] = condition\n\n\t\t\tconst number = Number.parseFloat(conditionValue)\n\t\t\tif (isNaN(number)) throw new Error(`Expected condition value \"${conditionValue}\" to be a number in string template \"${template}\".`)\n\t\t\tif (typeof value !== 'number')\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Condition \"${operator}${conditionValue}\" in string template \"${template}\" requires variable \"${varName}\" to be a number, but it's ${JSON.stringify(value)}.`\n\t\t\t\t)\n\n\t\t\treturn {\n\t\t\t\tcondition: {\n\t\t\t\t\toperator: operator || '=',\n\t\t\t\t\tnumber,\n\t\t\t\t},\n\t\t\t\ttext: choice.slice(fullMatch.length),\n\t\t\t}\n\t\t})\n\t\tconst catchAllCount = parsedChoices.filter((choice) => !choice.condition).length\n\t\tif (catchAllCount !== 1) throw new Error(`Expected exactly 1 catch-all choice for variable \"${varName}\", but found ${catchAllCount} in string template \"${template}\".`)\n\t\tfor (const { condition, text } of parsedChoices) {\n\t\t\tif (!condition) return text\n\t\t\tif (typeof value !== 'number') continue\n\t\t\tconst conditionIsMatching =\n\t\t\t\t// Less than\n\t\t\t\t(condition.operator === '<' && value < condition.number) ||\n\t\t\t\t// Greater than\n\t\t\t\t(condition.operator === '>' && value > condition.number) ||\n\t\t\t\t// Equals\n\t\t\t\t(condition.operator === '=' && value === condition.number)\n\t\t\tif (conditionIsMatching) return text\n\t\t}\n\t\treturn ''\n\t}\n\n\t// Temporarily replace escaped curly brackets\n\tlet result = template\n\tresult = result.replace(/(?<!\\\\)\\\\{/g, '\\f(').replace(/(?<!\\\\)\\\\}/g, '\\f)')\n\t// Replace escaped escape characters with a single escape\n\tresult = result.replace(/\\\\(\\\\[{}])/g, '$1')\n\n\t// Replace all placeholders until no more are found\n\tconst innermostPlaceholderRegex = /\\{([^{]*?)\\}/g\n\tlet keepGoing = true\n\twhile (keepGoing) {\n\t\tkeepGoing = false\n\t\tresult = result.replace(innermostPlaceholderRegex, (match: string, contents: string) => {\n\t\t\tkeepGoing = true\n\t\t\tconst [varName, ...choices] = contents.split(';')\n\t\t\treturn getReplacement(varName, ...choices)\n\t\t\t\t.replace(/{/g, '\\f(')\n\t\t\t\t.replace(/}/g, '\\f)')\n\t\t})\n\t}\n\n\t// Revert replaced escaped curly brackets with regular ones\n\tresult = result.replace(/\\f\\(/g, '{').replace(/\\f\\)/g, '}')\n\n\treturn result\n}\n","// Explanation: https://stackoverflow.com/a/31621312/64949\nconst MAGIC_CONSTANT = 5381;\n\nexport default function djb2a(string) {\n\tlet hash = MAGIC_CONSTANT;\n\n\tfor (let index = 0; index < string.length; index++) {\n\t\t// Equivalent to: `hash * 33 ^ string.charCodeAt(i)`\n\t\thash = ((hash << 5) + hash) ^ string.charCodeAt(index);\n\t}\n\n\t// Convert it to an unsigned 32-bit integer.\n\treturn hash >>> 0;\n}\n","import djb2a from 'djb2a'\n\n/**\n * Returns a JSON-like string representation of the given object that is stable,\n * meaning that keys are sorted alphabetically. This causes objects with the same keys and values\n * to always have the same string representation.\n *\n * Circular references are handled by replacing them with the string `[Circular]`.\n *\n * Functions are replaced with the string `[Function]`, unless the `includeFunctionContents`\n * option is set to `true`.\n */\nexport function stableStringify(obj: unknown, options: { includeFunctionContents?: boolean | undefined } = {}): string {\n\tconst { includeFunctionContents: includeFunctionContents = false } = options\n\tconst visited = new WeakSet()\n\n\tconst toJson = (value: unknown): unknown => {\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tif (visited.has(value)) {\n\t\t\t\treturn '[Circular]'\n\t\t\t}\n\n\t\t\tvisited.add(value)\n\n\t\t\tlet result: unknown\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tresult = value.map(toJson)\n\t\t\t} else {\n\t\t\t\tconst objValue = value as Record<string, unknown>\n\t\t\t\tconst sortedKeys = Object.keys(objValue).sort()\n\t\t\t\tconst sortedObj: Record<string, unknown> = {}\n\t\t\t\tfor (const key of sortedKeys) {\n\t\t\t\t\tsortedObj[key] = toJson(objValue[key])\n\t\t\t\t}\n\t\t\t\tresult = sortedObj\n\t\t\t}\n\n\t\t\tvisited.delete(value)\n\t\t\treturn result\n\t\t}\n\n\t\tif (typeof value === 'function') {\n\t\t\treturn includeFunctionContents ? value.toString() : '[Function]'\n\t\t}\n\n\t\treturn value\n\t}\n\n\tif (obj === undefined) return 'undefined'\n\n\treturn JSON.stringify(toJson(obj))\n}\n\n/**\n * Returns a simple hash of the given object.\n *\n * The hash is stable, meaning that if the object has the same keys and values (in any order),\n * the hash will be the same. The hash is not cryptographically secure, but uses the simple\n * and fast `djb2a` algorithm, which is known to produce few collisions.\n */\nexport function getStableObjectHash(obj: unknown, options: { includeFunctionContents?: boolean | undefined; hashLength?: number | undefined } = {}): string {\n\tconst { includeFunctionContents = false, hashLength = 5 } = options\n\tconst numericHash = djb2a(stableStringify(obj, { includeFunctionContents }))\n\tconst padding = '0'.repeat(hashLength)\n\treturn (padding + numericHash.toString(36)).slice(-hashLength)\n}\n"],"mappings":"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","names":["node","regExp","matches","value","error","postcss","postcss","fn","h","h","s","h","h","s","s","settings","baseTheme","addClassName","getClassNames","getInlineStyles","removeClassName","setInlineStyle","setInlineStyles","setProperty"]}