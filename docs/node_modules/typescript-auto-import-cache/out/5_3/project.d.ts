import type { LanguageService, LanguageServiceHost } from 'typescript/lib/tsserverlibrary';
import { ProjectOptions } from '../5_0/project';
export declare function createProject(ts: typeof import('typescript/lib/tsserverlibrary'), host: LanguageServiceHost, createLanguageService: (host: LanguageServiceHost) => LanguageService, options: ProjectOptions): {
    dirty: boolean;
    hostProject: any;
    languageServiceEnabled: boolean;
    languageService: LanguageService | undefined;
    projectService: {
        serverMode: import("typescript").LanguageServiceMode;
        host: import("typescript").System;
        currentDirectory: any;
        toCanonicalFileName: any;
        toPath(fileName: string): any;
        getExecutingFilePath(): any;
        getNormalizedAbsolutePath(fileName: string): any;
        packageJsonCache: import("../5_0/packageJsonCache").PackageJsonCache;
        getPackageJsonsVisibleToFile(fileName: string, rootDir?: string | undefined): readonly import("../5_0/packageJsonCache").ProjectPackageJsonInfo[];
        includePackageJsonAutoImports(): import("..").PackageJsonAutoImportPreference;
        fileExists(fileName: import("typescript").server.NormalizedPath): boolean;
    };
    getCanonicalFileName: any;
    exportMapCache: import("../5_0/exportInfoMap").ExportInfoMap | undefined;
    getCachedExportInfoMap(): any;
    clearCachedExportInfoMap(): void;
    moduleSpecifierCache: import("../5_0/moduleSpecifierCache").ModuleSpecifierCache;
    getModuleSpecifierCache(): import("../5_0/moduleSpecifierCache").ModuleSpecifierCache;
    compilerOptions: import("typescript").CompilerOptions;
    getCompilationSettings(): import("typescript").CompilerOptions;
    getCompilerOptions(): import("typescript").CompilerOptions;
    program: import("typescript").Program | undefined;
    getCurrentProgram(): import("typescript").Program | undefined;
    currentDirectory: any;
    getCurrentDirectory(): string;
    symlinks: import("../5_0/symlinkCache").SymlinkCache | undefined;
    getSymlinkCache(): import("../5_0/symlinkCache").SymlinkCache;
    packageJsonsForAutoImport: Set<string> | undefined;
    getPackageJsonsForAutoImport(rootDir?: string | undefined): readonly import("../5_0/packageJsonCache").ProjectPackageJsonInfo[];
    getPackageJsonsVisibleToFile(fileName: string, rootDir?: string | undefined): readonly import("../5_0/packageJsonCache").ProjectPackageJsonInfo[];
    getModuleResolutionHostForAutoImportProvider(): import("typescript").ModuleResolutionHost;
    autoImportProviderHost: false | {
        getCurrentProgram(): import("typescript").Program | undefined;
        isEmpty(): boolean;
        close(): void;
        markAsDirty(): void;
    } | undefined;
    getPackageJsonAutoImportProvider(): import("typescript").Program | undefined;
    includePackageJsonAutoImports(): import("..").PackageJsonAutoImportPreference;
    close(): void;
    log(_message: string): void;
    sendPerformanceEvent(_kind: "UpdateGraph" | "CreatePackageJsonAutoImportProvider", _durationMs: number): void;
    toPath(fileName: string): any;
    getGlobalTypingsCacheLocation(): undefined;
    useSourceOfProjectReferenceRedirect(): boolean;
    onAutoImportProviderSettingsChanged(): void;
};
